{"commit_url":"https:\/\/github.com\/qbittorrent\/qBittorrent\/commit\/534ed91d043abfe8ad7ccd307e4c8b060bdaf214","commit_message":"Change MixedModeAlgorithm default to TCP. Closes #7779.\n\nMixedModeAlgorithm::Proportional will throttle TCP connections when utp\nis in use and users is expecting maximum speed no matter what, so now\ndisable the throttling.","code_diff":"@@ -304,7 +304,7 @@ Session::Session(QObject *parent)\n     , m_btProtocol(BITTORRENT_SESSION_KEY(\"BTProtocol\"), BTProtocol::Both\n         , clampValue(BTProtocol::Both, BTProtocol::UTP))\n     , m_isUTPRateLimited(BITTORRENT_SESSION_KEY(\"uTPRateLimited\"), true)\n-    , m_utpMixedMode(BITTORRENT_SESSION_KEY(\"uTPMixedMode\"), MixedModeAlgorithm::Proportional\n+    , m_utpMixedMode(BITTORRENT_SESSION_KEY(\"uTPMixedMode\"), MixedModeAlgorithm::TCP\n         , clampValue(MixedModeAlgorithm::TCP, MixedModeAlgorithm::Proportional))\n     , m_multiConnectionsPerIpEnabled(BITTORRENT_SESSION_KEY(\"MultiConnectionsPerIp\"), false)\n     , m_isAddTrackersEnabled(BITTORRENT_SESSION_KEY(\"AddTrackersEnabled\"), false)\n","commit_message_token_length":55,"code_token_length":287,"combined_token_length":342,"target":1}
{"commit_url":"https:\/\/github.com\/fzi-forschungszentrum-informatik\/ros_bt_py\/commit\/18358c431954d367c0df8ea4f8cbdd59627fe05c","commit_message":"Further increase wait times for shove tree testcase","code_diff":"@@ -192,13 +192,13 @@ class TestShoveTree(unittest.TestCase):\n         rospy.sleep(0.5)\n \n         is_running = False\n-        for _ in range(16):\n+        for _ in range(32):\n             rospy.sleep(0.5)\n             if remote_slot_node.tick() == NodeMsg.RUNNING:\n                 is_running = True\n                 break\n         if not is_running:\n-            raise Exception('Slot is not running after 4 seconds, but in state %s'\n+            raise Exception('Slot is not running after 16 seconds, but in state %s'\n                             % remote_slot_node.state)\n \n         rospy.sleep(0.05)\n","commit_message_token_length":9,"code_token_length":318,"combined_token_length":327,"target":0}
{"commit_url":"https:\/\/github.com\/tonlabs\/TVM-Compiler\/commit\/a55027f68a3b47236bcc9a7a30940a54517a0200","commit_message":"ValueTracking: Small cleanup in ComputeNumSignBits  Constant contains the isAllOnesValue and isNullValue predicates, not ConstantInt.  llvm-svn: 224848","code_diff":"@@ -1768,7 +1768,7 @@ unsigned ComputeNumSignBits(Value *V, const DataLayout *TD,\n     if (Tmp == 1) return 1;  \/\/ Early out.\n \n     \/\/ Special case decrementing a value (ADD X, -1):\n-    if (ConstantInt *CRHS = dyn_cast<ConstantInt>(U->getOperand(1)))\n+    if (const auto *CRHS = dyn_cast<Constant>(U->getOperand(1)))\n       if (CRHS->isAllOnesValue()) {\n         APInt KnownZero(TyBits, 0), KnownOne(TyBits, 0);\n         computeKnownBits(U->getOperand(0), KnownZero, KnownOne, TD, Depth+1, Q);\n@@ -1793,7 +1793,7 @@ unsigned ComputeNumSignBits(Value *V, const DataLayout *TD,\n     if (Tmp2 == 1) return 1;\n \n     \/\/ Handle NEG.\n-    if (ConstantInt *CLHS = dyn_cast<ConstantInt>(U->getOperand(0)))\n+    if (const auto *CLHS = dyn_cast<Constant>(U->getOperand(0)))\n       if (CLHS->isNullValue()) {\n         APInt KnownZero(TyBits, 0), KnownOne(TyBits, 0);\n         computeKnownBits(U->getOperand(1), KnownZero, KnownOne, TD, Depth+1, Q);\n","commit_message_token_length":43,"code_token_length":414,"combined_token_length":457,"target":0}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/a6eec1263883ce9787a354e1635b7b732e72c3c9","commit_message":"upload-pack: drop lookup-before-parse optimization\n\nWhen we receive a \"have\" line from the client, we want to\nload the object pointed to by the sha1. However, we are\ncareful to do:\n\n  o = lookup_object(sha1);\n  if (!o || !o->parsed)\n\t  o = parse_object(sha1);\n\nto avoid loading the object from disk if we have already\nseen it.  However, since ccdc603 (parse_object: try internal\ncache before reading object db), parse_object already does\nthis optimization internally. We can just call parse_object\ndirectly.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -327,9 +327,7 @@ static int got_sha1(char *hex, unsigned char *sha1)\n \tif (!has_sha1_file(sha1))\n \t\treturn -1;\n \n-\to = lookup_object(sha1);\n-\tif (!(o && o->parsed))\n-\t\to = parse_object(sha1);\n+\to = parse_object(sha1);\n \tif (!o)\n \t\tdie(\"oops (%s)\", sha1_to_hex(sha1));\n \tif (o->type == OBJ_COMMIT) {\n","commit_message_token_length":189,"code_token_length":148,"combined_token_length":337,"target":1}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/66a67effcc5beaf8a61e1c1147c3114b02a96439","commit_message":"sd-dhcp-client: --omg-optimized\n\nPassing the protocol to socket() is redundant as it will be specified again in\nbind(). Dropping the redundancy reduces the cost of bind() from ~30ms to ~0ms.\nFor details see [0].\n\nnetworkd in a container (i.e., with next to no network latency) can now\nnegotiate a DHCP lease in 0.7 - 5 ms.\n\nThanks to Kay for help with debugging and to Daniel Borkmann for the pointer\nto fix the problem.\n\n[0]: <https:\/\/git.kernel.org\/cgit\/linux\/kernel\/git\/torvalds\/linux.git\/commit\/?id=902fefb82ef72a50c78cb4a20cc954b037a98d1c>","code_diff":"@@ -37,8 +37,7 @@ int dhcp_network_bind_raw_socket(int index, union sockaddr_union *link)\n         assert(index > 0);\n         assert(link);\n \n-        s = socket(AF_PACKET, SOCK_DGRAM | SOCK_CLOEXEC | SOCK_NONBLOCK,\n-                   htons(ETH_P_IP));\n+        s = socket(AF_PACKET, SOCK_DGRAM | SOCK_CLOEXEC | SOCK_NONBLOCK, 0);\n         if (s < 0)\n                 return -errno;\n \n","commit_message_token_length":183,"code_token_length":218,"combined_token_length":401,"target":1}
{"commit_url":"https:\/\/github.com\/microsoft\/ptvsd\/commit\/1a13aa2450fee2a0aac4ecbe84d448a1700309b7","commit_message":"Fix #967: Debugging Django in VSC with subprocess debugging is very slow\n\nAvoid hogging CPU while waiting on the subprocess notification queue.","code_diff":"@@ -1296,7 +1296,7 @@ class VSCodeMessageProcessor(VSCLifecycleMsgProcessor):\n     def _subprocess_notifier(self):\n         while not self.closed:\n             try:\n-                subprocess_request, subprocess_response = multiproc.subprocess_queue.get(block=False, timeout=0.1)\n+                subprocess_request, subprocess_response = multiproc.subprocess_queue.get(timeout=0.1)\n             except queue.Empty:\n                 continue\n \n","commit_message_token_length":33,"code_token_length":202,"combined_token_length":235,"target":1}
{"commit_url":"https:\/\/github.com\/EasyRPG\/Player\/commit\/72749b7a94ea09ec59870e099aac9bbf5de89a45","commit_message":"Effects cache: Fix memory leak\n\nThe BitmapRef reference counter never reached 0 because it was part of the key, preventing deletion.\nChanged it to a pointer. The value is never read so doesn't matter if it becomes stale.\n\nFix #3163","code_diff":"@@ -81,7 +81,7 @@ namespace {\n \tstd::unordered_map<tile_key_type, std::weak_ptr<Bitmap>> cache_tiles;\n \n \t\/\/ rect, flip_x, flip_y, tone, blend\n-\tusing effect_key_type = std::tuple<BitmapRef, Rect, bool, bool, Tone, Color>;\n+\tusing effect_key_type = std::tuple<Bitmap*, Rect, bool, bool, Tone, Color>;\n \tstd::map<effect_key_type, std::weak_ptr<Bitmap>> cache_effects;\n \n \tstd::string system_name;\n@@ -444,7 +444,7 @@ BitmapRef Cache::Tile(StringView filename, int tile_id) {\n \n BitmapRef Cache::SpriteEffect(const BitmapRef& src_bitmap, const Rect& rect, bool flip_x, bool flip_y, const Tone& tone, const Color& blend) {\n \tconst effect_key_type key {\n-\t\tsrc_bitmap,\n+\t\tsrc_bitmap.get(),\n \t\trect,\n \t\tflip_x,\n \t\tflip_y,\n","commit_message_token_length":55,"code_token_length":290,"combined_token_length":345,"target":1}
{"commit_url":"https:\/\/github.com\/llvm-mirror\/clang\/commit\/7cea1487602536e91a2c36511f5ad56ff1b2dc68","commit_message":"Test for virtual instead of pure here. It has the exact same effect, and John\nclaims it will improve performance.\n\n\ngit-svn-id: https:\/\/llvm.org\/svn\/llvm-project\/cfe\/trunk@174341 91177308-0d34-0410-b5e6-96231b3b80d8","code_diff":"@@ -11192,7 +11192,7 @@ void Sema::MarkDeclRefReferenced(DeclRefExpr *E) {\n   \/\/ if it's a qualified reference.\n   bool OdrUse = true;\n   if (CXXMethodDecl *Method = dyn_cast<CXXMethodDecl>(E->getDecl()))\n-    if (Method->isPure())\n+    if (Method->isVirtual())\n       OdrUse = false;\n   MarkExprReferenced(*this, E->getLocation(), E->getDecl(), E, OdrUse);\n }\n","commit_message_token_length":81,"code_token_length":147,"combined_token_length":228,"target":1}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/3446a59b3950d57960e27f8a2c7e41462bd2bcf4","commit_message":"strbuf_getwholeline: use getc macro\n\nstrbuf_getwholeline calls fgetc in a tight loop. Using the\ngetc form, which can be implemented as a macro, should be\nfaster (and we do not care about it evaluating our argument\ntwice, as we just have a plain variable).\n\nOn my glibc system, running \"git rev-parse\nrefs\/heads\/does-not-exist\" on a file with an extremely large\n(1.6GB) packed-refs file went from (best of 3 runs):\n\n  real    0m19.383s\n  user    0m18.876s\n  sys     0m0.528s\n\nto:\n\n  real    0m18.900s\n  user    0m18.472s\n  sys     0m0.448s\n\nfor a wall-clock speedup of 2.5%.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -443,7 +443,7 @@ int strbuf_getwholeline(struct strbuf *sb, FILE *fp, int term)\n \t\treturn EOF;\n \n \tstrbuf_reset(sb);\n-\twhile ((ch = fgetc(fp)) != EOF) {\n+\twhile ((ch = getc(fp)) != EOF) {\n \t\tstrbuf_grow(sb, 1);\n \t\tsb->buf[sb->len++] = ch;\n \t\tif (ch == term)\n","commit_message_token_length":263,"code_token_length":127,"combined_token_length":390,"target":1}
{"commit_url":"https:\/\/github.com\/jungmannlab\/picasso\/commit\/e0151ae457b66d10781b3efa85e97b06f852734f","commit_message":"changed to fig.show to avoid floating figure","code_diff":"@@ -1456,9 +1456,6 @@ class DisplaySettingsDialog(QtGui.QDialog):\n         self.show_legend.setEnabled(False)\n         self.show_legend.setAutoDefault(False)\n         self.show_legend.clicked.connect(self.window.view.show_legend)\n-\n-\n-\n         \n     def on_oversampling_changed(self, value):\n         contrast_factor = (self._oversampling \/ value)**2\n@@ -3463,7 +3460,6 @@ class View(QtGui.QLabel):\n         self.update_scene()\n \n     def show_legend(self):\n-        print('This will be the legend')\n         parameter = self.window.display_settings_dialog.parameter.currentText()\n         n_colors = self.window.display_settings_dialog.color_step.value()\n         min_val = self.window.display_settings_dialog.minimum_render.value()\n@@ -3490,7 +3486,7 @@ class View(QtGui.QLabel):\n         plt.xticks(x, labels)\n \n         plt.title(parameter )\n-        plt.show()\n+        fig1.show()\n \n \n     def activate_render_property(self):\n","commit_message_token_length":9,"code_token_length":427,"combined_token_length":436,"target":0}
{"commit_url":"https:\/\/github.com\/rwengine\/openrw\/commit\/f7bd8701db2a98678e206ae78515b0a0e16b092b","commit_message":"setForcedUpdateAllAabbs to false; Reduces stepSimulation time by 35%.\n\nThis causes a drop from 6.5ms to 4.2ms on my machine.","code_diff":"@@ -92,6 +92,7 @@ GameWorld::GameWorld(Logger* log, GameData* dat)\n         _overlappingPairCallback.get());\n     gContactProcessedCallback = ContactProcessedCallback;\n     dynamicsWorld->setInternalTickCallback(PhysicsTickCallback, this);\n+    dynamicsWorld->setForceUpdateAllAabbs(false);\n }\n \n GameWorld::~GameWorld() {\n","commit_message_token_length":40,"code_token_length":115,"combined_token_length":155,"target":1}
{"commit_url":"https:\/\/github.com\/rsyslog\/rsyslog\/commit\/fa8ff7601de0340fbc0d3892b418a5dbb32a6e24","commit_message":"slight optimizations: avoid unnecessary writes\n\nbut this happens only during config load, so no real gain","code_diff":"@@ -543,8 +543,10 @@ rsRetVal cstrTrimTrailingWhiteSpace(cstr_t *pThis)\n \t\t--i;\n \t}\n \t\/* i now is the new string length! *\/\n-\tpThis->iStrLen = i;\n-\tpThis->pBuf[pThis->iStrLen] = '\\0'; \/* we always have this space *\/\n+\tif(i != pThis->iStrLen) {\n+\t\tpThis->iStrLen = i;\n+\t\tpThis->pBuf[pThis->iStrLen] = '\\0'; \/* we always have this space *\/\n+\t}\n \n done:\treturn RS_RET_OK;\n }\n","commit_message_token_length":21,"code_token_length":175,"combined_token_length":196,"target":1}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/9ec726a4120bb219530faf988198a704ec7dd1f1","commit_message":"grep: skip pthreads overhead when using one thread\n\nSkip the administrative overhead of using pthreads when only using one\nthread. Instead take the non-threaded path which would be taken under\nNO_PTHREADS.\n\nThe threading support was initially added in commit\n5b594f457a (\"Threaded grep\", 2010-01-25) with a hardcoded compile-time\nnumber of 8 threads. Later the number of threads was made configurable\nin commit 89f09dd34e (\"grep: add --threads=<num> option and\ngrep.threads configuration\", 2015-12-15).\n\nThat change did not add any special handling for --threads=1. Now we\ntake a slightly faster path by skipping thread handling entirely when\n1 thread is requested.\n\nSigned-off-by: \u00c6var Arnfj\u00f6r\u00f0 Bjarmason <avarab@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -1238,6 +1238,8 @@ int cmd_grep(int argc, const char **argv, const char *prefix)\n \t\tnum_threads = GREP_NUM_THREADS_DEFAULT;\n \telse if (num_threads < 0)\n \t\tdie(_(\"invalid number of threads specified (%d)\"), num_threads);\n+\tif (num_threads == 1)\n+\t\tnum_threads = 0;\n #else\n \tif (num_threads)\n \t\twarning(_(\"no threads support, ignoring --threads\"));\n","commit_message_token_length":228,"code_token_length":143,"combined_token_length":371,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/51777a2914dc46f2831752b74db6276369df0905","commit_message":"Fix constant editor redraw after shortcut\n\nIntroduced by me by mistake on #71328. Fixes #71652.","code_diff":"@@ -385,6 +385,7 @@ void BaseButton::shortcut_input(const Ref<InputEvent> &p_event) {\n \t\tif (shortcut_feedback) {\n \t\t\tif (shortcut_feedback_timer == nullptr) {\n \t\t\t\tshortcut_feedback_timer = memnew(Timer);\n+\t\t\t\tshortcut_feedback_timer->set_one_shot(true);\n \t\t\t\tadd_child(shortcut_feedback_timer);\n \t\t\t\tshortcut_feedback_timer->set_wait_time(GLOBAL_GET(\"gui\/timers\/button_shortcut_feedback_highlight_time\"));\n \t\t\t\tshortcut_feedback_timer->connect(\"timeout\", callable_mp(this, &BaseButton::_shortcut_feedback_timeout));\n","commit_message_token_length":25,"code_token_length":206,"combined_token_length":231,"target":1}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/47b33c7d5284492e5679ccfabafe8c9738de8cb3","commit_message":"string-util: optimize strshorten() a bit\n\nThere's no reason to determine the full length of the string, it's\nsufficient to know whether it is larger than the intended size...","code_diff":"@@ -558,7 +558,7 @@ bool nulstr_contains(const char *nulstr, const char *needle) {\n char* strshorten(char *s, size_t l) {\n         assert(s);\n \n-        if (l < strlen(s))\n+        if (strnlen(s, l+1) > l)\n                 s[l] = 0;\n \n         return s;\n","commit_message_token_length":41,"code_token_length":145,"combined_token_length":186,"target":1}
{"commit_url":"https:\/\/github.com\/gpg\/libgcrypt\/commit\/bf6d5b10cb4173826f47ac080506b68bb001acb2","commit_message":"cipher: Fix IDEA cipher for clearing memory.\n\n* cipher\/idea.c (invert_key): Use wipememory, since this kind of memset\nmay be removed by compiler optimization.\n\n--\nReported-by: Zhaomo Yang and Brian Johannesmeyer\nSigned-off-by: NIIBE Yutaka <gniibe@fsij.org>","code_diff":"@@ -152,7 +152,7 @@ invert_key( u16 *ek, u16 dk[IDEA_KEYLEN] )\n     *--p = t2;\n     *--p = t1;\n     memcpy(dk, temp, sizeof(temp) );\n-    memset(temp, 0, sizeof(temp) );  \/* burn temp *\/\n+    wipememory(temp, sizeof(temp));\n }\n \n \n","commit_message_token_length":87,"code_token_length":120,"combined_token_length":207,"target":1}
{"commit_url":"https:\/\/github.com\/IQSS\/dataverse\/commit\/4d930df0a5b5203a8a40ebccc3b16cc94daaedea","commit_message":"use mimetype determination by extension for direct upload","code_diff":"@@ -1094,8 +1094,13 @@ public class FileUtil implements java.io.Serializable  {\n \n \t\t\t} \n \t\t} else {\n-\t\t\t\/\/Remote file, trust supplier\n-\t\t\tfinalType = suppliedContentType;\n+\t\t\tif(suppliedContentType==FileUtil.MIME_TYPE_UNDETERMINED_DEFAULT) {\n+\t\t\t\tfinalType=determineFileTypeByExtension(fileName);\n+\t\t\t\tlogger.fine(\"Determined type: \" + finalType);\n+\t\t\t} else {\n+\t\t\t  \/\/Remote file, trust supplier\n+\t\t\t  finalType = suppliedContentType;\n+\t\t\t}\n \t\t}\n         \/\/ Finally, if none of the special cases above were applicable (or \n         \/\/ if we were unable to unpack an uploaded file, etc.), we'll just \n","commit_message_token_length":10,"code_token_length":234,"combined_token_length":244,"target":0}
{"commit_url":"https:\/\/github.com\/rsyslog\/rsyslog\/commit\/4af7e0616618118cc1ed7deba6a7fcefeb4b4c08","commit_message":"core\/stream.c: very, very slightly speed up multiline reads","code_diff":"@@ -934,8 +934,10 @@ strmReadMultiLine(strm_t *pThis, cstr_t **ppCStr, regex_t *preg, const sbool bEs\n \t\t\t\t} else {\n \t\t\t\t\tcstrAppendChar(pThis->prevMsgSegment, '\\n');\n \t\t\t\t}\n-\t\t\t\tCHKiRet(cstrAppendCStr(pThis->prevMsgSegment, thisLine));\n-\t\t\t\t\/* we could do this faster, but for now keep it simple *\/\n+\t\t\t\tif(thisLine->iStrLen > 0) {\n+\t\t\t\t\tCHKiRet(cstrAppendCStr(pThis->prevMsgSegment, thisLine));\n+\t\t\t\t\t\/* we could do this faster, but for now keep it simple *\/\n+\t\t\t\t}\n \n \t\t\t}\n \t\t}\n","commit_message_token_length":16,"code_token_length":227,"combined_token_length":243,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/085255bd0ed2c36b217769c6f75c8ea856725b1a","commit_message":"Improved X11 screen_get_refresh_rate performance","code_diff":"@@ -1571,7 +1571,7 @@ float DisplayServerX11::screen_get_refresh_rate(int p_screen) const {\n \n \t\/\/Use xrandr to get screen refresh rate.\n \tif (xrandr_ext_ok) {\n-\t\tXRRScreenResources *screen_info = XRRGetScreenResources(x11_display, windows[MAIN_WINDOW_ID].x11_window);\n+\t\tXRRScreenResources *screen_info = XRRGetScreenResourcesCurrent(x11_display, windows[MAIN_WINDOW_ID].x11_window);\n \t\tif (screen_info) {\n \t\t\tRRMode current_mode = 0;\n \t\t\txrr_monitor_info *monitors = nullptr;\n","commit_message_token_length":12,"code_token_length":186,"combined_token_length":198,"target":1}
{"commit_url":"https:\/\/github.com\/EasyRPG\/Player\/commit\/a086820de8eadbd830f3aa5ebf822d548a465879","commit_message":"When the cache is exhausted do not delete unreferenced assets that were used during the last 50ms (approx. 3 frames).\n\nThe current behaviour (flush everything unreferenced when cache is full) was added to workaround out-of-memory issues on systems with limited RAM but this direct unload makes some use cases like face rendering in the Battle scene with Gauge style really slow (when the cache is full the face is unloaded and reloaded from disk once every frame).\n\nI hope that 50ms is a good compromise here.\n\nFix #2509","code_diff":"@@ -101,8 +101,15 @@ namespace {\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\tif (cache_size <= cache_limit && cur_ticks - it->second.last_access < 3s) {\n-\t\t\t\t\/\/ Below memory limit and last access < 3s\n+\t\t\tauto last_access = cur_ticks - it->second.last_access;\n+\t\t\tbool cache_exhausted = cache_size > cache_limit;\n+\t\t\tif (cache_exhausted) {\n+\t\t\t\tif (last_access <= 50ms) {\n+\t\t\t\t\t\/\/ Used during the last 3 frames, must be important, keep it.\n+\t\t\t\t\t++it;\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t} else if (last_access <= 3s) {\n \t\t\t\t++it;\n \t\t\t\tcontinue;\n \t\t\t}\n","commit_message_token_length":120,"code_token_length":238,"combined_token_length":358,"target":1}
{"commit_url":"https:\/\/github.com\/RPTools\/maptool\/commit\/e7086a8db30ad9bc350bfd782f047428df126be7","commit_message":"Include temporary token light sources\n\nThis adds back in necessary functionality for Expose Last Path to function correctly.","code_diff":"@@ -455,6 +455,13 @@ private Illumination getIllumination(IlluminationKey illuminationKey) {\n         illuminationKey, key -> getUpToDateIlluminator(key).getIllumination());\n   }\n \n+  \/**\n+   * Add personal lights and daylight for a token, as well as any normal lights if the token is\n+   * temporary.\n+   *\n+   * @param token\n+   * @return All extra light contributions to be made for this token.\n+   *\/\n   private @Nonnull List<ContributedLight> getPersonalTokenContributions(Token token) {\n     if (!token.getHasSight()) {\n       return Collections.emptyList();\n@@ -477,6 +484,14 @@ private Illumination getIllumination(IlluminationKey illuminationKey) {\n         personalLights.add(contributedLight);\n       }\n \n+      if (token.hasLightSources()\n+          && !lightSourceMap\n+              .getOrDefault(LightSource.Type.NORMAL, Collections.emptySet())\n+              .contains(token.getId())) {\n+        \/\/ This accounts for temporary tokens (such as during an Expose Last Path)\n+        personalLights.addAll(calculateLitAreas(token, sight.getMultiplier()));\n+      }\n+\n       if (sight.hasPersonalLightSource()) {\n         \/\/ Calculate the personal light area here.\n         \/\/ Note that a personal light is affected by its own sight's magnification, but that's it.\n","commit_message_token_length":23,"code_token_length":463,"combined_token_length":486,"target":1}
{"commit_url":"https:\/\/github.com\/plctlab\/llvm-project\/commit\/a0fa5d656412fa8af4898eccca30fc7c2de4fa8f","commit_message":"Fix another case where we should be using isBeforeInTranslationUnit().  llvm-svn: 163533","code_diff":"@@ -325,8 +325,10 @@ static bool compare(const PathDiagnostic &X, const PathDiagnostic &Y) {\n       return false;\n     SourceLocation XDL = XD->getLocation();\n     SourceLocation YDL = YD->getLocation();\n-    if (XDL != YDL)\n-      return XDL < YDL;\n+    if (XDL != YDL) {\n+      const SourceManager &SM = XL.getManager();\n+      return SM.isBeforeInTranslationUnit(XDL, YDL);\n+    }\n   }\n   PathDiagnostic::meta_iterator XI = X.meta_begin(), XE = X.meta_end();\n   PathDiagnostic::meta_iterator YI = Y.meta_begin(), YE = Y.meta_end();\n","commit_message_token_length":24,"code_token_length":221,"combined_token_length":245,"target":0}
{"commit_url":"https:\/\/github.com\/openssl\/openssl\/commit\/06b9ff06cc7fdd8f51abb92aaac39d3988a7090e","commit_message":"Swap to using _longjmp\/_setjmp instead of longjmp\/setjmp\n\n_longjmp\/_setjmp do not manipulate the signal mask whilst\nlongjmp\/setjmp may do. Online sources suggest this could result\nin a significant speed up in the context switching.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>","code_diff":"@@ -80,9 +80,9 @@ static inline int async_fibre_swapcontext(async_fibre *o, async_fibre *n, int r)\n {\n     o->env_init = 1;\n \n-    if (!r || !setjmp(o->env)) {\n+    if (!r || !_setjmp(o->env)) {\n         if (n->env_init)\n-            longjmp(n->env, 1);\n+            _longjmp(n->env, 1);\n         else\n             setcontext(&n->fibre);\n     }\n","commit_message_token_length":85,"code_token_length":202,"combined_token_length":287,"target":1}
{"commit_url":"https:\/\/github.com\/ClickHouse\/ClickHouse\/commit\/a45e3d47adacc59699de26b59e5966307b97b8fb","commit_message":"Remove useless codec from system.asynchronous_metric_log","code_diff":"@@ -40,7 +40,7 @@ struct AsynchronousMetricLogElement\n         return \"event_date Date CODEC(Delta(2), ZSTD(1)), \"\n                \"event_time DateTime CODEC(Delta(4), ZSTD(1)), \"\n                \"metric LowCardinality(String) CODEC(ZSTD(1)), \"\n-               \"value Float64 CODEC(Gorilla, ZSTD(3))\";\n+               \"value Float64 CODEC(ZSTD(3))\";\n     }\n };\n \n","commit_message_token_length":13,"code_token_length":193,"combined_token_length":206,"target":1}
{"commit_url":"https:\/\/github.com\/mapbox\/mapbox-gl-native\/commit\/2f30dfe97d851f2a2bb4141dc234013b01f8afd3","commit_message":"Disable heading updates for .FollowWithCourse\n\nFixes #2180.","code_diff":"@@ -2310,6 +2310,7 @@ CLLocationCoordinate2D MGLLocationCoordinate2DFromLatLng(mbgl::LatLng latLng)\n             break;\n         }\n         case MGLUserTrackingModeFollow:\n+        case MGLUserTrackingModeFollowWithCourse:\n         {\n             self.showsUserLocation = YES;\n \n@@ -2323,7 +2324,6 @@ CLLocationCoordinate2D MGLLocationCoordinate2DFromLatLng(mbgl::LatLng latLng)\n             break;\n         }\n         case MGLUserTrackingModeFollowWithHeading:\n-        case MGLUserTrackingModeFollowWithCourse:\n         {\n             self.showsUserLocation = YES;\n \n","commit_message_token_length":16,"code_token_length":279,"combined_token_length":295,"target":1}
{"commit_url":"https:\/\/github.com\/pgq\/skytools-legacy\/commit\/a44168ff3b0d9dba24526fa566173be0631f3035","commit_message":"code expected value in seconds, not interval object","code_diff":"@@ -109,8 +109,10 @@ class SmartTicker(skytools.DBScript):\n         t.start()\n \n     def refresh_queues(self, cx):\n-        q = \"select queue_name, queue_event_seq, queue_ticker_idle_period,\"\\\n-            \" queue_ticker_max_lag, queue_ticker_max_count\"\\\n+        q = \"select queue_name, queue_event_seq,\"\\\n+            \" extract('epoch' from queue_ticker_idle_period) as queue_ticker_idle_period,\"\\\n+            \" extract('epoch' from queue_ticker_max_lag) as queue_ticker_max_lag,\"\\\n+            \" queue_ticker_max_count\"\\\n             \" from pgq.queue\"\\\n             \" where not queue_external_ticker\"\n         cx.execute(q)\n","commit_message_token_length":9,"code_token_length":308,"combined_token_length":317,"target":0}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/829349d2ca6e49eaf0703154467ee8020484b387","commit_message":"Do not reload resources and send notification if locale is not changed.","code_diff":"@@ -518,8 +518,12 @@ String TranslationServer::get_country_name(const String &p_country) const {\n }\n \n void TranslationServer::set_locale(const String &p_locale) {\n-\tlocale = standardize_locale(p_locale);\n+\tString new_locale = standardize_locale(p_locale);\n+\tif (locale == new_locale) {\n+\t\treturn;\n+\t}\n \n+\tlocale = new_locale;\n \tResourceLoader::reload_translation_remaps();\n \n \tif (OS::get_singleton()->get_main_loop()) {\n","commit_message_token_length":13,"code_token_length":163,"combined_token_length":176,"target":1}
{"commit_url":"https:\/\/github.com\/kokkos\/kokkos\/commit\/910d43e45b04fb0e7d155233f7069cab0aeefc79","commit_message":"OpenMP: Adding an ifdef around chunksize for static schedule for GCC compiler.","code_diff":"@@ -101,8 +101,15 @@ class ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP> {\n   std::enable_if_t<!std::is_same<typename Policy::schedule_type::type,\n                                  Kokkos::Dynamic>::value>\n   execute_parallel() const {\n+\/\/ Specifying an chunksize with GCC compiler leads to performance regression\n+\/\/ with static schedule.\n+#ifdef KOKKOS_COMPILER_GNU\n+#pragma omp parallel for schedule(static) \\\n+    num_threads(m_instance->thread_pool_size())\n+#else\n #pragma omp parallel for schedule(static KOKKOS_OPENMP_OPTIONAL_CHUNK_SIZE) \\\n     num_threads(m_instance->thread_pool_size())\n+#endif\n     KOKKOS_PRAGMA_IVDEP_IF_ENABLED\n     for (auto iwork = m_policy.begin(); iwork < m_policy.end(); ++iwork) {\n       exec_work(m_functor, iwork);\n","commit_message_token_length":17,"code_token_length":324,"combined_token_length":341,"target":1}
{"commit_url":"https:\/\/github.com\/SORMAS-Foundation\/SORMAS-Project\/commit\/d0cf26216986d1e7689369d0f7b01490a6a2e9c6","commit_message":"#4346: Listing samples for a lab officer can be slow","code_diff":"@@ -305,6 +305,12 @@ public class SampleService extends AbstractCoreAdoService<Sample> {\n \n \t\tPredicate filter = createUserFilterWithoutCase(cb, joins);\n \n+\t\tUser currentUser = getCurrentUser();\n+\t\tfinal JurisdictionLevel jurisdictionLevel = currentUser.getJurisdictionLevel();\n+\t\tif (jurisdictionLevel == JurisdictionLevel.LABORATORY || jurisdictionLevel == JurisdictionLevel.EXTERNAL_LABORATORY) {\n+\t\t\treturn filter;\n+\t\t}\n+\n \t\tif (criteria != null) {\n \t\t\tfinal SampleAssociationType sampleAssociationType = criteria.getSampleAssociationType();\n \t\t\tif (sampleAssociationType == SampleAssociationType.CASE) {\n","commit_message_token_length":14,"code_token_length":192,"combined_token_length":206,"target":1}
{"commit_url":"https:\/\/github.com\/NetworkManager\/NetworkManager\/commit\/1a070f6a44a0f1a39c174425be96dd8834bea25e","commit_message":"logging: remove assertion in nm_logging_enabled() from production builds\n\nWe really expect this assertion not to be violated.\n\nAs we want for nm_logging_enabled() to become smaller and inline,\nremove the runtime assertion from regular builds.\n\nLive fast and dangerous.","code_diff":"@@ -447,8 +447,7 @@ nm_logging_all_domains_to_string (void)\n gboolean\n nm_logging_enabled (NMLogLevel level, NMLogDomain domain)\n {\n-\tif ((guint) level >= G_N_ELEMENTS (global.logging))\n-\t\tg_return_val_if_reached (FALSE);\n+\tnm_assert (((guint) level) < G_N_ELEMENTS (global.logging));\n \n \treturn !!(global.logging[level] & domain);\n }\n","commit_message_token_length":63,"code_token_length":141,"combined_token_length":204,"target":1}
{"commit_url":"https:\/\/github.com\/LorenzoAgnolucci\/BERT_for_ABSA\/commit\/6092f0b635ae825616dc11ca91a0dcb6fe99e6f1","commit_message":"sort semeval2014 aspects consistently with the datasets","code_diff":"@@ -63,7 +63,7 @@ def get_predictions(predictions_dir, task, dataset_type):\n                         scores.append(current_aspect_scores)\n                         predicted_labels.append(np.argmax(current_aspect_scores))\n             elif task == \"single\":\n-                semeval_aspects = [\"ambience\", \"anecdotes\", \"food\", \"price\", \"service\"]\n+                semeval_aspects = [\"price\", \"anecdotes\", \"food\", \"ambience\", \"service\"]\n                 data = {}\n                 for aspect in semeval_aspects:\n                     data[aspect] = pd.read_csv(f\"{predictions_dir}\/{dataset_type}\/BERT-single\/{aspect}.csv\", header=0).values.tolist()\n","commit_message_token_length":9,"code_token_length":330,"combined_token_length":339,"target":0}
{"commit_url":"https:\/\/github.com\/diyhue\/diyHue\/commit\/c1f207cb15ec51a1ce4d4d5aa81d710af17cc0f9","commit_message":"Try to turn off\/on all lights faster #331","code_diff":"@@ -1589,7 +1589,8 @@ class S(BaseHTTPRequestHandler):\n                         for light in bridge_config[\"lights\"].keys():\n                             if \"virtual_light\" not in bridge_config[\"alarm_config\"] or light != bridge_config[\"alarm_config\"][\"virtual_light\"]:\n                                 bridge_config[\"lights\"][light][\"state\"].update(put_dictionary)\n-                                sendLightRequest(light, put_dictionary)\n+                                Thread(target=sendLightRequest, args=[light, put_dictionary]).start()\n+                                sleep(0.1)\n                         for group in bridge_config[\"groups\"].keys():\n                             bridge_config[\"groups\"][group][url_pices[5]].update(put_dictionary)\n                             if \"on\" in put_dictionary:\n","commit_message_token_length":11,"code_token_length":440,"combined_token_length":451,"target":0}
{"commit_url":"https:\/\/github.com\/SFDO-Tooling\/MetaDeploy\/commit\/5a2304750e2710e94bdba36991de5b77c20a141e","commit_message":"use startswith if org_id is 15 char","code_diff":"@@ -201,9 +201,16 @@ def run_flows(\n     \"\"\"\n     result = result_class.objects.get(pk=result_id)\n     scratch_org = None\n+\n+    # This means we're in a ScratchOrg.\n     if not result.user:\n-        # This means we're in a ScratchOrg.\n-        scratch_org = ScratchOrg.objects.get(org_id=result.org_id)\n+        if len(result.org_id) == 15:\n+            # we've seen a bug where the front-end will pass back a 15 char org-id\n+            # when re-running preflight checks on a scratch org.\n+            # See W-10330033 for additional context\n+            scratch_org = ScratchOrg.objects.filter(org_id__startswith=result.org_id)[0]\n+        else:\n+            scratch_org = ScratchOrg.objects.get(org_id=result.org_id)\n \n     repo_url = plan.version.product.repo_url\n     commit_ish = plan.commit_ish or plan.version.commit_ish\n","commit_message_token_length":11,"code_token_length":368,"combined_token_length":379,"target":0}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/ab5eaf0ad97cfac2d3bc924ae99c5fc83cd3e838","commit_message":"Fix new performance regressions (short delay_usec)\n\nMy Mac was using 20% cpu again, which was related to the Javascript\nExport plugin.\n\nI had however no export templates setup in the project so this is more\nof a stopgap fix.","code_diff":"@@ -645,7 +645,7 @@ Ref<Texture2D> EditorExportPlatformJavaScript::get_run_icon() const {\n void EditorExportPlatformJavaScript::_server_thread_poll(void *data) {\n \tEditorExportPlatformJavaScript *ej = (EditorExportPlatformJavaScript *)data;\n \twhile (!ej->server_quit) {\n-\t\tOS::get_singleton()->delay_usec(1000);\n+\t\tOS::get_singleton()->delay_usec(6900);\n \t\t{\n \t\t\tMutexLock lock(ej->server_lock);\n \t\t\tej->server->poll();\n","commit_message_token_length":56,"code_token_length":158,"combined_token_length":214,"target":1}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/da470981defcace6e909b74ebc4ab5a40a702728","commit_message":"fetch-pack: grow stateless RPC windows exponentially\n\nWhen updating large repositories, the LARGE_FLUSH limit (that is, the\nlimit at which the window growth strategy switches from exponential to\nlinear) is reached quite quickly. Use a conservative exponential growth\nstrategy when that limit is reached instead (and increase LARGE_FLUSH so\nthat there is no regression in window size).\n\nThis optimization is only applied during stateless RPCs to avoid the\nissue raised and fixed in commit 44d8dc54 (Fix potential local\ndeadlock during fetch-pack, 2011-03-29).\n\nSigned-off-by: Jonathan Tan <jonathantanmy@google.com>\nReviewed-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -243,16 +243,21 @@ static void insert_one_alternate_ref(const struct ref *ref, void *unused)\n \n #define INITIAL_FLUSH 16\n #define PIPESAFE_FLUSH 32\n-#define LARGE_FLUSH 1024\n+#define LARGE_FLUSH 16384\n \n static int next_flush(struct fetch_pack_args *args, int count)\n {\n-\tint flush_limit = args->stateless_rpc ? LARGE_FLUSH : PIPESAFE_FLUSH;\n-\n-\tif (count < flush_limit)\n-\t\tcount <<= 1;\n-\telse\n-\t\tcount += flush_limit;\n+\tif (args->stateless_rpc) {\n+\t\tif (count < LARGE_FLUSH)\n+\t\t\tcount <<= 1;\n+\t\telse\n+\t\t\tcount = count * 11 \/ 10;\n+\t} else {\n+\t\tif (count < PIPESAFE_FLUSH)\n+\t\t\tcount <<= 1;\n+\t\telse\n+\t\t\tcount += PIPESAFE_FLUSH;\n+\t}\n \treturn count;\n }\n \n","commit_message_token_length":192,"code_token_length":292,"combined_token_length":484,"target":1}
{"commit_url":"https:\/\/github.com\/project-asgard\/asgard\/commit\/076f8b296ce85de4ae54ccfea88f8074e42c6ffe","commit_message":"improve perf of combine dims using views","code_diff":"@@ -219,10 +219,11 @@ combine_dimensions(int const degree, element_table const &table,\n           degree > 1 ? (((id + 1) * degree) - 1) : index_start;\n       kron_list.push_back(vectors[j].extract(index_start, index_end));\n     }\n-    fk::vector<P> const partial_result =\n-        kron_d(kron_list, kron_list.size()) * time_scale;\n-    combined.set_subvector((i - start_element) * std::pow(degree, num_dims),\n-                           partial_result);\n+    int const start_index = (i - start_element) * std::pow(degree, num_dims);\n+    int const stop_index  = start_index + std::pow(degree, num_dims) - 1;\n+    fk::vector<P, mem_type::view> combined_view(combined, start_index,\n+                                                stop_index);\n+    combined_view = kron_d(kron_list, kron_list.size()) * time_scale;\n   }\n   return combined;\n }\n","commit_message_token_length":8,"code_token_length":395,"combined_token_length":403,"target":1}
{"commit_url":"https:\/\/github.com\/NetworkManager\/NetworkManager\/commit\/de9848aa66d2ef97a53ad04c537df4859baea243","commit_message":"core: optimize nm_match_spec_s390_subchannels() to return early\n\nNo need to parse the subchannels if the spec list is empty.\n\nThis isn't actually an issue, because nm_match_spec_s390_subchannels()\nwas never called with empty spec list.","code_diff":"@@ -1108,6 +1108,9 @@ nm_match_spec_s390_subchannels (const GSList *specs, const char *subchannels)\n \n \tg_return_val_if_fail (subchannels != NULL, NM_MATCH_SPEC_NO_MATCH);\n \n+\tif (!specs)\n+\t\treturn NM_MATCH_SPEC_NO_MATCH;\n+\n \tif (!parse_subchannels (subchannels, &a, &b, &c))\n \t\treturn NM_MATCH_SPEC_NO_MATCH;\n \n","commit_message_token_length":68,"code_token_length":145,"combined_token_length":213,"target":1}
{"commit_url":"https:\/\/github.com\/NetworkManager\/NetworkManager\/commit\/e3d2fc861b86bbde2bfa3987e3f89a414046219a","commit_message":"dhcp: support _LOGx_ENABLED() macro in dhcp-client\n\nThe macro _LOGx_ENABLED() is defined with a default implementation\nthat depends on _NMLOG_DOMAIN. Although that default does not\ncheck for LOGD_DHCP4 vs. LOGD_DHCP6, still provide it.\nDetermining the correct domain might involve a larger performance\nimpact that what we would safe.","code_diff":"@@ -25,11 +25,18 @@\n #include \"nm-dhcp-client.h\"\n \n #define _NMLOG_PREFIX_NAME    \"dhcp\"\n+#define _NMLOG_DOMAIN         LOGD_DHCP\n #define _NMLOG(level, ...) \\\n     G_STMT_START { \\\n         const NMLogLevel _level = (level); \\\n         \\\n-        if (nm_logging_enabled (_level, LOGD_DHCP)) { \\\n+        \/* we check first for LOGD_DHCP instead of the correct domain.\n+         * In the worst case, we guess wrong and enter the block.\n+         *\n+         * Same for the _NMLOG_ENABLED() macro. Probably it would be more\n+         * expensive to determine the correct value then what we could\n+         * safe. *\/ \\\n+        if (nm_logging_enabled (_level, _NMLOG_DOMAIN)) { \\\n             NMDhcpClient *_self = (NMDhcpClient *) (self); \\\n             const char *__ifname = _self ? nm_dhcp_client_get_iface (_self) : NULL; \\\n             const NMLogDomain _domain = !_self \\\n","commit_message_token_length":95,"code_token_length":411,"combined_token_length":506,"target":1}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/e5494631ed94017da862d55eb6393a0d01d8b91d","commit_message":"read-cache: speed up add_index_entry during checkout\n\nTeach add_index_entry_with_check() to see if the path\nof the new item is greater than the last path in the\nindex array before attempting to search for it.\n\nDuring checkout, merge_working_tree() populates the new\nindex in sorted order, so this change will save a binary\nlookups per file.  This preserves the original behavior\nbut simply checks the last element before starting the\nsearch.\n\nThis helps performance on very large repositories.\n\nSigned-off-by: Jeff Hostetler <jeffhost@microsoft.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -1021,7 +1021,16 @@ static int add_index_entry_with_check(struct index_state *istate, struct cache_e\n \n \tif (!(option & ADD_CACHE_KEEP_CACHE_TREE))\n \t\tcache_tree_invalidate_path(istate, ce->name);\n-\tpos = index_name_stage_pos(istate, ce->name, ce_namelen(ce), ce_stage(ce));\n+\n+\t\/*\n+\t * If this entry's path sorts after the last entry in the index,\n+\t * we can avoid searching for it.\n+\t *\/\n+\tif (istate->cache_nr > 0 &&\n+\t\tstrcmp(ce->name, istate->cache[istate->cache_nr - 1]->name) > 0)\n+\t\tpos = -istate->cache_nr - 1;\n+\telse\n+\t\tpos = index_name_stage_pos(istate, ce->name, ce_namelen(ce), ce_stage(ce));\n \n \t\/* existing match? Just replace it. *\/\n \tif (pos >= 0) {\n","commit_message_token_length":163,"code_token_length":282,"combined_token_length":445,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/32b16c876b92c3dae35046d37740fc6e5cc65b24","commit_message":"[Net] Fix SceneReplicationConfig setter.\n\nUsed by resource loader, it would always add properties as both sync and\nspawn, disregarding the actual option value.","code_diff":"@@ -52,11 +52,19 @@ bool SceneReplicationConfig::_set(const StringName &p_name, const Variant &p_val\n \t\tReplicationProperty &prop = properties[idx];\n \t\tif (what == \"sync\") {\n \t\t\tprop.sync = p_value;\n-\t\t\tsync_props.push_back(prop.name);\n+\t\t\tif (prop.sync) {\n+\t\t\t\tsync_props.push_back(prop.name);\n+\t\t\t} else {\n+\t\t\t\tsync_props.erase(prop.name);\n+\t\t\t}\n \t\t\treturn true;\n \t\t} else if (what == \"spawn\") {\n \t\t\tprop.spawn = p_value;\n-\t\t\tspawn_props.push_back(prop.name);\n+\t\t\tif (prop.spawn) {\n+\t\t\t\tspawn_props.push_back(prop.name);\n+\t\t\t} else {\n+\t\t\t\tspawn_props.erase(prop.name);\n+\t\t\t}\n \t\t\treturn true;\n \t\t}\n \t}\n","commit_message_token_length":37,"code_token_length":288,"combined_token_length":325,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/f84c6df8d1aec35fe53521f241b26fc5312d26e3","commit_message":"Use DXT1 when compressing PNGs with RGB format\n\nThis results in much smaller file sizes with the same quality","code_diff":"@@ -66,7 +66,7 @@ EtcpakType _determine_dxt_type(Image::UsedChannels p_channels) {\n \t\tcase Image::USED_CHANNELS_RG:\n \t\t\treturn EtcpakType::ETCPAK_TYPE_DXT5_RA_AS_RG;\n \t\tcase Image::USED_CHANNELS_RGB:\n-\t\t\treturn EtcpakType::ETCPAK_TYPE_DXT5;\n+\t\t\treturn EtcpakType::ETCPAK_TYPE_DXT1;\n \t\tcase Image::USED_CHANNELS_RGBA:\n \t\t\treturn EtcpakType::ETCPAK_TYPE_DXT5;\n \t\tdefault:\n","commit_message_token_length":25,"code_token_length":185,"combined_token_length":210,"target":1}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/8e060ec225b74bbf22e5bdbacd604efcc73294c0","commit_message":"fs-util: increase start buffer size in readlinkat_malloc()\n\nI noticed while profiling journald that we invoke readlinkat() a ton on\nopen \/proc\/self\/fd\/<fd>, and that the returned paths are more often than\nnot longer than the 99 chars used before, when we look at archived\njournal files. This means for these cases we generally need to execute\ntwo rather than one syscalls.\n\nLet's increase the buffer size a tiny bit, so that we reduce the number\nof syscalls executed. This is really a low-hanging fruit of\noptimization.","code_diff":"@@ -132,7 +132,7 @@ int rename_noreplace(int olddirfd, const char *oldpath, int newdirfd, const char\n }\n \n int readlinkat_malloc(int fd, const char *p, char **ret) {\n-        size_t l = 100;\n+        size_t l = FILENAME_MAX+1;\n         int r;\n \n         assert(p);\n","commit_message_token_length":133,"code_token_length":128,"combined_token_length":261,"target":1}
{"commit_url":"https:\/\/github.com\/CounterpartyXCP\/counterparty-core\/commit\/7d992d158659339831892687f9fc01d447f8afc7","commit_message":"Reset Max. Log Size to 20 MB","code_diff":"@@ -30,7 +30,7 @@ def set_up(logger, verbose=False, logfile=None):\n \n     # File Logging\n     if logfile:\n-        max_log_size = 128 * 1024 * 1024 # 128\u00a0MB\n+        max_log_size = 20 * 1024 * 1024 # 20 MB\n         if os.name == 'nt':\n             from counterpartylib.lib import util_windows\n             fileh = util_windows.SanitizedRotatingFileHandler(logfile, maxBytes=max_log_size, backupCount=5)\n","commit_message_token_length":9,"code_token_length":180,"combined_token_length":189,"target":0}
{"commit_url":"https:\/\/github.com\/intel\/cm-compiler\/commit\/894b1e385c74aa7f05abbba779022da68a2db372","commit_message":"Verifier: Loosen r233559 check for 'function:' field in MDSubprogram  Stop worrying about what the `function:` field is in `MDSubprogram`, since it could be a bitcast [1].  Just check its type and leave it at that.  [1]: http:\/\/lab.llvm.org:8080\/green\/job\/clang-stage2-configure-Rlto_build\/3540\/  llvm-svn: 233562","code_diff":"@@ -846,9 +846,8 @@ void Verifier::visitMDSubprogram(const MDSubprogram &N) {\n     auto *FMD = dyn_cast<ConstantAsMetadata>(RawF);\n     auto *F = FMD ? FMD->getValue() : nullptr;\n     auto *FT = F ? dyn_cast<PointerType>(F->getType()) : nullptr;\n-    Assert(F && (isa<Function>(F) || isa<ConstantPointerNull>(F)) && FT &&\n-               isa<FunctionType>(FT->getElementType()),\n-           \"invalid function\", &N, F);\n+    Assert(F && FT && isa<FunctionType>(FT->getElementType()),\n+           \"invalid function\", &N, F, FT);\n   }\n   if (N.getRawTemplateParams()) {\n     auto *Params = dyn_cast<MDTuple>(N.getRawTemplateParams());\n","commit_message_token_length":107,"code_token_length":282,"combined_token_length":389,"target":0}
{"commit_url":"https:\/\/github.com\/gem\/oq-engine\/commit\/c9a92dac9b354a5418c8771ceb5b7d529186c728","commit_message":"Gzipping the _rates","code_diff":"@@ -400,7 +400,7 @@ class ClassicalCalculator(base.HazardCalculator):\n         self.cmakers = read_cmakers(self.datastore, self.csm)\n         self.cfactor = numpy.zeros(3)\n         self.rel_ruptures = AccumDict(accum=0)  # grp_id -> rel_ruptures\n-        self.datastore.create_df('_rates', rates_dt.items())\n+        self.datastore.create_df('_rates', rates_dt.items(), 'gzip')\n         self.datastore.create_dset('_rates\/slice_by_sid', slice_dt)\n         # NB: compressing the dataset causes a big slowdown in writing :-(\n \n","commit_message_token_length":6,"code_token_length":233,"combined_token_length":239,"target":1}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/4dc63c4bc7850bc570fcf33800a444e09dec81d5","commit_message":"main: minor optimization\n\nLet's remove one memory allocation in the common path.","code_diff":"@@ -1413,6 +1413,7 @@ static int bump_unix_max_dgram_qlen(void) {\n \n static int fixup_environment(void) {\n         _cleanup_free_ char *term = NULL;\n+        const char *t;\n         int r;\n \n         \/* We expect the environment to be set correctly\n@@ -1432,13 +1433,10 @@ static int fixup_environment(void) {\n         r = proc_cmdline_get_key(\"TERM\", 0, &term);\n         if (r < 0)\n                 return r;\n-        if (r == 0) {\n-                term = strdup(default_term_for_tty(\"\/dev\/console\"));\n-                if (!term)\n-                        return -ENOMEM;\n-        }\n \n-        if (setenv(\"TERM\", term, 1) < 0)\n+        t = term ?: default_term_for_tty(\"\/dev\/console\");\n+\n+        if (setenv(\"TERM\", t, 1) < 0)\n                 return -errno;\n \n         return 0;\n","commit_message_token_length":17,"code_token_length":427,"combined_token_length":444,"target":1}
{"commit_url":"https:\/\/github.com\/diofant\/diofant\/commit\/6ab22e0a9180886c437fb6cb41ca7a847145a9d5","commit_message":"regular Pure() is _pure; pprint(Pure()) is pure","code_diff":"@@ -2233,11 +2233,11 @@ def ode_nth_linear_constant_coeff_homogeneous(eq, func, order, match, returns='s\n     >>> dsolve(f(x).diff(x, 5) + 10*f(x).diff(x) - 2*f(x), f(x),\n     ... hint='nth_linear_constant_coeff_homogeneous')\n     ... # doctest: +NORMALIZE_WHITESPACE\n-    f(x) == C1*exp(x*RootOf(pure**5 + 10*pure - 2, 0)) + \\\n-    C2*exp(x*RootOf(pure**5 + 10*pure - 2, 1)) + \\\n-    C3*exp(x*RootOf(pure**5 + 10*pure - 2, 2)) + \\\n-    C4*exp(x*RootOf(pure**5 + 10*pure - 2, 3)) + \\\n-    C5*exp(x*RootOf(pure**5 + 10*pure - 2, 4))\n+    f(x) == C1*exp(x*RootOf(_pure**5 + 10*_pure - 2, 0)) + \\\n+    C2*exp(x*RootOf(_pure**5 + 10*_pure - 2, 1)) + \\\n+    C3*exp(x*RootOf(_pure**5 + 10*_pure - 2, 2)) + \\\n+    C4*exp(x*RootOf(_pure**5 + 10*_pure - 2, 3)) + \\\n+    C5*exp(x*RootOf(_pure**5 + 10*_pure - 2, 4))\n \n     Note that because this method does not involve integration, there is\n     no 'nth_linear_constant_coeff_homogeneous_Integral' hint.\n","commit_message_token_length":14,"code_token_length":472,"combined_token_length":486,"target":0}
{"commit_url":"https:\/\/github.com\/FormerLurker\/Octolapse\/commit\/7706f0bafdd186495dd292d9326c791cdfd9cf75","commit_message":"Increase the sleep period when updating pre-processing gcode to 1\/60th of a second, which is pretty reasonable.","code_diff":"@@ -2184,8 +2184,9 @@ class OctolapsePlugin(\n             \"lines_processed\": lines_processed\n         }\n         self._plugin_manager.send_plugin_message(self._identifier, data)\n-        # sleep for just a bit to allow the plugin message time to be sent.\n-        time.sleep(0.001)\n+        # sleep for just a bit to allow the plugin message time to be sent and for cancel messages to arrive\n+        # the real answer for this is to figure out how to allow threading in the C++ code\n+        time.sleep(0.017)\n \n     def send_popup_message(self, msg):\n         self.send_plugin_message(\"popup\", msg)\n","commit_message_token_length":25,"code_token_length":239,"combined_token_length":264,"target":0}
{"commit_url":"https:\/\/github.com\/pulseaudio\/pulseaudio\/commit\/78df02dba61d4d9e4f89225ddf69d5cfcdc9d184","commit_message":"device-port: Return early from pa_device_port_set_latency_offset() if the offset doesn't change.\n\nThis avoids sending change notifications when nothing changes.","code_diff":"@@ -104,6 +104,9 @@ void pa_device_port_set_latency_offset(pa_device_port *p, int64_t offset) {\n \n     pa_assert(p);\n \n+    if (offset == p->latency_offset)\n+        return;\n+\n     p->latency_offset = offset;\n \n     if (p->is_output) {\n","commit_message_token_length":38,"code_token_length":114,"combined_token_length":152,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/e201e5bf30bdd7ea4f515ebf8d47a70172683f7e","commit_message":"Fix Windows Activate Process","code_diff":"@@ -4727,6 +4727,7 @@ LRESULT DisplayServerWindows::WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARA\n \t\t} break;\n \t\tcase WM_EXITSIZEMOVE: {\n \t\t\tKillTimer(windows[window_id].hWnd, windows[window_id].move_timer_id);\n+\t\t\twindows[window_id].move_timer_id = 0;\n \t\t} break;\n \t\tcase WM_TIMER: {\n \t\t\tif (wParam == windows[window_id].move_timer_id) {\n","commit_message_token_length":4,"code_token_length":159,"combined_token_length":163,"target":1}
{"commit_url":"https:\/\/github.com\/scikit-bio\/scikit-bio\/commit\/76b40140b6e9104288932f60c2a10b7b445f41fa","commit_message":"ENH: performance enhancement, fixes #411","code_diff":"@@ -1014,7 +1014,7 @@ class BiologicalSequence(Sequence):\n             step = k\n \n         for i in range(0, sequence_length - k + 1, step):\n-            yield constructor(self[i:i+k])\n+            yield self._sequence[i:i+k]\n \n     def k_word_counts(self, k, overlapping=True, constructor=str):\n         \"\"\"Get the counts of words of length k\n","commit_message_token_length":9,"code_token_length":158,"combined_token_length":167,"target":1}
{"commit_url":"https:\/\/github.com\/llvm-mirror\/clang\/commit\/90cdec1762c2a72b7c63f67c025597ab9ac8cae0","commit_message":"AST: Simplify CharUnits::alignmentAtOffset\n\nCharUnits::alignmentAtOffset is equivalent to llvm::MinAlign but\nslightly less efficient.  Use it's implementation instead.\n\n\ngit-svn-id: https:\/\/llvm.org\/svn\/llvm-project\/cfe\/trunk@202099 91177308-0d34-0410-b5e6-96231b3b80d8","code_diff":"@@ -173,12 +173,7 @@ namespace clang {\n       \/\/\/ Given that this is a non-zero alignment value, what is the\n       \/\/\/ alignment at the given offset?\n       CharUnits alignmentAtOffset(CharUnits offset) {\n-        \/\/ alignment: 0010000\n-        \/\/ offset:    1011100\n-        \/\/ lowBits:   0001011\n-        \/\/ result:    0000100\n-        QuantityType lowBits = (Quantity-1) & (offset.Quantity-1);\n-        return CharUnits((lowBits + 1) & ~lowBits);\n+        return CharUnits(llvm::MinAlign(Quantity, offset.Quantity));\n       }\n \n \n","commit_message_token_length":101,"code_token_length":231,"combined_token_length":332,"target":1}
{"commit_url":"https:\/\/github.com\/ykfre\/BsodSurvivor\/commit\/a333b1382f6883c6ad6626e899c0f027c1e5ae9d","commit_message":"Correctly update LiveVariables when an instruction changes  llvm-svn: 12561","code_diff":"@@ -326,14 +326,14 @@ void LiveVariables::instructionChanged(MachineInstr *OldMI,\n                                        MachineInstr *NewMI) {\n   \/\/ If the instruction defines any virtual registers, update the VarInfo for\n   \/\/ the instruction.\n-  for (unsigned i = 0, e = NewMI->getNumOperands(); i != e; ++i) {\n-    MachineOperand &MO = NewMI->getOperand(i);\n+  for (unsigned i = 0, e = OldMI->getNumOperands(); i != e; ++i) {\n+    MachineOperand &MO = OldMI->getOperand(i);\n     if (MO.isRegister() && MO.isDef() && MO.getReg() &&\n         MRegisterInfo::isVirtualRegister(MO.getReg())) {\n       unsigned Reg = MO.getReg();\n       VarInfo &VI = getVarInfo(Reg);\n       if (VI.DefInst == OldMI)\n-        VI.DefInst = NewMI; \n+        VI.DefInst = NewMI;\n     }\n   }\n \n","commit_message_token_length":19,"code_token_length":341,"combined_token_length":360,"target":0}
{"commit_url":"https:\/\/github.com\/SORMAS-Foundation\/SORMAS-Project\/commit\/fcf3c0746d6e37ff18a376b7d2adeb19ec6195d8","commit_message":"#5612: Increased chunk size for lazy loading to 100\n\n- Avoids a 2nd query when initializing a list view","code_diff":"@@ -12,8 +12,8 @@ import com.vaadin.server.SerializableSupplier;\n import com.vaadin.ui.Grid;\n import com.vaadin.ui.renderers.HtmlRenderer;\n \n-import de.symeda.sormas.api.utils.criteria.BaseCriteria;\n import de.symeda.sormas.api.i18n.I18nProperties;\n+import de.symeda.sormas.api.utils.criteria.BaseCriteria;\n \n public class FilteredGrid<T, C extends BaseCriteria> extends Grid<T> {\n \n@@ -21,11 +21,17 @@ public class FilteredGrid<T, C extends BaseCriteria> extends Grid<T> {\n \n \tprivate static final long serialVersionUID = 8116377533153377424L;\n \n+\t\/**\n+\t * For lazy loading: Defines how many entries are loaded into the grid when new data needs to be loaded for the visible range.\n+\t *\/\n+\tprivate static final int LAZY_BATCH_SIZE = 100;\n+\n \tprivate C criteria;\n \tprivate boolean inEagerMode;\n \n \tpublic FilteredGrid(Class<T> beanType) {\n \t\tsuper(beanType);\n+\t\tgetDataCommunicator().setMinPushSize(LAZY_BATCH_SIZE);\n \t}\n \n \tpublic C getCriteria() {\n","commit_message_token_length":27,"code_token_length":350,"combined_token_length":377,"target":1}
{"commit_url":"https:\/\/github.com\/yt-project\/yt\/commit\/68068dd0212b3cb5bad2fde085ddc8be4cff4a33","commit_message":"I believe this logic needs to be reversed.","code_diff":"@@ -218,12 +218,12 @@ class ParticleIndex(Index):\n             else:\n                 # TODO: only return files\n                 if getattr(dobj.selector, 'is_all_data', False):\n+                    nfiles = self.regions.nfiles\n+                    dfi = np.arange(nfiles)\n+                else:\n                     dfi, file_masks, addfi = self.regions.identify_file_masks(\n                         dobj.selector)\n                     nfiles = len(file_masks)\n-                else:\n-                    nfiles = self.regions.nfiles\n-                    dfi = np.arange(nfiles)\n                 dobj._chunk_info = [None for _ in range(nfiles)]\n                 for i in range(nfiles):\n                     domain_id = i+1\n","commit_message_token_length":9,"code_token_length":452,"combined_token_length":461,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/c37bd41c794819e0b6bc3ad4b162548057098e1c","commit_message":"Increase RemoteDebuggerPeerTCP poll to 6.9ms\n\nFix high CPU usage on MacOS by reverting the polling for Network\ndebugging to match 144hz refresh rate.","code_diff":"@@ -190,7 +190,8 @@ Error RemoteDebuggerPeerTCP::connect_to_host(const String &p_host, uint16_t p_po\n }\n \n void RemoteDebuggerPeerTCP::_thread_func(void *p_ud) {\n-\tconst uint64_t min_tick = 100;\n+\t\/\/ Update in time for 144hz monitors\n+\tconst uint64_t min_tick = 6900;\n \tRemoteDebuggerPeerTCP *peer = (RemoteDebuggerPeerTCP *)p_ud;\n \twhile (peer->running && peer->is_peer_connected()) {\n \t\tuint64_t ticks_usec = OS::get_singleton()->get_ticks_usec();\n","commit_message_token_length":40,"code_token_length":179,"combined_token_length":219,"target":1}
{"commit_url":"https:\/\/github.com\/NetworkManager\/NetworkManager\/commit\/4417b8bf3eef8ca7cf45dc973ab107249bd10d67","commit_message":"core: add nm_utils_get_monotonic_timestamp_ns_cached() helper\n\nAdd a helper function to cache the current timestamp and return\nit. The caching is a performance optimization, but it serves a\nmuch more important purpose: repeatedly getting the timestamp\nlikely will yield different timings. So, commonly, within a\ncertain context we want to get the current time once, and stick\nto that as \"now\".","code_diff":"@@ -239,6 +239,13 @@ gint64 nm_utils_get_monotonic_timestamp_ms (void);\n gint32 nm_utils_get_monotonic_timestamp_s (void);\n gint64 nm_utils_monotonic_timestamp_as_boottime (gint64 timestamp, gint64 timestamp_ticks_per_ns);\n \n+static inline gint64\n+nm_utils_get_monotonic_timestamp_ns_cached (gint64 *cache_now)\n+{\n+\treturn    (*cache_now)\n+\t       ?: (*cache_now = nm_utils_get_monotonic_timestamp_ns ());\n+}\n+\n gboolean    nm_utils_is_valid_path_component (const char *name);\n const char *NM_ASSERT_VALID_PATH_COMPONENT (const char *name);\n \n","commit_message_token_length":94,"code_token_length":227,"combined_token_length":321,"target":1}
{"commit_url":"https:\/\/github.com\/hrydgard\/ppsspp\/commit\/adda49d05d1091decb8832259f0ca4e9e085f143","commit_message":"Add a heuristic avoiding joining framebuffers horizontally\n\n...when texturing from the other one.\n\nGreatly improves GPU performance in Rainbow Six: Vegas.\n\nFixes #9324.","code_diff":"@@ -426,6 +426,14 @@ VirtualFramebuffer *FramebufferManagerCommon::DoSetRenderFrameBuffer(Framebuffer\n \t\t\tu32 v_fb_end_ptr = v->fb_address + v->fb_stride * v->height * bpp;\n \n \t\t\tif (params.fb_address > v->fb_address && params.fb_address < v_fb_first_line_end_ptr) {\n+\t\t\t\t\/\/ If the framebuffer we can join to is currently bound as a texture, we likely have\n+\t\t\t\t\/\/ a situation like in #9324 and don't want to do this.\n+\t\t\t\tu32 curTextureAddress = gstate.getTextureAddress(0);\n+\t\t\t\tif (v->fb_address == curTextureAddress) {\n+\t\t\t\t\t\/\/ Don't try these joining shenanigans.\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n \t\t\t\tconst int x_offset = (params.fb_address - v->fb_address) \/ bpp;\n \t\t\t\tif (x_offset < params.fb_stride && v->height >= drawing_height) {\n \t\t\t\t\t\/\/ Pretty certainly a pure render-to-X-offset.\n","commit_message_token_length":42,"code_token_length":300,"combined_token_length":342,"target":1}
{"commit_url":"https:\/\/github.com\/llvm-mirror\/clang\/commit\/df5f80f8a34e26a4fb77f48f858c7838426a0785","commit_message":"[analyzer] micro optimization as per Jordan\u2019s feedback on r177905.\n\ngit-svn-id: https:\/\/llvm.org\/svn\/llvm-project\/cfe\/trunk@178062 91177308-0d34-0410-b5e6-96231b3b80d8","code_diff":"@@ -833,13 +833,13 @@ RegionStoreManager::removeSubRegionBindings(RegionBindingsConstRef B,\n                                             const SubRegion *Top) {\n   BindingKey TopKey = BindingKey::Make(Top, BindingKey::Default);\n   const MemRegion *ClusterHead = TopKey.getBaseRegion();\n-  const ClusterBindings *Cluster = B.lookup(ClusterHead);\n \n   if (Top == ClusterHead) {\n     \/\/ We can remove an entire cluster's bindings all in one go.\n     return B.remove(Top);\n   }\n \n+  const ClusterBindings *Cluster = B.lookup(ClusterHead);\n   if (!Cluster) {\n     \/\/ If we're invalidating a region with a symbolic offset, we need to make\n     \/\/ sure we don't treat the base region as uninitialized anymore.\n","commit_message_token_length":76,"code_token_length":258,"combined_token_length":334,"target":1}
{"commit_url":"https:\/\/github.com\/qbittorrent\/qBittorrent\/commit\/2f1a0ffe5c3e01a1903809106df7156e86a22201","commit_message":"Use a more detailed alert mask where possible\n\nCloses #9547","code_diff":"@@ -392,7 +392,11 @@ Session::Session(QObject *parent)\n                     | libt::alert::tracker_notification\n                     | libt::alert::status_notification\n                     | libt::alert::ip_block_notification\n+#if LIBTORRENT_VERSION_NUM < 10110\n                     | libt::alert::progress_notification\n+#else\n+                    | libt::alert::file_progress_notification\n+#endif\n                     | libt::alert::stats_notification;\n \n #if LIBTORRENT_VERSION_NUM < 10100\n","commit_message_token_length":15,"code_token_length":251,"combined_token_length":266,"target":1}
{"commit_url":"https:\/\/github.com\/llvm-mirror\/clang\/commit\/41748f7d3ae36db1b1c52eaaf76631ed60c79c53","commit_message":"[analyzer] Bump down the max size of functions being analyzed.\n\nWith the new setting, we are not going to inline any functions that are\nmore than 50 basic blocks. (The analyzer is 20% faster on several\nespecially bad benchmarks with the new default.)\n\ngit-svn-id: https:\/\/llvm.org\/svn\/llvm-project\/cfe\/trunk@171891 91177308-0d34-0410-b5e6-96231b3b80d8","code_diff":"@@ -304,7 +304,7 @@ public:\n     NoRetryExhausted = 0;\n     \/\/ Cap the stack depth at 4 calls (5 stack frames, base + 4 calls).\n     InlineMaxStackDepth = 5;\n-    InlineMaxFunctionSize = 200;\n+    InlineMaxFunctionSize = 50;\n     InliningMode = NoRedundancy;\n   }\n };\n","commit_message_token_length":115,"code_token_length":109,"combined_token_length":224,"target":1}
{"commit_url":"https:\/\/github.com\/hrydgard\/ppsspp\/commit\/354d263ccf4cf8f3913433b1b6f7f534e497de82","commit_message":"sceKernelFindModuleByName:Add delay for Fake module\n\nFix #13601","code_diff":"@@ -2444,12 +2444,18 @@ u32 sceKernelFindModuleByName(const char *name)\n \t\tPSPModule *module = kernelObjects.Get<PSPModule>(moduleId, error);\n \t\tif (!module)\n \t\t\tcontinue;\n-\t\tif (!module->isFake && strcmp(name, module->nm.name) == 0) {\n-\t\t\tINFO_LOG(SCEMODULE, \"%d = sceKernelFindModuleByName(%s)\", module->modulePtr, name);\n-\t\t\treturn module->modulePtr;\n+\t\tif (strcmp(name, module->nm.name) == 0) {\n+\t\t\tif (!module->isFake) {\n+\t\t\t\tINFO_LOG(SCEMODULE, \"%d = sceKernelFindModuleByName(%s)\", module->modulePtr, name);\n+\t\t\t\treturn module->modulePtr;\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tWARN_LOG(SCEMODULE, \"0 = sceKernelFindModuleByName(%s): Module Fake\", name);\n+\t\t\t\treturn hleDelayResult(0, \"Module Fake\", 1000 * 1000);\n+\t\t\t}\n \t\t}\n \t}\n-\tWARN_LOG(SCEMODULE, \"0 = sceKernelFindModuleByName(%s): Module Not Found or Fake\", name);\n+\tWARN_LOG(SCEMODULE, \"0 = sceKernelFindModuleByName(%s): Module Not Found\", name);\n \treturn 0;\n }\n \n","commit_message_token_length":20,"code_token_length":389,"combined_token_length":409,"target":1}
{"commit_url":"https:\/\/github.com\/resteasy\/resteasy\/commit\/5253d962e1f8d4dfe4e8d15fd5e7f1ca32ec019b","commit_message":"RESTEASY-1261 Use queryStringEncoding for the fragment  Use queryStringEncoding instead of queryNameValueEncoding for encoding the fragment part of a URI","code_diff":"@@ -180,7 +180,7 @@ public class Encode\n     *\/\r\n    public static String encodeFragment(String value)\r\n    {\r\n-      return encodeValue(value, queryNameValueEncoding);\r\n+      return encodeValue(value, queryStringEncoding);\r\n    }\r\n \r\n    \/**\r\n","commit_message_token_length":36,"code_token_length":97,"combined_token_length":133,"target":0}
{"commit_url":"https:\/\/github.com\/JetBrains\/JetBrainsRuntime\/commit\/851ae93451ecb3d3e6cfc16542a07113091a2ffc","commit_message":"8002169: TEST_BUG: compiler\/7009359\/Test7009359.java sometimes times out  Make the test less prone to timeout by reducing the amount of iteration and allowing main to be compiled","code_diff":"@@ -1,5 +1,5 @@\n \/*\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n  *\n  * This code is free software; you can redistribute it and\/or modify it\n@@ -27,13 +27,13 @@\n  * @bug 7009359\n  * @summary HS with -XX:+AggressiveOpts optimize new StringBuffer(null) so it does not throw NPE as expected\n  *\n- * @run main\/othervm -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+OptimizeStringConcat -XX:CompileCommand=exclude,Test7009359,main Test7009359\n+ * @run main\/othervm -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+OptimizeStringConcat -XX:CompileCommand=dontinline,Test7009359,stringmakerBUG Test7009359\n  *\n  *\/\n \n public class Test7009359 {\n     public static void main (String[] args) {\n-        for(int i = 0; i < 1000000; i++) {\n+        for(int i = 0; i < 100000; i++) {\n             if(!stringmakerBUG(null).equals(\"NPE\")) {\n                 System.out.println(\"StringBuffer(null) does not throw NPE\");\n                 System.exit(97);\n","commit_message_token_length":43,"code_token_length":426,"combined_token_length":469,"target":0}
{"commit_url":"https:\/\/github.com\/tonlabs\/TVM-Compiler\/commit\/53eca5216e51bfd61238ad749f066463a1418b38","commit_message":"[STATS] print Total_* stats on their own line  llvm-svn: 266633","code_diff":"@@ -343,7 +343,10 @@ void kmp_stats_output_module::printTimerStats(FILE *statsOut, statistic const *\n         char tag = timeStat::noUnits(s) ? ' ' : 'T';\n \n         fprintf (statsOut, \"%-28s, %s\\n\", timeStat::name(s), stat->format(tag, true).c_str());\n-        \/\/ Also print the Total_ versions of times.\n+    }\n+    \/\/ Also print the Total_ versions of times.\n+    for (timer_e s = timer_e(0); s<TIMER_LAST; s = timer_e(s+1)) {\n+        char tag = timeStat::noUnits(s) ? ' ' : 'T';\n         if (totalStats && !timeStat::noTotal(s))\n             fprintf(statsOut, \"Total_%-22s, %s\\n\", timeStat::name(s), totalStats[s].format(tag, true).c_str());\n     }\n","commit_message_token_length":23,"code_token_length":295,"combined_token_length":318,"target":0}
{"commit_url":"https:\/\/github.com\/static-frame\/static-frame\/commit\/2cda5f824ba56a082b3874a836c4a7c8c607d902","commit_message":"'Fix' property test by ignoring date cases. Is referenced by issue #132","code_diff":"@@ -158,7 +158,9 @@ class TestUnit(TestCase):\n     @given(sfst.get_frame()) # type: ignore\n     def test_frame_isin(self, f1: Frame) -> None:\n         value = f1.iloc[0, 0]\n-        if not isna_element(value):\n+        if (not isna_element(value) and\n+                not isinstance(value, np.datetime64) and\n+                not isinstance(value, np.timedelta64)):\n             self.assertTrue(f1.isin((value,)).iloc[0, 0])\n \n \n","commit_message_token_length":16,"code_token_length":216,"combined_token_length":232,"target":1}
{"commit_url":"https:\/\/github.com\/eFiniLan\/legacypilot\/commit\/4891d3787afa652f5cb83e13e33e8158a8f6f7aa","commit_message":"Wait 5 minutes after offroad before changing thresholds (#2113)","code_diff":"@@ -276,7 +276,8 @@ def thermald_thread():\n     # If device is offroad we want to cool down before going onroad\n     # since going onroad increases load and can make temps go over 107\n     # We only do this if there is a relay that prevents the car from faulting\n-    if max_cpu_temp > 107. or bat_temp >= 63. or (has_relay and (started_ts is None) and max_cpu_temp > 70.0):\n+    is_offroad_for_5_min = (started_ts is None) and ((not started_seen) or (off_ts is None) or (sec_since_boot() - off_ts > 60 * 5))\n+    if max_cpu_temp > 107. or bat_temp >= 63. or (has_relay and is_offroad_for_5_min and max_cpu_temp > 70.0):\n       # onroad not allowed\n       thermal_status = ThermalStatus.danger\n     elif max_comp_temp > 96.0 or bat_temp > 60.:\n","commit_message_token_length":13,"code_token_length":279,"combined_token_length":292,"target":0}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/8372da448f3c738e0154d988538d497f7e2e1f83","commit_message":"extract-word: Check for early bail out before inspecting separators\n\nIt's a pretty small optimization but doesn't hurt...\n\nTested with test-extract-word.","code_diff":"@@ -39,13 +39,13 @@ int extract_first_word(const char **p, char **ret, const char *separators, Extra\n         assert(p);\n         assert(ret);\n \n-        if (!separators)\n-                separators = WHITESPACE;\n-\n         \/* Bail early if called after last value or with no input *\/\n         if (!*p)\n                 goto finish_force_terminate;\n \n+        if (!separators)\n+                separators = WHITESPACE;\n+\n         \/* Parses the first word of a string, and returns it in\n          * *ret. Removes all quotes in the process. When parsing fails\n          * (because of an uneven number of quotes or similar), leaves\n","commit_message_token_length":39,"code_token_length":281,"combined_token_length":320,"target":1}
{"commit_url":"https:\/\/github.com\/opencv\/opencv\/commit\/db3654ef51b156feab4f59c13f2ee41ca2ab9a85","commit_message":"python: prefer cv::Mat over cv::UMat in python binding","code_diff":"@@ -854,7 +854,22 @@ class FuncInfo(object):\n \n         all_code_variants = []\n \n+        # See https:\/\/github.com\/opencv\/opencv\/issues\/25928\n+        # Conversion to UMat is expensive more than conversion to Mat.\n+        # To reduce this cost, conversion to Mat is prefer than to UMat.\n+        variants = []\n+        variants_umat = []\n         for v in self.variants:\n+            hasUMat = False\n+            for a in v.args:\n+                hasUMat = hasUMat or \"UMat\" in a.tp\n+            if hasUMat :\n+                variants_umat.append(v)\n+            else:\n+                variants.append(v)\n+        variants.extend(variants_umat)\n+\n+        for v in variants:\n             code_decl = \"\"\n             code_ret = \"\"\n             code_cvt_list = []\n","commit_message_token_length":16,"code_token_length":402,"combined_token_length":418,"target":1}
{"commit_url":"https:\/\/github.com\/NetworkManager\/NetworkManager\/commit\/e93abf0552cf67c7fac5af9d365a833e747192f5","commit_message":"device: optimize nm_manager_get_connection_iface()","code_diff":"@@ -987,6 +987,20 @@ nm_manager_get_connection_iface (NMManager *self,\n \t\treturn NULL;\n \t}\n \n+\tif (   !out_parent\n+\t    && !NM_DEVICE_FACTORY_GET_INTERFACE (factory)->get_connection_iface) {\n+\t\t\/* optimization. Shortcut lookup of the partent device. *\/\n+\t\tiface = g_strdup (nm_connection_get_interface_name (connection));\n+\t\tif (!iface) {\n+\t\t\tg_set_error (error,\n+\t\t\t             NM_MANAGER_ERROR,\n+\t\t\t             NM_MANAGER_ERROR_FAILED,\n+\t\t\t             \"failed to determine interface name: error determine name for %s\",\n+\t\t\t             nm_connection_get_connection_type (connection));\n+\t\t}\n+\t\treturn iface;\n+\t}\n+\n \tparent = find_parent_device_for_connection (self, connection, factory);\n \tiface = nm_device_factory_get_connection_iface (factory,\n \t                                                connection,\n","commit_message_token_length":14,"code_token_length":379,"combined_token_length":393,"target":1}
{"commit_url":"https:\/\/github.com\/ykfre\/BsodSurvivor\/commit\/6161452b67134a1913e164519f6bac6493771e2d","commit_message":"make statistics and timing info print even if the JIT'd program calls exit instead of returning from main.  llvm-svn: 32414","code_diff":"@@ -57,7 +57,7 @@ namespace {\n \/\/ main Driver function\n \/\/\n int main(int argc, char **argv, char * const *envp) {\n-  llvm_shutdown_obj X;  \/\/ Call llvm_shutdown() on exit.\n+  atexit(llvm_shutdown);  \/\/ Call llvm_shutdown() on exit.\n   try {\n     cl::ParseCommandLineOptions(argc, argv,\n                                 \" llvm interpreter & dynamic compiler\\n\");\n","commit_message_token_length":30,"code_token_length":156,"combined_token_length":186,"target":0}
{"commit_url":"https:\/\/github.com\/SORMAS-Foundation\/SORMAS-Project\/commit\/b692df37993975be3ed7f20801bcfa81e4b18103","commit_message":"#5644 - fix issue editing contact on mobile app","code_diff":"@@ -48,7 +48,9 @@ public abstract class JurisdictionValidator<T> {\n \t\t\tfinal List<T> jurisdictionTypes = new ArrayList<>();\n \t\t\tjurisdictionTypes.add(isInJurisdiction());\n \t\t\tfor (JurisdictionValidator<T> jurisdictionValidator : associatedJurisdictionValidators) {\n-\t\t\t\tjurisdictionTypes.add(jurisdictionValidator.isInJurisdiction());\n+\t\t\t\tif (jurisdictionValidator != null) {\n+\t\t\t\t\tjurisdictionTypes.add(jurisdictionValidator.isInJurisdiction());\n+\t\t\t\t}\n \t\t\t}\n \t\t\treturn or(jurisdictionTypes);\n \t\t} else {\n","commit_message_token_length":11,"code_token_length":200,"combined_token_length":211,"target":1}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/7eb6e10c9d7f43913615667740d1b22055cfba1f","commit_message":"branch: use write_file_buf instead of write_file\n\nIf we already have a strbuf, then using write_file_buf is a\nlittle nicer to read (no wondering whether \"%s\" will eat\nyour NULs), and it's more efficient (no extra formatting\nstep).\n\nWe don't care about the newline magic of write_file(), as we\nhave our own multi-line content.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -618,7 +618,7 @@ static int edit_branch_description(const char *branch_name)\n \t\t    \"  %s\\n\"\n \t\t    \"Lines starting with '%c' will be stripped.\\n\",\n \t\t    branch_name, comment_line_char);\n-\twrite_file(git_path(edit_description), \"%s\", buf.buf);\n+\twrite_file_buf(git_path(edit_description), buf.buf, buf.len);\n \tstrbuf_reset(&buf);\n \tif (launch_editor(git_path(edit_description), &buf, NULL)) {\n \t\tstrbuf_release(&buf);\n","commit_message_token_length":135,"code_token_length":173,"combined_token_length":308,"target":1}
{"commit_url":"https:\/\/github.com\/nicotine-plus\/nicotine-plus\/commit\/e39e0d37e58c202ddf3bab968da2d77fb49267e6","commit_message":"search.py: use 'number' type for ID column","code_diff":"@@ -349,7 +349,7 @@ class Search(UserInterface):\n         color_col = 17\n         self.cols = cols = initialise_columns(\n             self.frame, \"file_search\", self.ResultsList,\n-            [\"id\", _(\"ID\"), 50, \"text\", color_col],\n+            [\"id\", _(\"ID\"), 50, \"number\", color_col],\n             [\"user\", _(\"User\"), 200, \"text\", color_col],\n             [\"country\", _(\"Country\"), 25, \"icon\", None],\n             [\"speed\", _(\"Speed\"), 100, \"number\", color_col],\n","commit_message_token_length":12,"code_token_length":224,"combined_token_length":236,"target":0}
{"commit_url":"https:\/\/github.com\/mindsdb\/lightwood\/commit\/f4449086b19f018d3c5d5fb8741fa8ecf6b50d1b","commit_message":"fix: activate optuna for lgbm_array iff horizon < 10","code_diff":"@@ -49,7 +49,7 @@ class LightGBMArray(BaseMixer):\n                                 dtype_dict,\n                                 input_cols,\n                                 False,  # fit_on_dev,\n-                                True,  # use_optuna\n+                                True if tss.horizon < 10 else False,  # use_optuna\n                                 target_encoder)\n                        for _, target_col in zip(range(self.horizon), [target] + self.offset_pred_cols)]\n         self.ts_analysis = ts_analysis\n","commit_message_token_length":16,"code_token_length":341,"combined_token_length":357,"target":1}
{"commit_url":"https:\/\/github.com\/Bitmessage\/PyBitmessage\/commit\/11bec55be56e73502fbd569bf0327a8876b54315","commit_message":"Don't put addresses into queue\n\n- attempt to fix #1598\n- seems to work\n- addresses won't be uploaded\/announced anymore other than after connecting,\n  Later I need to find out how to announce them without causing problems, but\n  for the time disabling this seems an acceptable drawback","code_diff":"@@ -31,7 +31,7 @@ from network.dandelion import Dandelion\n from network.proxy import ProxyError\n from node import Node, Peer\n from objectracker import ObjectTracker, missingObjects\n-from queues import addrQueue, invQueue, objectProcessorQueue, portCheckerQueue\n+from queues import invQueue, objectProcessorQueue, portCheckerQueue\n from randomtrackingdict import RandomTrackingDict\n \n logger = logging.getLogger('default')\n@@ -466,8 +466,9 @@ class BMProto(AdvancedDispatcher, ObjectTracker):\n                             }\n                     # since we don't track peers outside of knownnodes,\n                     # only spread if in knownnodes to prevent flood\n-                    addrQueue.put((stream, peer, seenTime,\n-                                   self.destination))\n+                    # DISABLED TO WORKAROUND FLOOD\/LEAK\n+                    # addrQueue.put((stream, peer, seenTime,\n+                    #               self.destination))\n         return True\n \n     def bm_command_portcheck(self):\n","commit_message_token_length":63,"code_token_length":441,"combined_token_length":504,"target":1}
{"commit_url":"https:\/\/github.com\/sunpy\/sunpy\/commit\/242bd9d9a847f65d6be4583341411ecc0bb8e0d7","commit_message":"Switch to using logger instead of a print statement","code_diff":"@@ -16,6 +16,7 @@ from astropy._erfa.core import ErfaWarning\n from astropy.constants import c as speed_of_light\n \n from sunpy.time import parse_time\n+from sunpy import log\n \n from .frames import HeliographicStonyhurst as HGS\n from .transformations import _SUN_DETILT_MATRIX\n@@ -37,7 +38,7 @@ def get_body_heliographic_stonyhurst(body, time='now', observer=None):\n     time : various\n         Time to use as `~astropy.time.Time` or in a parse_time-compatible format\n     observer : `~astropy.coordinates.SkyCoord`\n-        If not None, the returned coordinate is the apparent location (i.e., factors in light\n+        If not None, the returned coordinate is the apparent location (i.e., accounts for light\n         travel time)\n \n     Returns\n@@ -63,7 +64,8 @@ def get_body_heliographic_stonyhurst(body, time='now', observer=None):\n             light_travel_time = distance \/ speed_of_light\n             emitted_time = obstime - light_travel_time\n \n-        print('Apparent location factors in {} seconds of light travel time'.format(light_travel_time.to('s').value))\n+        log.info(f\"Apparent body location accounts for {light_travel_time.to('s').value:.2f}\"\n+                  \" seconds of light travel time\")\n \n     body_hgs = ICRS(body_icrs).transform_to(HGS(obstime=obstime))\n \n","commit_message_token_length":9,"code_token_length":485,"combined_token_length":494,"target":0}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/4e1d1a2eea25878a2128e376bff8b4a1b2216b15","commit_message":"shortlog: optimize \"--summary\" mode\n\nIf the user asked us only to show counts for each author,\nrather than the individual summary lines, then there is no\npoint in us generating the summaries only to throw them\naway. With this patch, I measured the following speedup for\n\"git shortlog -ns HEAD\" on linux.git (best-of-five):\n\n  [before]\n  real    0m5.644s\n  user    0m5.472s\n  sys     0m0.176s\n\n  [after]\n  real    0m5.257s\n  user    0m5.104s\n  sys     0m0.156s\n\nThat's only ~7%, but it's so easy to do, there's no good\nreason not to. We don't have to touch any downstream code,\nsince we already fill in the magic string \"<none>\" to handle\ncommits without a message.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -132,10 +132,12 @@ void shortlog_add_commit(struct shortlog *log, struct commit *commit)\n \t\tgoto out;\n \t}\n \n-\tif (log->user_format)\n-\t\tpretty_print_commit(&ctx, commit, &oneline);\n-\telse\n-\t\tformat_commit_message(commit, \"%s\", &oneline, &ctx);\n+\tif (!log->summary) {\n+\t\tif (log->user_format)\n+\t\t\tpretty_print_commit(&ctx, commit, &oneline);\n+\t\telse\n+\t\t\tformat_commit_message(commit, \"%s\", &oneline, &ctx);\n+\t}\n \n \tinsert_one_record(log, author.buf, oneline.len ? oneline.buf : \"<none>\");\n \n","commit_message_token_length":265,"code_token_length":205,"combined_token_length":470,"target":1}
{"commit_url":"https:\/\/github.com\/redpanda-data\/redpanda\/commit\/666085351618ea56365661c47af7c97fd959bfd0","commit_message":"k\/topic_utils: do not return an error when waiting for leaders failed\n\nRecently introduced change (waiting for leaders before returning from\ncreate topics) change the behavior of `CreateTopicsRequest` handler.\nPreviously handler was waiting for topic partitions to be created but\neven if that timed out it returned success to the client. Waiting for\nleaders threw an exception when timeout was trigger which caused client\nconnection to be dropped.\n\nFixed an error by going back to previous behavior i.e. ignoring waiting\ntimeouts. The timeout does not indicate that topic creation failed\nactually when waiting for creation topic already exists.\n\nFixes: #7942\n\nSigned-off-by: Michal Maslanka <michal@redpanda.com>","code_diff":"@@ -79,7 +79,11 @@ ss::future<> wait_for_topics(\n                    })\n             .then([&md_cache, &results, timeout]() {\n                 return wait_for_leaders(md_cache, results, timeout)\n-                  .discard_result();\n+                  .discard_result()\n+                  .handle_exception_type([](const ss::timed_out_error&) {\n+                      \/\/ discard timed out exception, even tho waiting failed\n+                      \/\/ the topic is created\n+                  });\n             });\n       });\n }\n","commit_message_token_length":162,"code_token_length":299,"combined_token_length":461,"target":1}
{"commit_url":"https:\/\/github.com\/astropy\/astropy\/commit\/752887c906ebc093c2b67474feb8e0b496887beb","commit_message":"Replaced pow with a multiply","code_diff":"@@ -43,7 +43,7 @@ void compute_sigma_clipped_bounds(double data_buffer[], int count, int use_media\n \n       std = 0;\n       for (i = 0; i < count; i++) {\n-        std += pow(mean - data_buffer[i], 2);\n+        std += (data_buffer[i] - mean) * (data_buffer[i] - mean);\n       }\n       std = sqrt(std \/ count);\n \n","commit_message_token_length":6,"code_token_length":150,"combined_token_length":156,"target":1}
{"commit_url":"https:\/\/github.com\/Formlabs\/OpenFL\/commit\/4c337640fadb477ccf9e988d286d914341c6f0d5","commit_message":"Use io.BytesIO rather than io.StringIO since we are working with bytearrays now.","code_diff":"@@ -578,8 +578,8 @@ class Packets(list):\n     @staticmethod\n     def fromstring(string):\n         \"\"\"Load all the packets in a string buffer.\"\"\"\n-        from io import StringIO\n-        return fromfile(StringIO(string))\n+        from io import BytesIO\n+        return fromfile(BytesIO(string))\n \n     @staticmethod\n     def fromfile(fileHandle):\n","commit_message_token_length":22,"code_token_length":143,"combined_token_length":165,"target":0}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/0cbd1c85a96384ef93978661e408ce7c1b721847","commit_message":"Fix burning CPU with udev disabled on Flatpak\n\nFixes #67355.","code_diff":"@@ -218,8 +218,8 @@ void JoypadLinux::monitor_joypads() {\n \t\t\t}\n \t\t}\n \t\tclosedir(input_directory);\n+\t\tusleep(1000000); \/\/ 1s\n \t}\n-\tusleep(1000000); \/\/ 1s\n }\n \n void JoypadLinux::close_joypads() {\n","commit_message_token_length":18,"code_token_length":91,"combined_token_length":109,"target":1}
{"commit_url":"https:\/\/github.com\/getsentry\/zeus\/commit\/02769a588debec80db2a303d94516d7b1660cd48","commit_message":"feat: Add 5 minute time limit to tasks","code_diff":"@@ -156,6 +156,10 @@ def create_app(_read_config=True, **config):\n     app.config['CELERY_SEND_EVENTS'] = False\n     app.config['CELERY_TASK_RESULT_EXPIRES'] = 1\n     app.config['CELERY_TASK_SERIALIZER'] = 'zeus_json'\n+    # dont let any task run longer than 5 minutes\n+    app.config['CELERY_TASK_SOFT_TIME_LIMIT'] = 300\n+    # hard kill tasks after 6 minutes\n+    app.config['CELERY_TASK_TIME_LIMIT'] = 360\n     app.config['CELERYD_PREFETCH_MULTIPLIER'] = 1\n     app.config['CELERYD_MAX_TASKS_PER_CHILD'] = 10000\n     app.config['CELERYBEAT_SCHEDULE_FILE'] = os.path.join(\n","commit_message_token_length":9,"code_token_length":264,"combined_token_length":273,"target":0}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/4b64536ee7fd0438c93d1784824098f826cd642c","commit_message":"util: optimize free_and_strdup() if NOP\n\nUnder the assumption that strcmp() is cheaper than memory allocation,\nlet's avoid the allocation, if the new value is identical to the old.","code_diff":"@@ -5682,6 +5682,9 @@ int free_and_strdup(char **p, const char *s) {\n         \/* Replaces a string pointer with an strdup()ed new string,\n          * possibly freeing the old one. *\/\n \n+        if (streq_ptr(*p, s))\n+                return 0;\n+\n         if (s) {\n                 t = strdup(s);\n                 if (!t)\n@@ -5692,7 +5695,7 @@ int free_and_strdup(char **p, const char *s) {\n         free(*p);\n         *p = t;\n \n-        return 0;\n+        return 1;\n }\n \n int sethostname_idempotent(const char *s) {\n","commit_message_token_length":46,"code_token_length":284,"combined_token_length":330,"target":1}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/fc9ae7178e1462377b272a14b1a763d480ab0980","commit_message":"cgroup-util: check unified_cache before invoking streq()\n\nJust a minor optimization.","code_diff":"@@ -2340,10 +2340,13 @@ bool cg_unified(const char *controller) {\n \n         assert(cg_update_unified() >= 0);\n \n-        if (streq_ptr(controller, SYSTEMD_CGROUP_CONTROLLER))\n-                return unified_cache >= CGROUP_UNIFIED_SYSTEMD;\n-        else\n-                return unified_cache >= CGROUP_UNIFIED_ALL;\n+        if (unified_cache == CGROUP_UNIFIED_NONE)\n+                return false;\n+\n+        if (unified_cache >= CGROUP_UNIFIED_ALL)\n+                return true;\n+\n+        return streq_ptr(controller, SYSTEMD_CGROUP_CONTROLLER);\n }\n \n bool cg_all_unified(void) {\n","commit_message_token_length":21,"code_token_length":293,"combined_token_length":314,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/77879d4288443fcacb0668bd867438b53bd800ae","commit_message":"Update NodePaths only in built-in resources","code_diff":"@@ -1812,8 +1812,6 @@ bool SceneTreeDock::_check_node_path_recursive(Node *p_root_node, Variant &r_var\n \t\t\t}\n \t\t} break;\n \n-\/\/ FIXME: This approach causes a significant performance regression, see GH-84910.\n-#if 0\n \t\tcase Variant::OBJECT: {\n \t\t\tResource *resource = Object::cast_to<Resource>(r_variant);\n \t\t\tif (!resource) {\n@@ -1825,6 +1823,11 @@ bool SceneTreeDock::_check_node_path_recursive(Node *p_root_node, Variant &r_var\n \t\t\t\tbreak;\n \t\t\t}\n \n+\t\t\tif (!resource->is_built_in()) {\n+\t\t\t\t\/\/ For performance reasons, assume that scene paths are no concern for external resources.\n+\t\t\t\tbreak;\n+\t\t\t}\n+\n \t\t\tList<PropertyInfo> properties;\n \t\t\tresource->get_property_list(&properties);\n \n@@ -1841,9 +1844,7 @@ bool SceneTreeDock::_check_node_path_recursive(Node *p_root_node, Variant &r_var\n \t\t\t\t\tundo_redo->add_undo_property(resource, propertyname, old_variant);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tbreak;\n-\t\t};\n-#endif\n+\t\t} break;\n \n \t\tdefault: {\n \t\t}\n","commit_message_token_length":10,"code_token_length":386,"combined_token_length":396,"target":1}
{"commit_url":"https:\/\/github.com\/NetworkManager\/NetworkManager\/commit\/fedf7ca3034ed3708b8fb11d14e3e33b04bf28eb","commit_message":"libnm-util: optimize nm_utils_hwaddr_ntoa_len()\n\nSigned-off-by: Thomas Haller <thaller@redhat.com>","code_diff":"@@ -2154,18 +2154,26 @@ char *\n nm_utils_hwaddr_ntoa_len (gconstpointer addr, gsize length)\n {\n \tconst guint8 *in = addr;\n-\tGString *out;\n+\tchar *out, *result;\n+\tconst char *LOOKUP = \"0123456789ABCDEF\";\n \n-\tg_return_val_if_fail (addr && length, g_strdup (\"\"));\n-\n-\tout = g_string_new (NULL);\n-\twhile (length--) {\n-\t\tif (out->len)\n-\t\t\tg_string_append_c (out, ':');\n-\t\tg_string_append_printf (out, \"%02X\", *in++);\n+\tif (!addr || !length) {\n+\t\tg_return_val_if_reached (g_strdup (\"\"));\n+\t\treturn g_strdup (\"\");\n \t}\n \n-\treturn g_string_free (out, FALSE);\n+\tresult = out = g_malloc (length * 3);\n+\tfor (;;) {\n+\t\tguint8 v = *in++;\n+\n+\t\t*out++ = LOOKUP[v >> 4];\n+\t\t*out++ = LOOKUP[v & 0x0F];\n+\t\tif (--length == 0) {\n+\t\t\t*out = 0;\n+\t\t\treturn result;\n+\t\t}\n+\t\t*out++ = ':';\n+\t}\n }\n \n \/**\n","commit_message_token_length":40,"code_token_length":382,"combined_token_length":422,"target":1}
{"commit_url":"https:\/\/github.com\/deforum-art\/sd-webui-deforum\/commit\/601332c0f8f0ed3135fda609c7102f4f4c302273","commit_message":"allowing as many frames as wanted, no 200 lock","code_diff":"@@ -161,8 +161,10 @@ def generate(args, anim_args, root, frame = 0, return_sample=False):\n     blendFactor = .075\n     colorCorrectionFactor = .075\n     jsonImages = json.loads(args.init_image)\n-    framesToTweenOn = list(jsonImages.keys())[1:]\n-    frameToChoose = (frame >= int(framesToTweenOn[0])) + (frame >= int(framesToTweenOn[1])) + (frame >= int(framesToTweenOn[2])) + (frame >= int(framesToTweenOn[3]))\n+    framesToImageSwapOn = list(jsonImages.keys())[1:]\n+    frameToChoose = 0\n+    for swappingFrame in framesToImageSwapOn:\n+        frameToChoose += (frame >= int(swappingFrame))# + (frame >= int(framesToTweenOn[1])) + (frame >= int(framesToTweenOn[2])) + (frame >= int(framesToTweenOn[3]))\n     \n     if frame % 50 <= tweeningFrames: # number of tweening frames\n         blendFactor = .35 - .25*math.cos((frame % tweeningFrames) \/ (tweeningFrames \/ 2))\n","commit_message_token_length":11,"code_token_length":339,"combined_token_length":350,"target":0}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/454f0f8680ebbded135e8575b4d9615b427fdf76","commit_message":"hashmap: optimize set_put_strdup() a bit\n\nHashing should be quicker than allocating, hence let's first check if the\nstring already exists and only then allocate a new copy for it.","code_diff":"@@ -1773,20 +1773,18 @@ int set_consume(Set *s, void *value) {\n \n int set_put_strdup(Set *s, const char *p) {\n         char *c;\n-        int r;\n \n         assert(s);\n         assert(p);\n \n+        if (set_contains(s, (char*) p))\n+                return 0;\n+\n         c = strdup(p);\n         if (!c)\n                 return -ENOMEM;\n \n-        r = set_consume(s, c);\n-        if (r == -EEXIST)\n-                return 0;\n-\n-        return r;\n+        return set_consume(s, c);\n }\n \n int set_put_strdupv(Set *s, char **l) {\n","commit_message_token_length":46,"code_token_length":320,"combined_token_length":366,"target":1}
{"commit_url":"https:\/\/github.com\/betsee\/betse\/commit\/040eb3ee6cdd999acdf1f16c16002645fed2b84e","commit_message":"Replace try-import-catch with a call to is_module","code_diff":"@@ -8,13 +8,9 @@ import betse.pathtree as pathtree\n import betse.util.io.log.logs as logs\n from betse.exceptions import BetseFunctionException\n from betse.repl.environment import repl_env\n+from betse.util.py import modules\n \n-# Attempt to import the ptpython module\n-try:\n-    from ptpython.repl import embed\n-    __has_ptpython = True\n-except ImportError:\n-    __has_ptpython = False\n+__has_ptpython = modules.is_module('ptpython')\n \n def start_repl(repl_type : str = None):\n     '''\n@@ -66,6 +62,7 @@ def start_ptpython_repl():\n     '''\n     Start a REPL built around the `ptpython` module\n     '''\n+    from ptpython.repl import embed\n     try:\n         embed(globals=None, locals=repl_env,\n             history_filename=pathtree.REPL_HISTORY_FILENAME)\n","commit_message_token_length":14,"code_token_length":289,"combined_token_length":303,"target":0}
{"commit_url":"https:\/\/github.com\/linuxdeepin\/dtkcore\/commit\/d1082f01a15bcf7cd0d9d97d287fe853f950c506","commit_message":"chore: warning only in debug mode  \u4ec5\u4ec5\u5728debug\u65f6\u6253\u5370\u8b66\u544a\u65e5\u5fd7  Log: Influence: log","code_diff":"@@ -50,6 +50,8 @@ int dtkVersion()\n \n const char *dtkVersionString()\n {\n+#ifdef QT_DEBUG\n     qWarning() << \"Use DTK_VERSION_STR instead.\";\n+#endif\n     return \"\";\/\/DTK_VERSION_STR;\n }\n","commit_message_token_length":38,"code_token_length":80,"combined_token_length":118,"target":0}
{"commit_url":"https:\/\/github.com\/SORMAS-Foundation\/SORMAS-Project\/commit\/d3e0466c9309d56fc39b52d529a3754a5c249dfd","commit_message":"#12256 - [Users] Loop of loading when updating the user role of a specific user","code_diff":"@@ -923,7 +923,9 @@ public class UserFacadeEjb implements UserFacade {\n \t\tSet<User> possibleUsersForAvailableFacilities = new HashSet<>();\n \n \t\tpossibleFacilities.forEach(facility -> {\n-\t\t\tif (!FacilityDto.NONE_FACILITY_UUID.equals(facility.getUuid()) && !FacilityDto.OTHER_FACILITY_UUID.equals(facility.getUuid())) {\n+\t\t\tif (facility != null\n+\t\t\t\t&& !FacilityDto.NONE_FACILITY_UUID.equals(facility.getUuid())\n+\t\t\t\t&& !FacilityDto.OTHER_FACILITY_UUID.equals(facility.getUuid())) {\n \t\t\t\tpossibleUsersForAvailableFacilities.addAll(userService.getFacilityUsersOfHospital(facility));\n \t\t\t}\n \t\t});\n","commit_message_token_length":19,"code_token_length":249,"combined_token_length":268,"target":1}
{"commit_url":"https:\/\/github.com\/redpanda-data\/redpanda\/commit\/074e634a856dbcb45132d41a470d33f9922d6a2d","commit_message":"rptest\/scale_tests: limit producer rate in test","code_diff":"@@ -40,6 +40,12 @@ class ManyClientsTest(RedpandaTest):\n             # Enable segment size jitter as this is a stress test and does not\n             # rely on exact segment counts.\n             'log_segment_size_jitter_percent': 5,\n+            # This limit caps the produce throughput to a sustainable rate for a RP\n+            # cluster that has 384MB of memory per shard. It is set here to\n+            # since our current backpressure mechanisms will allow producers to\n+            # produce at a much higher rate and cause RP to run out of memory.\n+            'target_quota_byte_rate':\n+            31460000,  # 30MiB\/s of throughput per shard\n         }\n         super().__init__(*args, **kwargs)\n \n","commit_message_token_length":13,"code_token_length":293,"combined_token_length":306,"target":1}
{"commit_url":"https:\/\/github.com\/open-stage\/blender-dmx\/commit\/15c97f494084da745802f47438ecf56bd36bd613","commit_message":"Extend time after which the version checking will happen on startup","code_diff":"@@ -577,7 +577,7 @@ class DMX(PropertyGroup):\n         self.ensure_application_uuid()\n         self.check_python_version()\n         self.check_blender_version()\n-        Timer(1, bpy.ops.dmx.check_version, ()).start()\n+        Timer(5, bpy.ops.dmx.check_version, ()).start()\n         self.logging_level = \"ERROR\" # setting default logging level\n \n     # Unlink Add-on from file\n","commit_message_token_length":12,"code_token_length":171,"combined_token_length":183,"target":0}
{"commit_url":"https:\/\/github.com\/aiortc\/aioquic\/commit\/6fb4999fd6adf92135915f869d0f20cf1e63ccb8","commit_message":"[tls] only load default locations if they are defined","code_diff":"@@ -277,12 +277,15 @@ def verify_certificate(\n         lib.X509_STORE_set_default_paths(store), \"X509_STORE_set_default_paths\"\n     )\n     paths = ssl.get_default_verify_paths()\n-    openssl_assert(\n-        lib.X509_STORE_load_locations(\n-            store, openssl_encode_path(paths.cafile), openssl_encode_path(paths.capath)\n-        ),\n-        \"X509_STORE_load_locations\",\n-    )\n+    if paths.cafile is not None or paths.capath is not None:\n+        openssl_assert(\n+            lib.X509_STORE_load_locations(\n+                store,\n+                openssl_encode_path(paths.cafile),\n+                openssl_encode_path(paths.capath),\n+            ),\n+            \"X509_STORE_load_locations\",\n+        )\n \n     # load extra CAs\n     if cadata is not None:\n","commit_message_token_length":12,"code_token_length":414,"combined_token_length":426,"target":0}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/ff0e7e05c9904b4120868e96216b123c1b798aa4","commit_message":"fileio: try to read one byte too much in read_full_stream()\n\nLet's read one byte more than the file size we read from stat() on the\nfirst fread() invocation. That way, the first read() will already be\nshort and indicate eof to fread().\n\nThis is a minor optimization, and replaces #3908.","code_diff":"@@ -270,11 +270,11 @@ int read_full_stream(FILE *f, char **contents, size_t *size) {\n                 if (st.st_size > READ_FULL_BYTES_MAX)\n                         return -E2BIG;\n \n-                \/* Start with the right file size, but be prepared for\n-                 * files from \/proc which generally report a file size\n-                 * of 0 *\/\n+                \/* Start with the right file size, but be prepared for files from \/proc which generally report a file\n+                 * size of 0. Note that we increase the size to read here by one, so that the first read attempt\n+                 * already makes us notice the EOF. *\/\n                 if (st.st_size > 0)\n-                        n = st.st_size;\n+                        n = st.st_size + 1;\n         }\n \n         l = 0;\n","commit_message_token_length":77,"code_token_length":411,"combined_token_length":488,"target":1}
{"commit_url":"https:\/\/github.com\/llvm-mirror\/clang\/commit\/575c8ea65c2a5212d95e9881f8a2aac27315dd53","commit_message":"[AST] hasAttr followed by getAttr isn't efficient\n\nJust use getAttr because we are interested in the attribute's contents.\n\ngit-svn-id: https:\/\/llvm.org\/svn\/llvm-project\/cfe\/trunk@237336 91177308-0d34-0410-b5e6-96231b3b80d8","code_diff":"@@ -1915,10 +1915,13 @@ VarDecl::isThisDeclarationADefinition(ASTContext &C) const {\n   if (hasInit())\n     return Definition;\n \n-  if (hasAttr<AliasAttr>() ||\n-      (hasAttr<SelectAnyAttr>() && !getAttr<SelectAnyAttr>()->isInherited()))\n+  if (hasAttr<AliasAttr>())\n     return Definition;\n \n+  if (const auto *SAA = getAttr<SelectAnyAttr>())\n+    if (!SAA->isInherited())\n+      return Definition;\n+\n   \/\/ A variable template specialization (other than a static data member\n   \/\/ template or an explicit specialization) is a declaration until we\n   \/\/ instantiate its initializer.\n","commit_message_token_length":87,"code_token_length":213,"combined_token_length":300,"target":1}
{"commit_url":"https:\/\/github.com\/nanophotonics\/nplab\/commit\/097923350474b1a2143a2d3a9a6fb809bfda9044","commit_message":"truncateSpectrum function improved  Now works for very small slices and\/or small arrays","code_diff":"@@ -11,13 +11,10 @@ import h5py\n import numpy as np\n import os\n import matplotlib.pyplot as plt\n-from scipy import sparse\n-import scipy.sparse.linalg as splu\n from scipy.signal import butter, filtfilt\n from lmfit.models import GaussianModel\n import time\n from random import randint\n-import scipy.optimize as spo\n import re\n \n if __name__ == '__main__':\n@@ -239,6 +236,17 @@ def truncateSpectrum(x, y, startWl = 450, finishWl = 900):\n \n     xTrunc = np.array(x[startIndex:finishIndex])\n     yTrunc = np.array(y[startIndex:finishIndex])\n+\n+    if xTrunc.size <= 10 and x.size <= 100:\n+\n+        if startWl > finishWl:\n+            wl1 = finishWl\n+            wl2 = startWl\n+            startWl = wl1\n+            finishWl = wl2\n+\n+        xTrunc, yTrunc = np.transpose(np.array([[i, y[n]] for n, i in enumerate(x) if startWl < i < finishWl]))\n+\n     return np.array([xTrunc, yTrunc])\n \n def plotStackedMap(x, yData, imgName = 'Stack', plotTitle = 'Stack', closeFigures = False, init = False, vmin = 0, vmax = 6):\n","commit_message_token_length":19,"code_token_length":444,"combined_token_length":463,"target":0}
{"commit_url":"https:\/\/github.com\/ekeih\/OmNomNom\/commit\/cef6a313b1454ab920cbf9696298b53e881ae2c3","commit_message":"wait three seconds between canteens in a list","code_diff":"@@ -5,6 +5,7 @@ import canteens.cafenero\n import canteens.singh\n import canteens.personalkantine\n import canteens.studierendenwerk\n+import time\n \n logger = get_task_logger(__name__)\n \n@@ -14,6 +15,7 @@ def update_canteens(canteens):\n         logger.info('[Update] %s' % canteen.name)\n         menu = canteen.update(url=canteen.url)\n         cache.set(canteen.id_, menu, ex=cache_interval*2)\n+        time.sleep(3)\n \n \n @app.task\n","commit_message_token_length":10,"code_token_length":197,"combined_token_length":207,"target":0}
{"commit_url":"https:\/\/github.com\/gem\/oq-engine\/commit\/37c2e86bd0821960318310771d6d7f824b33c7e5","commit_message":"Optimizing gmpe_table._get_mean","code_diff":"@@ -50,11 +50,8 @@ def _get_mean_(kind, data, dists, table_dists):\n     :return:\n         The mean intensity measure level from the tables.\n     \"\"\"\n-    # For values outside of the interpolation range use -999. to ensure\n     # value is identifiable and outside of potential real values\n-    interpolator_mean = interp1d(\n-        table_dists, data, bounds_error=False, fill_value=-999.)\n-    mean = interpolator_mean(dists)\n+    mean = numpy.interp(dists, table_dists, data)\n     # For those distances less than or equal to the shortest distance\n     # extrapolate the shortest distance value\n     mean[dists < (table_dists[0] + 1.0E-3)] = data[0]\n","commit_message_token_length":12,"code_token_length":237,"combined_token_length":249,"target":1}
{"commit_url":"https:\/\/github.com\/lightkurve\/lightkurve\/commit\/dd47faed24c60edacaa41986411999d24abf5a48","commit_message":"use LogNorm from mpl instead of astropys LogStretch (#186)","code_diff":"@@ -1,9 +1,11 @@\n from __future__ import division, print_function\n+import sys\n \n from astropy.visualization import (PercentileInterval, ImageNormalize,\n-                                   SqrtStretch, LogStretch, LinearStretch)\n+                                   SqrtStretch, LinearStretch)\n from astropy.time import Time\n import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm\n import numpy as np\n \n \n@@ -305,7 +307,10 @@ def plot_image(image, ax=None, scale='linear', origin='lower',\n         elif scale == 'sqrt':\n             norm = ImageNormalize(vmin=vmin, vmax=vmax, stretch=SqrtStretch())\n         elif scale == 'log':\n-            norm = ImageNormalize(vmin=vmin, vmax=vmax, stretch=LogStretch())\n+            # To use log scale we need to guarantee that vmin > 0, so that\n+            # we avoid division by zero and\/or negative values.\n+            norm = LogNorm(vmin=max(vmin, sys.float_info.epsilon), vmax=vmax,\n+                           clip=True)\n         else:\n             raise ValueError(\"scale {} is not available.\".format(scale))\n \n","commit_message_token_length":16,"code_token_length":485,"combined_token_length":501,"target":0}
{"commit_url":"https:\/\/github.com\/ansible\/ansible\/commit\/17060f984977b59336a224858f7149d98350ad2c","commit_message":"remove +1 from size that was cutting off first char of copied files when a recursive dir","code_diff":"@@ -97,7 +97,7 @@ class ActionModule(ActionBase):\n         if os.path.isdir(source):\n             # Get the amount of spaces to remove to get the relative path.\n             if source_trailing_slash:\n-                sz = len(source) + 1\n+                sz = len(source)\n             else:\n                 sz = len(source.rsplit('\/', 1)[0]) + 1\n \n","commit_message_token_length":18,"code_token_length":189,"combined_token_length":207,"target":0}
{"commit_url":"https:\/\/github.com\/NetworkManager\/NetworkManager\/commit\/f8b74e19ea1e01781d22fccc6e96129d88e6814e","commit_message":"auth-manager: emit signal by ID\n\nIt's more efficient, as it saves a lookup by name. Also,\nit's more idiomatic to do it this way. I didn't find where\nthe signal gets emitted at first, because usually we don't emit\nby name.","code_diff":"@@ -353,7 +353,7 @@ static void\n _emit_changed_signal (NMAuthManager *self)\n {\n \t_LOGD (\"emit changed signal\");\n-\tg_signal_emit_by_name (self, NM_AUTH_MANAGER_SIGNAL_CHANGED);\n+\tg_signal_emit (self, signals[CHANGED_SIGNAL], 0);\n }\n \n static void\n","commit_message_token_length":60,"code_token_length":108,"combined_token_length":168,"target":1}
{"commit_url":"https:\/\/github.com\/rsyslog\/rsyslog\/commit\/beed1bda6969b70b608ff9e606f52ac6d41cc8c1","commit_message":"optimize: save inspection of already-inspected data\n\nthis is just a small improvement, but let's get the benefit ;)","code_diff":"@@ -382,7 +382,9 @@ SanitizeMsg(msg_t *pMsg)\n \t\tFINALIZE;\n \t}\n \n-\t\/* now copy over the message and sanitize it *\/\n+\t\/* now copy over the message and sanitize it. Note that up to iSrc-1 there was\n+\t * obviously no need to sanitize, so we can go over that quickly...\n+\t *\/\n \tiMaxLine = glbl.GetMaxLine();\n \tmaxDest = lenMsg * 4; \/* message can grow at most four-fold *\/\n \tif(maxDest > iMaxLine)\n@@ -391,7 +393,11 @@ SanitizeMsg(msg_t *pMsg)\n \t\tpDst = szSanBuf;\n \telse \n \t\tCHKmalloc(pDst = MALLOC(sizeof(uchar) * (iMaxLine + 1)));\n-\tiSrc = iDst = 0;\n+\tif(iSrc > 0) {\n+\t\tiSrc--; \/* go back to where everything is OK *\/\n+\t\tmemcpy(pDst, pszMsg, iSrc); \/* fast copy known good *\/\n+\t}\n+\tiDst = iSrc;\n \twhile(iSrc < lenMsg && iDst < maxDest - 3) { \/* leave some space if last char must be escaped *\/\n \t\tif((pszMsg[iSrc] < 32) && (pszMsg[iSrc] != '\\t' || bEscapeTab)) {\n \t\t\t\/* note: \\0 must always be escaped, the rest of the code currently\n","commit_message_token_length":27,"code_token_length":400,"combined_token_length":427,"target":1}
{"commit_url":"https:\/\/github.com\/sympy\/sympy\/commit\/f7cecfea016dedf7ad042be0c8da9df1ef19c756","commit_message":"perf(core): make sympify faster for Basic subclasses.\n\nThe behaviour of sympify was changed in\n\n  https:\/\/github.com\/sympy\/sympy\/pull\/20128\n\nso that sympifying a Basic subclass would be an error when strict=True.\nThat change made the codepath for calling e.g. _sympify(Basic) slower as\nmore checks would be done before returning. This commit adds an early\nraise for the case of calling _sympify(a) where a is a Basic subclass.","code_diff":"@@ -344,8 +344,13 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n     #\n     # https:\/\/github.com\/sympy\/sympy\/issues\/20124\n     is_sympy = getattr(a, '__sympy__', None)\n-    if is_sympy is True or (is_sympy is not None and not strict):\n+    if is_sympy is True:\n         return a\n+    elif is_sympy is not None:\n+        if not strict:\n+            return a\n+        else:\n+            raise SympifyError(a)\n \n     if isinstance(a, CantSympify):\n         raise SympifyError(a)\n","commit_message_token_length":120,"code_token_length":254,"combined_token_length":374,"target":1}
{"commit_url":"https:\/\/github.com\/rsyslog\/rsyslog\/commit\/49d1203b3582f7d637af11a226386a4df186e687","commit_message":"optimize: iscntrl() seems to be surprisingly slow\n\nat least so tells the profiler...","code_diff":"@@ -362,11 +362,10 @@ SanitizeMsg(msg_t *pMsg)\n \t *\/\n \tint bNeedSanitize = 0;\n \tfor(iSrc = 0 ; iSrc < lenMsg ; iSrc++) {\n-\t\tif(iscntrl(pszMsg[iSrc])) {\n+\t\tif(pszMsg[iSrc] < 32) {\n \t\t\tif(bSpaceLFOnRcv && pszMsg[iSrc] == '\\n')\n \t\t\t\tpszMsg[iSrc] = ' ';\n-\t\t\telse\n-\t\t\tif(pszMsg[iSrc] == '\\0' || bEscapeCCOnRcv) {\n+\t\t\telse if(pszMsg[iSrc] == '\\0' || bEscapeCCOnRcv) {\n \t\t\t\tbNeedSanitize = 1;\n \t\t\t\tif (!bSpaceLFOnRcv)\n \t\t\t\t\tbreak;\n@@ -394,7 +393,7 @@ SanitizeMsg(msg_t *pMsg)\n \t\tCHKmalloc(pDst = MALLOC(sizeof(uchar) * (iMaxLine + 1)));\n \tiSrc = iDst = 0;\n \twhile(iSrc < lenMsg && iDst < maxDest - 3) { \/* leave some space if last char must be escaped *\/\n-\t\tif(iscntrl((int) pszMsg[iSrc]) && (pszMsg[iSrc] != '\\t' || bEscapeTab)) {\n+\t\tif((pszMsg[iSrc] < 32) && (pszMsg[iSrc] != '\\t' || bEscapeTab)) {\n \t\t\t\/* note: \\0 must always be escaped, the rest of the code currently\n \t\t\t * can not handle it! -- rgerhards, 2009-08-26\n \t\t\t *\/\n","commit_message_token_length":23,"code_token_length":483,"combined_token_length":506,"target":1}
{"commit_url":"https:\/\/github.com\/lgervasoni\/urbansprawl\/commit\/1e13d3917645f10cb2d8ad3c0a6cb97da8a87e7e","commit_message":"Corrected urban features logging when elapsed time > 24hrs","code_diff":"@@ -159,7 +159,8 @@ def compute_full_urban_features(city_ref, df_osm_built=None, df_osm_pois=None, g\n \t# Save to GeoJSON file (no projection conserved, then use EPSG 4326)\n \tox.project_gdf(df_insee_urban_features, to_latlong=True).to_file( get_population_urban_features_filename(city_ref, data_source), driver='GeoJSON' )\n \n-\tlog(\"Done: Urban features calculation. Elapsed time (H:M:S): \" + time.strftime(\"%H:%M:%S\", time.gmtime(time.time()-start)) )\n+\telapsed_time = time.time() - start\n+\tlog(\"Done: Urban features calculation. Elapsed time (H:M:S): \" + '{:02d}:{:02d}:{:02d}'.format(elapsed_time \/\/ 3600, (elapsed_time % 3600 \/\/ 60), elapsed_time % 60) )\n \t\n \treturn df_insee_urban_features\n \n","commit_message_token_length":12,"code_token_length":272,"combined_token_length":284,"target":0}
{"commit_url":"https:\/\/github.com\/rosedu\/wouso\/commit\/be1985b89c4d27ce64c3bbde98d0b1f0ad20d40a","commit_message":"search results fix for user id (second)","code_diff":"@@ -29,10 +29,11 @@ def search(request):\n     if form.is_valid():\n         query = form.cleaned_data['query']\n         searchresults = User.objects.filter(Q(first_name__icontains=query) | Q(last_name__icontains=query))\n-        for i in range(len(searchresults)):\n-            searchresults[i] = searchresults[i].get_profile()\n+        sr = []\n+        for r in searchresults:\n+            sr.append(r.get_profile())\n         return render_to_response('search_results.html',\n-                                  {'searchresults': searchresults},\n+                                  {'searchresults': sr},\n                                   context_instance=RequestContext(request))\n \n     return render_to_response('site_base.html', context_instance=RequestContext(request))\n","commit_message_token_length":9,"code_token_length":369,"combined_token_length":378,"target":0}
{"commit_url":"https:\/\/github.com\/Bitmessage\/PyBitmessage\/commit\/03316496b7c3380c5ac408f86d049855dbcedac6","commit_message":"Stop UDPSocket on socket.error 101 (Network is unreachable)","code_diff":"@@ -146,6 +146,9 @@ class UDPSocket(BMProto):  # pylint: disable=too-many-instance-attributes\n             retval = self.socket.sendto(\n                 self.write_buf, ('<broadcast>', self.port))\n         except socket.error as e:\n-            logger.error(\"socket error on sendato: %s\", e)\n+            logger.error(\"socket error on sendto: %s\", e)\n+            if e.errno == 101:\n+                self.announcing = False\n+                self.socket.close()\n             retval = 0\n         self.slice_write_buf(retval)\n","commit_message_token_length":15,"code_token_length":268,"combined_token_length":283,"target":1}
{"commit_url":"https:\/\/github.com\/rsyslog\/rsyslog\/commit\/eb97d25219a279daceca29c08e68c864b5629901","commit_message":"optimize: use built-in str comparison, as this is optimized in assembly\n\ndo only when possible. However, the profiler only shows as *very* minimal\neffect.","code_diff":"@@ -870,13 +870,7 @@ int rsCStrSzStrCmp(cstr_t *pCS1, uchar *psz, size_t iLenSz)\n \t\t\t * length, so we need to actually check if they\n \t\t\t * are equal.\n \t\t\t *\/\n-\t\t\tregister size_t i;\n-\t\t\tfor(i = 0 ; i < iLenSz ; ++i) {\n-\t\t\t\tif(pCS1->pBuf[i] != psz[i])\n-\t\t\t\t\treturn pCS1->pBuf[i] - psz[i];\n-\t\t\t}\n-\t\t\t\/* if we arrive here, the strings are equal *\/\n-\t\t\treturn 0;\n+\t\t\treturn strncmp((char*)pCS1->pBuf, (char*)psz, iLenSz);\n \t\t}\n \telse\n \t\treturn pCS1->iStrLen - iLenSz;\n","commit_message_token_length":38,"code_token_length":244,"combined_token_length":282,"target":1}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/f35650dff6a4500e317803165b13cc087f48ee85","commit_message":"log: do not free parents when walking reflog\n\nWhen we're doing a reflog walk (instead of walking the\nactual parent pointers), we may see commits multiple times.\nFor this reason, we hold on to the commit buffer for each\ncommit rather than freeing it after we've showed the commit.\n\nWe should do the same for the parent list. Right now this is\njust a minor optimization. But once we refactor how reflog\nwalks are performed, keeping the parents will avoid\nconfusing us the second time we see the commit.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -377,9 +377,9 @@ static int cmd_log_walk(struct rev_info *rev)\n \t\t\t * walking the reflogs.\n \t\t\t *\/\n \t\t\tfree_commit_buffer(commit);\n+\t\t\tfree_commit_list(commit->parents);\n+\t\t\tcommit->parents = NULL;\n \t\t}\n-\t\tfree_commit_list(commit->parents);\n-\t\tcommit->parents = NULL;\n \t\tif (saved_nrl < rev->diffopt.needed_rename_limit)\n \t\t\tsaved_nrl = rev->diffopt.needed_rename_limit;\n \t\tif (rev->diffopt.degraded_cc_to_c)\n","commit_message_token_length":160,"code_token_length":180,"combined_token_length":340,"target":1}
{"commit_url":"https:\/\/github.com\/tonlabs\/TVM-Compiler\/commit\/1516dc075a58bf5b28c9b3660c344e67827040b2","commit_message":"Correctly connect 'continue' and 'break' statements in Objective-C fast enumeration for blocks to the appropriate basic blocks.  llvm-svn: 59226","code_diff":"@@ -839,7 +839,14 @@ CFGBlock* CFGBuilder::VisitObjCForCollectionStmt(ObjCForCollectionStmt* S) {\n   ConditionBlock->setTerminator(S); \/\/ No need to call FinishBlock; 1 stmt\n   \n   \/\/ Now create the true branch.\n+  \/\/ Save the current values for the continue and break targets\n+  SaveAndRestore<CFGBlock*> save_continue(ContinueTargetBlock),\n+                            save_break(BreakTargetBlock); \n+  \n+  BreakTargetBlock = LoopSuccessor;\n+  ContinueTargetBlock = ConditionBlock;  \n   Succ = ConditionBlock;\n+  \n   CFGBlock* BodyBlock = Visit(S->getBody());\n   FinishBlock(BodyBlock);\n   \n","commit_message_token_length":35,"code_token_length":220,"combined_token_length":255,"target":0}
{"commit_url":"https:\/\/github.com\/mozilla\/gecko-dev\/commit\/19d13525ebc7839243866b0252b51d57088fa174","commit_message":"Bug 1237714.  Make nsContentUtils::IsCustomElementName faster in the common case of a non-custom-element name.  r=smaug","code_diff":"@@ -2773,11 +2773,14 @@ nsContentUtils::IsCustomElementName(nsIAtom* aName)\n {\n   \/\/ The custom element name identifies a custom element and is a sequence of\n   \/\/ alphanumeric ASCII characters that must match the NCName production and\n-  \/\/ contain a U+002D HYPHEN-MINUS character.\n+  \/\/ contain a U+002D HYPHEN-MINUS character.  We check for the HYPHEN-MINUS\n+  \/\/ first, since that will typically not be present, which will allow us to\n+  \/\/ return before doing the more expensive (and generally passing) CheckQName\n+  \/\/ check.\n   nsDependentAtomString str(aName);\n   const char16_t* colon;\n-  if (NS_FAILED(nsContentUtils::CheckQName(str, false, &colon)) || colon ||\n-      str.FindChar('-') == -1) {\n+  if (str.FindChar('-') == -1 ||\n+      NS_FAILED(nsContentUtils::CheckQName(str, false, &colon)) || colon) {\n     return false;\n   }\n \n","commit_message_token_length":35,"code_token_length":296,"combined_token_length":331,"target":1}
{"commit_url":"https:\/\/github.com\/rsyslog\/rsyslog\/commit\/f3106c538f04ada7d1d0b1d1117d8930b0ce12d0","commit_message":"Increase UNIX socket backlog for performance under heavy load","code_diff":"@@ -441,7 +441,7 @@ static rsRetVal startupUXSrv(ptcpsrv_t *pSrv) {\n \t\tABORT_FINALIZE(RS_RET_ERR_CRE_AFUX);\n \t}\n \n-\tif (listen(sock, 5) < 0) {\n+\tif (listen(sock, 511) < 0) {\n \t\terrmsg.LogError(errno, RS_RET_ERR_CRE_AFUX, \"imptcp: unix socket listen error\");\n \t\tABORT_FINALIZE(RS_RET_ERR_CRE_AFUX);\n \t}\n","commit_message_token_length":10,"code_token_length":162,"combined_token_length":172,"target":1}
{"commit_url":"https:\/\/github.com\/stan-dev\/math\/commit\/75bcadb96cc061cf3dea20c68c5847bbdc09a3ce","commit_message":"avoid putting un-needed vars on chain stack and place them on nochain stack to reduce chain calls","code_diff":"@@ -43,7 +43,9 @@ void gradient(const F& f, const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,\n               double& fx, Eigen::Matrix<double, Eigen::Dynamic, 1>& grad_fx) {\n   start_nested();\n   try {\n-    Eigen::Matrix<var, Eigen::Dynamic, 1> x_var(x);\n+    Eigen::Matrix<var, Eigen::Dynamic, 1> x_var(x.size());\n+    for (int i = 0; i < x.size(); ++i)\n+      x_var(i) = var(new vari(x(i), false));\n     var fx_var = f(x_var);\n     fx = fx_var.val();\n     grad_fx.resize(x.size());\n","commit_message_token_length":21,"code_token_length":236,"combined_token_length":257,"target":1}
{"commit_url":"https:\/\/github.com\/RPTools\/maptool\/commit\/0fd4d1e1451dc0244360cba44830787ec04b7696","commit_message":"Remove extra vision transform that is no longer needed","code_diff":"@@ -147,7 +147,6 @@ protected void paintComponent(Graphics g) {\n             pitVblTree);\n \n     final var obstructedVision = new Area(unobstructedVision);\n-    obstructedVision.transform(AffineTransform.getTranslateInstance(point.getX(), point.getY()));\n \n     g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, .5f));\n     if (vision != null) {\n","commit_message_token_length":9,"code_token_length":140,"combined_token_length":149,"target":1}
{"commit_url":"https:\/\/github.com\/mapbox\/mapbox-gl-native\/commit\/bea457697a550392971c143071296e0d26a09fb4","commit_message":"Ignore tile URL sharding\n\nThe source returns sharded tile URLs, but sharding doesn\u2019t buy us anything on native platforms, so always grab the first.\n\nref mapbox\/mapbox-gl-native#2007","code_diff":"@@ -98,7 +98,7 @@ void SourceInfo::parseTileJSONProperties(const rapidjson::Value& value) {\n }\n \n std::string SourceInfo::tileURL(const TileID& id, float pixelRatio) const {\n-    std::string result = tiles.at((id.x + id.y) % tiles.size());\n+    std::string result = tiles.at(0);\n     result = util::mapbox::normalizeTileURL(result, url, type);\n     result = util::replaceTokens(result, [&](const std::string &token) -> std::string {\n         if (token == \"z\") return util::toString(std::min(id.z, static_cast<int8_t>(max_zoom)));\n","commit_message_token_length":50,"code_token_length":196,"combined_token_length":246,"target":1}
{"commit_url":"https:\/\/github.com\/TaintDroid\/android_platform_frameworks_base\/commit\/36a64148b4efc246384e2010e5d0a37f16dbbd01","commit_message":"Show silent mode toast immediately, and for 3.5 seconds instead of 2.","code_diff":"@@ -255,18 +255,18 @@ class LockScreen extends LinearLayout implements KeyguardScreen, KeyguardUpdateM\n                 textView.setCompoundDrawablePadding(4);\n             }\n         };\n-        textView.postDelayed(mPendingR1, 400);\n+        textView.postDelayed(mPendingR1, 0);\n         mPendingR2 = new Runnable() {\n             public void run() {\n                 textView.setText(\"\");\n                 textView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);\n             }\n         };\n-        textView.postDelayed(mPendingR2, 2000);\n+        textView.postDelayed(mPendingR2, 3500);\n     }\n     private Runnable mPendingR1;\n     private Runnable mPendingR2;\n-    \n+\n \n     private void refreshAlarmDisplay() {\n         mNextAlarm = mLockPatternUtils.getNextAlarm();\n","commit_message_token_length":16,"code_token_length":389,"combined_token_length":405,"target":0}
{"commit_url":"https:\/\/github.com\/NetworkManager\/NetworkManager\/commit\/de5d07392da488113c956fbf1aca94fa280c3302","commit_message":"libnm: optimize nm_simple_connection_new_clone() to not needlessly set the path\n\nServer never sets the path, so this is entirely unused server-side.\nAlso NMConnection is a glib interface and stores it's private date\nin the GObject's data. It's less efficient to look it up. Just\navoid it.","code_diff":"@@ -113,11 +113,16 @@ NMConnection *\n nm_simple_connection_new_clone (NMConnection *connection)\n {\n \tNMConnection *clone;\n+\tconst char *path;\n \n \tg_return_val_if_fail (NM_IS_CONNECTION (connection), NULL);\n \n \tclone = nm_simple_connection_new ();\n-\tnm_connection_set_path (clone, nm_connection_get_path (connection));\n+\n+\tpath = nm_connection_get_path (connection);\n+\tif (path)\n+\t\tnm_connection_set_path (clone, path);\n+\n \tnm_connection_replace_settings_from_connection (clone, connection);\n \n \treturn clone;\n","commit_message_token_length":75,"code_token_length":182,"combined_token_length":257,"target":1}
{"commit_url":"https:\/\/github.com\/openimaj\/openimaj\/commit\/73f955bf9b64c44e601efd4403c92e6afa0174e4","commit_message":"avoid divide by 0 in normalisation of zero length array","code_diff":"@@ -740,7 +740,8 @@ public class ArrayUtils {\n \t}\n \n \t\/**\n-\t * Normalise length of array to 1.0. Writes over array\n+\t * Normalise length of array to 1.0. Writes over array. If the array is all\n+\t * zeros, it will be unchanged.\n \t * \n \t * @param array\n \t *            the array\n@@ -751,6 +752,9 @@ public class ArrayUtils {\n \t\tfor (int i = 0; i < array.length; i++)\n \t\t\tsumsq += array[i] * array[i];\n \n+\t\tif (sumsq == 0)\n+\t\t\treturn array;\n+\n \t\tfinal double weight = 1.0f \/ Math.sqrt(sumsq);\n \t\tfor (int i = 0; i < array.length; i++)\n \t\t\tarray[i] *= weight;\n","commit_message_token_length":11,"code_token_length":242,"combined_token_length":253,"target":0}
{"commit_url":"https:\/\/github.com\/3liz\/QuickOSM\/commit\/acb2682bf3cf4a670d1aa62e9fc5a5371b8c71e3","commit_message":"add elapsed time to parse the OSM file","code_diff":"@@ -20,6 +20,8 @@\n  *                                                                         *\n  ***************************************************************************\/\n \"\"\"\n+import logging\n+import time\n from os.path import dirname, abspath, join, isfile\n \n from QuickOSM.core.api.connexion_oapi import ConnexionOAPI\n@@ -34,6 +36,8 @@ from qgis.PyQt.QtWidgets import QApplication\n from qgis.core import (\n     QgsVectorLayer, QgsVectorFileWriter, QgsAction, QgsProject, QgsWkbTypes)\n \n+LOGGER = logging.getLogger('QuickOSM')\n+\n \n def open_file(\n         dialog=None,\n@@ -69,7 +73,12 @@ def open_file(\n \n     osm_parser.signalText.connect(dialog.set_progress_text)\n     osm_parser.signalPercentage.connect(dialog.set_progress_percentage)\n+\n+    start_time = time.time()\n     layers = osm_parser.parse()\n+    elapsed_time = time.time() - start_time\n+    parser_time = time.strftime(\"%Hh %Mm %Ss\", time.gmtime(elapsed_time))\n+    LOGGER.info('The OSM parser took: {}'.format(parser_time))\n \n     # Finishing the process with geojson or memory layer\n     num_layers = 0\n","commit_message_token_length":9,"code_token_length":455,"combined_token_length":464,"target":0}
{"commit_url":"https:\/\/github.com\/iterative\/dvc\/commit\/c4836b4578f59a0923be5655259a11538ca193fc","commit_message":"dvc: optmize PathInfo.isin()\n\nShould help with #2203","code_diff":"@@ -19,6 +19,10 @@ if is_py2:\n \n \n class PathInfo(pathlib.PurePath):\n+    # Use __slots__ in PathInfo objects following PurePath implementation.\n+    # This makes objects smaller and speeds up attribute access.\n+    # We don't add any fields so it's empty.\n+    __slots__ = ()\n     scheme = \"local\"\n \n     def __new__(cls, *args):\n@@ -57,7 +61,9 @@ class PathInfo(pathlib.PurePath):\n             other = self.__class__(other)\n         elif self.__class__ != other.__class__:\n             return False\n-        return any(p == other for p in self.parents)\n+        # Use cached casefolded parts to compare paths\n+        n = len(other._cparts)\n+        return len(self._cparts) > n and self._cparts[:n] == other._cparts\n \n     # pathlib2 uses bytes internally in Python 2, and we use unicode everywhere\n     # for paths in both pythons, thus we need this glue.\n","commit_message_token_length":19,"code_token_length":342,"combined_token_length":361,"target":1}
{"commit_url":"https:\/\/github.com\/lvmteam\/lvm2\/commit\/5577f2f4f0a5518662b9cedb6a373ccb67a71917","commit_message":"cleanup: || instead of |\n\nMore efficient with same result here.","code_diff":"@@ -502,13 +502,13 @@ static int _ignore_suspended_snapshot_component(struct device *dev)\n \t\t\t\tlog_error(\"Incorrect snapshot table found\");\n \t\t\t\tgoto_out;\n \t\t\t}\n-\t\t\tr = r | _device_is_suspended(major1, minor1) | _device_is_suspended(major2, minor2);\n+\t\t\tr = r || _device_is_suspended(major1, minor1) || _device_is_suspended(major2, minor2);\n \t\t} else if (!strcmp(target_type, \"snapshot-origin\")) {\n \t\t\tif (sscanf(params, \"%d:%d\", &major1, &minor1) != 2) {\n \t\t\t\tlog_error(\"Incorrect snapshot-origin table found\");\n \t\t\t\tgoto_out;\n \t\t\t}\n-\t\t\tr = r | _device_is_suspended(major1, minor1);\n+\t\t\tr = r || _device_is_suspended(major1, minor1);\n \t\t}\n \t} while (next);\n \n","commit_message_token_length":16,"code_token_length":288,"combined_token_length":304,"target":1}
{"commit_url":"https:\/\/github.com\/aol\/cyclops\/commit\/2ccc16aa8d87c73e96420d7410d435655ab013e7","commit_message":"Fix for #1056","code_diff":"@@ -260,7 +260,11 @@ public interface Seq<T> extends ImmutableList<T>,\n         return Cons.cons(value,this);\n     }\n     default Seq<T> prependAll(Iterable<? extends T> it){\n-      return (Seq<T>)ImmutableList.super.prependAll(it);\n+        Seq<T> res = this;\n+        for(T next : it){\n+            res = res.prepend(next);\n+        }\n+      return res;\n     }\n \n     default Seq<T> take(final long num) {\n","commit_message_token_length":5,"code_token_length":200,"combined_token_length":205,"target":1}
{"commit_url":"https:\/\/github.com\/mozilla\/gecko-dev\/commit\/3a3d9ab7f782990d2cde6876fe1d1c1ae6378e66","commit_message":"Bug 1119089. Switch from the ineffecient x = x.sub(x, y) to x.subout(y);\n\nThe recently added move assignment operators make the existing pattern more\nefficient, but using SubOut() is cleaner and even more efficient.\n\n--HG--\nextra : rebase_source : 14ba52bfde0a4a591ca39b92d86632206bbe13eb","code_diff":"@@ -1282,8 +1282,8 @@ ClientTiledLayerBuffer::ValidateTile(TileClient aTile,\n     nsIntRect(aTileOrigin.x, aTileOrigin.y,\n               GetScaledTileSize().width, GetScaledTileSize().height);\n   \/\/ Intersect this area with the portion that's invalid.\n-  tileRegion = tileRegion.Sub(tileRegion, GetValidRegion());\n-  tileRegion = tileRegion.Sub(tileRegion, aDirtyRegion); \/\/ Has now been validated\n+  tileRegion.SubOut(GetValidRegion());\n+  tileRegion.SubOut(aDirtyRegion); \/\/ Has now been validated\n \n   backBuffer->SetWaste(tileRegion.Area() * mResolution * mResolution);\n   backBuffer->Unlock();\n","commit_message_token_length":94,"code_token_length":204,"combined_token_length":298,"target":1}
{"commit_url":"https:\/\/github.com\/redisson\/redisson\/commit\/86f7ee28e88dddd81b50d06744ad3aee8914141b","commit_message":"Add exactly 1 second to blpop timeout. #565","code_diff":"@@ -511,15 +511,14 @@ public class CommandAsyncService implements CommandAsyncExecutor {\n \n         int timeoutTime = connectionManager.getConfig().getTimeout();\n         if (QueueCommand.TIMEOUTLESS_COMMANDS.contains(details.getCommand().getName())) {\n-            \/\/ add 1.5 second due to issue https:\/\/github.com\/antirez\/redis\/issues\/874\n-            timeoutTime += Math.max(0, 1500 - timeoutTime);\n-\n             Integer popTimeout = Integer.valueOf(details.getParams()[details.getParams().length - 1].toString());\n             handleBlockingOperations(details, connection, popTimeout);\n             if (popTimeout == 0) {\n                 return;\n             }\n             timeoutTime += popTimeout*1000;\n+            \/\/ add 1 second due to issue https:\/\/github.com\/antirez\/redis\/issues\/874\n+            timeoutTime += 1000;\n         }\n \n         final int timeoutAmount = timeoutTime;\n","commit_message_token_length":11,"code_token_length":374,"combined_token_length":385,"target":0}
{"commit_url":"https:\/\/github.com\/srcML\/srcML\/commit\/9494696255849f7b581faa58d6da3b42559af082","commit_message":"Change timer to return elapsed in milliseconds","code_diff":"@@ -36,7 +36,7 @@ public:\n \n \t\/\/ time in seconds\n \tinline double elapsed() {\n-\t\treturn (double)((clock() - start_time)\/CLOCKS_PER_SEC);\n+\t\treturn (double)((clock() - start_time) \/ (CLOCKS_PER_SEC \/ 1000));\n \t}\n \n \tinline bool is_expired() {\n","commit_message_token_length":7,"code_token_length":99,"combined_token_length":106,"target":0}
{"commit_url":"https:\/\/github.com\/rsyslog\/rsyslog\/commit\/69e1be41ac23b429d841f6b7de49c0de03e108e3","commit_message":"improve json variable performance\n\nWe use libfastjson's alternative hash function, which has been\nproven to be much faster than the default one (which stems\nback to libjson-c). This should bring an overall performance\nimprovement for all operations involving variable processing.\n\ncloses https:\/\/github.com\/rsyslog\/rsyslog\/issues\/848","code_diff":"@@ -1636,6 +1636,8 @@ deinitAll(void)\n int\n main(int argc, char **argv)\n {\n+\t\/* use faster hash function inside json lib *\/\n+\tjson_global_set_string_hash(JSON_C_STR_HASH_PERLLIKE);\n \tdbgClassInit();\n \tinitAll(argc, argv);\n \tsd_notify(0, \"READY=1\");\n","commit_message_token_length":78,"code_token_length":110,"combined_token_length":188,"target":1}
{"commit_url":"https:\/\/github.com\/rsyslog\/rsyslog\/commit\/855b68e1be652b4c51052969a9550d33b2aec612","commit_message":"optimize: re-use already computed value!","code_diff":"@@ -401,12 +401,12 @@ evalPROPFILT(struct cnfstmt *stmt, msg_t *pMsg)\n \t\tbreak;\n \tcase FIOP_ISEQUAL:\n \t\tif(rsCStrSzStrCmp(stmt->d.s_propfilt.pCSCompValue,\n-\t\t\t\t  pszPropVal, ustrlen(pszPropVal)) == 0)\n+\t\t\t\t  pszPropVal, propLen) == 0)\n \t\t\tbRet = 1; \/* process message! *\/\n \t\tbreak;\n \tcase FIOP_STARTSWITH:\n \t\tif(rsCStrSzStrStartsWithCStr(stmt->d.s_propfilt.pCSCompValue,\n-\t\t\t\t  pszPropVal, ustrlen(pszPropVal)) == 0)\n+\t\t\t\t  pszPropVal, propLen) == 0)\n \t\t\tbRet = 1; \/* process message! *\/\n \t\tbreak;\n \tcase FIOP_REGEX:\n","commit_message_token_length":10,"code_token_length":266,"combined_token_length":276,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/bc1aef88eef7bb09d1c537bf150414c50abfa374","commit_message":"SCons: Disable misbehaving MSVC incremental linking\n\nFixes #77968.","code_diff":"@@ -355,6 +355,9 @@ def configure_msvc(env, vcvars_msvc_config):\n         else:\n             env.AppendUnique(CCFLAGS=[\"\/MD\"])\n \n+    # MSVC incremental linking is broken and _increases_ link time (GH-77968).\n+    env.Append(LINKFLAGS=[\"\/INCREMENTAL:NO\"])\n+\n     if env[\"arch\"] == \"x86_32\":\n         env[\"x86_libtheora_opt_vc\"] = True\n \n","commit_message_token_length":19,"code_token_length":164,"combined_token_length":183,"target":1}
{"commit_url":"https:\/\/github.com\/ajanata\/PretendYoureXyzzy\/commit\/dbb802bb2836639346bb9034d658ecd13a005a6a","commit_message":"delay 5ms after noticing the user has a queued message before returning it in case other messages arrive immediately thereafter","code_diff":"@@ -74,6 +74,12 @@ public class LongPollServlet extends CahServlet {\n       }\n     }\n     if (user.hasQueuedMessages()) {\n+      try {\n+        \/\/ Delay for a short while in case there will be other messages queued to be delivered.\n+        Thread.sleep(5);\n+      } catch (final InterruptedException ie) {\n+        \/\/ pass\n+      }\n       final Collection<QueuedMessage> msgs = user.getNextQueuedMessages(MAX_MESSAGES_PER_POLL);\n       \/\/ just in case...\n       if (msgs.size() > 0) {\n","commit_message_token_length":22,"code_token_length":208,"combined_token_length":230,"target":0}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/ca598d5f2ab988935a5b882b44122cbfa5fd99f5","commit_message":"fsmonitor: force index write after full scan\n\nfsmonitor currently only flags the index as dirty if the extension is being\nadded or removed. This is a performance optimization that recognizes you can\nstat() a lot of files in less time than it takes to write out an updated index.\n\nThis patch makes a small enhancement and flags the index dirty if we end up\nhaving to stat() all files and scan the entire working directory.  The assumption\nbeing that must be expensive or you would not have turned on the feature.\n\nSigned-off-by: Ben Peart <benpeart@microsoft.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -185,6 +185,9 @@ void refresh_fsmonitor(struct index_state *istate)\n \t\tfor (i = 0; i < istate->cache_nr; i++)\n \t\t\tistate->cache[i]->ce_flags &= ~CE_FSMONITOR_VALID;\n \n+\t\t\/* If we're going to check every file, ensure we save the results *\/\n+\t\tistate->cache_changed |= FSMONITOR_CHANGED;\n+\n \t\tif (istate->untracked)\n \t\t\tistate->untracked->use_fsmonitor = 0;\n \t}\n","commit_message_token_length":153,"code_token_length":158,"combined_token_length":311,"target":1}
{"commit_url":"https:\/\/github.com\/pybliometrics-dev\/pybliometrics\/commit\/7571b026f765fba3b558a9a55f71305ac8becc06","commit_message":"Hash mechanism for search filenames in cache (#40)","code_diff":"@@ -1,6 +1,7 @@\n import os\n import sys\n import xml.etree.ElementTree as ET\n+import hashlib\n \n from scopus.utils import download, ns\n from scopus.scopus_api import ScopusAbstract\n@@ -55,10 +56,7 @@ class ScopusSearch(object):\n         The EIDs are stored as a property named EIDS.\n         \"\"\"\n \n-        qfile = os.path.join(SCOPUS_SEARCH_DIR,\n-                             # We need to remove \/ in a DOI here so we can save\n-                             # it as a file.\n-                             query.replace('\/', '_slash_'))\n+        qfile = os.path.join(SCOPUS_SEARCH_DIR, hashlib.md5(query).hexdigest())\n \n         if os.path.exists(qfile) and not refresh:\n             with open(qfile) as f:\n","commit_message_token_length":12,"code_token_length":346,"combined_token_length":358,"target":0}
{"commit_url":"https:\/\/github.com\/ClickHouse\/ClickHouse\/commit\/6c8fc4cd11966cb96571fe3a2dfaac6b82cbd03c","commit_message":"fix hashjoin debug code condition","code_diff":"@@ -495,7 +495,7 @@ size_t HashJoin::getTotalByteCount() const\n     if (!data)\n         return 0;\n \n-#ifdef NDEBUG\n+#ifndef NDEBUG\n     size_t debug_blocks_allocated_size = 0;\n     for (const auto & block : data->blocks)\n         debug_blocks_allocated_size += block.allocatedBytes();\n","commit_message_token_length":6,"code_token_length":120,"combined_token_length":126,"target":1}
{"commit_url":"https:\/\/github.com\/lvmteam\/lvm2\/commit\/0dc73f7dbd49308b1864444d1decfaf8e10d2d81","commit_message":"dmeventd: time scaling for status retry\n\nIn normal case it's too slow to wait 1 second for default.\nSo rather start with short time and increase sleep between status\nretesting.","code_diff":"@@ -1649,7 +1649,7 @@ int monitor_dev_for_events(struct cmd_context *cmd, const struct logical_volume\n \n \t\t\/* Check [un]monitor results *\/\n \t\t\/* Try a couple times if pending, but not forever... *\/\n-\t\tfor (i = 0; i < 10; i++) {\n+\t\tfor (i = 0; i < 40; i++) {\n \t\t\tpending = 0;\n \t\t\tmonitored = seg->segtype->ops->target_monitored(seg, &pending);\n \t\t\tif (pending ||\n@@ -1659,7 +1659,7 @@ int monitor_dev_for_events(struct cmd_context *cmd, const struct logical_volume\n \t\t\t\t\t\t lv->vg->name, lv->name, monitor ? \"\" : \"un\");\n \t\t\telse\n \t\t\t\tbreak;\n-\t\t\tsleep(1);\n+\t\t\tusleep(10000 * i);\n \t\t}\n \n \t\tif (r)\n","commit_message_token_length":43,"code_token_length":259,"combined_token_length":302,"target":1}
{"commit_url":"https:\/\/github.com\/eswartz\/emul\/commit\/625aad49b6c434f5cb5673abd73b0d0e2a0f4a03","commit_message":"Limit scale amount for button bar  -- this helps with low res screens","code_diff":"@@ -98,17 +98,11 @@ class ImageBar extends Composite implements IImageBar {\n \t\t\t\taxis = cursize.y;\r\n \t\t\t\tsize = cursize.x;\r\n \t\t\t}\r\n-\t\t\t\/*\r\n-\t\t\tsize = Math.max(minsize, maxsize);\r\n-\t\t\tif (size < 16)\r\n-\t\t\t\tsize = 16;\r\n-\t\t\telse if (size > 128)\r\n-\t\t\t\tsize = 128;\r\n-\t\t\t*\/\r\n \t\t\t\/\/System.out.println(axis+\",\"+whint+\",\"+hhint);\r\n \t\t\tif (smoothResize) {\r\n \t\t\t\taxis = axis * 7 \/ 8;\r\n \t\t\t\tsize = axis \/ num;\r\n+\t\t\t\tsize = Math.min(48, size);\r\n \t\t\t\tif (isHorizontal) {\r\n \t\t\t\t\tw = axis;\r\n \t\t\t\t\th = size;\r\n@@ -132,7 +126,6 @@ class ImageBar extends Composite implements IImageBar {\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t\t\r\n-\t\t\t\r\n \t\t\treturn new Point(w, h);\r\n \t\t}\r\n \r\n","commit_message_token_length":14,"code_token_length":328,"combined_token_length":342,"target":0}
{"commit_url":"https:\/\/github.com\/NetworkManager\/NetworkManager\/commit\/60cc501a665ad7fcfedcdba37557860458dca9a9","commit_message":"device: optimize hashtable usage for shared_ips\n\nNo point ins storing \"TRUE\" as value in the @shared_ips hash\ntable. That forces glib to allocate a separate storage for the\nvalue. Just use g_hash_table_add() instead.","code_diff":"@@ -4672,10 +4672,7 @@ reserve_shared_ip (NMDevice *self, NMSettingIPConfig *s_ip4, NMPlatformIP4Addres\n \t\t\t}\n \t\t}\n \t\tnm_platform_ip4_address_set_addr (address, start + count, 24);\n-\n-\t\tg_hash_table_insert (shared_ips,\n-\t\t                     GUINT_TO_POINTER (address->address),\n-\t\t                     GUINT_TO_POINTER (TRUE));\n+\t\tg_hash_table_add (shared_ips, GUINT_TO_POINTER (address->address));\n \t}\n \n \treturn TRUE;\n","commit_message_token_length":58,"code_token_length":208,"combined_token_length":266,"target":1}
{"commit_url":"https:\/\/github.com\/zaproxy\/zaproxy\/commit\/d8530b229d8a7e14f49e091f2129c45c4a77d2a0","commit_message":"Issue: 1415 Fixed file uploads > 128k","code_diff":"@@ -20,6 +20,7 @@\n  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\r\n  *\/\r\n \/\/ ZAP: 2012\/03\/15 Changed to use byte[] instead of StringBuffer.\r\n+\/\/ ZAP: 2014\/11\/26 Issue: 1415 Fixed file uploads > 128k\r\n \r\n package org.parosproxy.paros.network;\r\n \r\n@@ -114,15 +115,12 @@ public abstract class HttpBody {\n \t\t}\r\n \t\t\r\n \t\tif (pos + len > body.length) {\r\n-\t\t\tbyte[] newBody = new byte[body.length+len];\r\n-\t\t\tSystem.arraycopy(body, 0, newBody, 0, body.length);\r\n-\t\t\tSystem.arraycopy(buf, 0, newBody, body.length, len);\r\n+\t\t\tbyte[] newBody = new byte[pos + len];\r\n+\t\t\tSystem.arraycopy(body, 0, newBody, 0, pos);\r\n \t\t\tbody = newBody;\r\n-\t\t\tpos = body.length;\r\n-\t\t} else {\r\n-\t\t\tSystem.arraycopy(buf, 0, body, pos, len);\r\n-\t\t\tpos += len;\r\n \t\t}\r\n+\t\tSystem.arraycopy(buf, 0, body, pos, len);\r\n+\t\tpos += len;\r\n \t\t\r\n         cachedString = null;\r\n \t}\r\n","commit_message_token_length":11,"code_token_length":381,"combined_token_length":392,"target":0}
{"commit_url":"https:\/\/github.com\/matplotlib\/matplotlib\/commit\/1e32084fccdd8e027790a5afe0680a87454f5f89","commit_message":"Avoid quadratic behavior when accumulating stickies.\n\nWhen plotting 10000 lines, this gives a ~10% improvement in performance.","code_diff":"@@ -2405,12 +2405,12 @@ class _AxesBase(martist.Artist):\n \n         if self.use_sticky_edges and (self._xmargin or self._ymargin):\n             stickies = [artist.sticky_edges for artist in self.get_children()]\n-            x_stickies = sum([sticky.x for sticky in stickies], [])\n-            y_stickies = sum([sticky.y for sticky in stickies], [])\n+            x_stickies = np.array([x for sticky in stickies for x in sticky.x])\n+            y_stickies = np.array([y for sticky in stickies for y in sticky.y])\n             if self.get_xscale().lower() == 'log':\n-                x_stickies = [xs for xs in x_stickies if xs > 0]\n+                x_stickies = x_stickies[x_stickies > 0]\n             if self.get_yscale().lower() == 'log':\n-                y_stickies = [ys for ys in y_stickies if ys > 0]\n+                y_stickies = y_stickies[y_stickies > 0]\n         else:  # Small optimization.\n             x_stickies, y_stickies = [], []\n \n","commit_message_token_length":27,"code_token_length":468,"combined_token_length":495,"target":1}
{"commit_url":"https:\/\/github.com\/lilab-bcb\/pegasus\/commit\/ea71f48ca1083d9baaf963d9743f05d9e372ad9c","commit_message":"Updated threshold for adjusting resolution from 1000 to 100000","code_diff":"@@ -464,7 +464,7 @@ def cluster(\n     cluster_func = globals()[algo]\n \n     cluster_func(**kwargs) # clustering\n-    if data.shape[0] < 1000 and data.obs[class_label].value_counts().min() == 1:\n+    if data.shape[0] < 100000 and data.obs[class_label].value_counts().min() == 1:\n         new_resol = resolution\n         while new_resol > 0.0:\n             new_resol -= 0.1\n","commit_message_token_length":10,"code_token_length":170,"combined_token_length":180,"target":0}
{"commit_url":"https:\/\/github.com\/finos\/waltz\/commit\/9533421c3825e6d3fbc3717a5d57b92b5af369cf","commit_message":"CORS: cache OPT requests\n\n#3474","code_diff":"@@ -203,10 +203,9 @@ public class Main {\n     private void enableCORS() {\n \n         options(\"\/*\", (req, res) -> {\n-\n             handleCORSHeader(req, res, \"Access-Control-Request-Headers\", \"Access-Control-Allow-Headers\");\n             handleCORSHeader(req, res, \"Access-Control-Request-Method\", \"Access-Control-Allow-Methods\");\n-\n+            res.header(\"Access-Control-Max-Age\", \"600\");\n             return \"OK\";\n         });\n \n","commit_message_token_length":11,"code_token_length":194,"combined_token_length":205,"target":1}
{"commit_url":"https:\/\/github.com\/mozilla\/gecko-dev\/commit\/0391a5005094db4ee2e4c9fcd2529528ce428389","commit_message":"Bug 1289165 - Apply the optimizations in moveDenseElements to unboxed objects; r=sfink","code_diff":"@@ -568,10 +568,12 @@ MoveBoxedOrUnboxedDenseElements(JSContext* cx, JSObject* obj, uint32_t dstStart,\n         uint8_t* data = obj->as<UnboxedArrayObject>().elements();\n         size_t elementSize = UnboxedTypeSize(Type);\n \n-        if (UnboxedTypeNeedsPreBarrier(Type)) {\n+        if (UnboxedTypeNeedsPreBarrier(Type) &&\n+            JS::shadow::Zone::asShadowZone(obj->zone())->needsIncrementalBarrier())\n+        {\n             \/\/ Trigger pre barriers on any elements we are overwriting. See\n-            \/\/ moveDenseElements::moveDenseElements. No post barrier is needed\n-            \/\/ as only whole cell post barriers are used with unboxed objects.\n+            \/\/ NativeObject::moveDenseElements. No post barrier is needed as\n+            \/\/ only whole cell post barriers are used with unboxed objects.\n             for (size_t i = 0; i < length; i++)\n                 obj->as<UnboxedArrayObject>().triggerPreBarrier<Type>(dstStart + i);\n         }\n","commit_message_token_length":24,"code_token_length":408,"combined_token_length":432,"target":1}
{"commit_url":"https:\/\/github.com\/llvm-mirror\/llvm\/commit\/ffc893deb7106ee0c541b44ef41506a32e1e8350","commit_message":"FunctionAttrs: Skip it if the effective SCC (ignoring optnone functions) is empty\n\nMinor optimization but mostly simplifies my debugging so I'm not dealing\nwith empty SCCNodeSets while investigating issues in this optimization.\n\ngit-svn-id: https:\/\/llvm.org\/svn\/llvm-project\/llvm\/trunk@304597 91177308-0d34-0410-b5e6-96231b3b80d8","code_diff":"@@ -1188,6 +1188,10 @@ static bool runImpl(CallGraphSCC &SCC, AARGetterT AARGetter) {\n     SCCNodes.insert(F);\n   }\n \n+  \/\/ Skip it if the SCC only contains optnone functions.\n+  if (SCCNodes.empty())\n+    return Changed;\n+\n   Changed |= addArgumentReturnedAttrs(SCCNodes);\n   Changed |= addReadAttrs(SCCNodes, AARGetter);\n   Changed |= addArgumentAttrs(SCCNodes);\n","commit_message_token_length":107,"code_token_length":152,"combined_token_length":259,"target":1}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/bcf3ce7b39529eb5421aa45d6336c9b12f8594c0","commit_message":"sd-ipv4ll: speed up bind() in the same way as for dhcp","code_diff":"@@ -38,7 +38,7 @@ int arp_network_bind_raw_socket(int index, union sockaddr_union *link) {\n         assert(index > 0);\n         assert(link);\n \n-        s = socket(PF_PACKET, SOCK_DGRAM | SOCK_CLOEXEC | SOCK_NONBLOCK, htons(ETH_P_ARP));\n+        s = socket(PF_PACKET, SOCK_DGRAM | SOCK_CLOEXEC | SOCK_NONBLOCK, 0);\n         if (s < 0)\n                 return -errno;\n \n","commit_message_token_length":19,"code_token_length":199,"combined_token_length":218,"target":1}
{"commit_url":"https:\/\/github.com\/sfu-fas\/coursys\/commit\/2862eede07f0f1ffcf9fd7cceea1a9d5218c6d42","commit_message":"avoid charset problem in MySQL by sidestepping","code_diff":"@@ -69,11 +69,11 @@ class CASBackend(object):\n     def authenticate(self, ticket, service):\n         \"\"\"Verifies CAS ticket and gets or creates User object\"\"\"\n \n-        username = _verify(ticket, service)\n+        username = _verify(ticket, service).lower()\n         if not username:\n             return None\n         try:\n-            user = User.objects.get(username__iexact=username)\n+            user = User.objects.get(username=username)\n         except User.DoesNotExist:\n             # user will have an \"unusable\" password\n             user = User.objects.create_user(username, '')\n","commit_message_token_length":10,"code_token_length":256,"combined_token_length":266,"target":0}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/e5bebbc9ffda8b4fa5a786842ea24f0a3ea0763a","commit_message":"Fix unnecessary break when calculating the height of visible lines\n\nThis break causes the minsize to be smaller than expected, and then\nthe size keeps increasing by one line to cover all visible lines.\nThis can cause performance issues when there are many visible lines.","code_diff":"@@ -290,9 +290,6 @@ void Label::_update_visible() {\n \tint last_line = MIN(lines_rid.size(), lines_visible + lines_skipped);\n \tfor (int64_t i = lines_skipped; i < last_line; i++) {\n \t\tminsize.height += TS->shaped_text_get_size(lines_rid[i]).y + line_spacing;\n-\t\tif (minsize.height > (get_size().height - style->get_minimum_size().height + line_spacing)) {\n-\t\t\tbreak;\n-\t\t}\n \t}\n }\n \n","commit_message_token_length":53,"code_token_length":156,"combined_token_length":209,"target":1}
{"commit_url":"https:\/\/github.com\/openSUSE\/salt\/commit\/873bd7d143e7176f306488a14c478e3a7964a9b6","commit_message":"it has just been one of those nights!","code_diff":"@@ -486,7 +486,7 @@ def create_self_signed_cert(\n     _write_cert_to_database(tls_dir, cert)\n \n     ret = \"Created Private Key: {0}\/{1}\/certs\/{2}.key\\n\".format(\n-        _cert_base_path,\n+        _cert_base_path(),\n         tls_dir,\n         CN)\n     ret.join('Created Certificate: {0}\/{1}\/certs\/{2}.crt\"'.format(\n","commit_message_token_length":9,"code_token_length":164,"combined_token_length":173,"target":0}
{"commit_url":"https:\/\/github.com\/plctlab\/llvm-project\/commit\/addf51ddde4f06a471b3c40ef8300d6c88919185","commit_message":"Make the split function use StringRef::split.  llvm-svn: 208723","code_diff":"@@ -54,25 +54,9 @@ static inline bool isEnabled(const StringRef Feature) {\n \/\/\/ Split - Splits a string of comma separated items in to a vector of strings.\n \/\/\/\n static void Split(std::vector<std::string> &V, const StringRef S) {\n-  if (S.empty())\n-    return;\n-\n-  \/\/ Start at beginning of string.\n-  size_t Pos = 0;\n-  while (true) {\n-    \/\/ Find the next comma\n-    size_t Comma = S.find(',', Pos);\n-    \/\/ If no comma found then the rest of the string is used\n-    if (Comma == std::string::npos) {\n-      \/\/ Add string to vector\n-      V.push_back(S.substr(Pos));\n-      break;\n-    }\n-    \/\/ Otherwise add substring to vector\n-    V.push_back(S.substr(Pos, Comma - Pos));\n-    \/\/ Advance to next item\n-    Pos = Comma + 1;\n-  }\n+  SmallVector<StringRef, 2> Tmp;\n+  S.split(Tmp, \",\", -1, false \/* KeepEmpty *\/);\n+  V.assign(Tmp.begin(), Tmp.end());\n }\n \n \/\/\/ Join a vector of strings to a string with a comma separating each element.\n","commit_message_token_length":20,"code_token_length":359,"combined_token_length":379,"target":0}
{"commit_url":"https:\/\/github.com\/frappe\/frappe\/commit\/aeec01c7f933615c126fd7b6a1a832c54f8d230a","commit_message":"perf(Scheduling): add jitter to job scheduling\n\nAddresses #19007","code_diff":"@@ -2,7 +2,8 @@\n # License: MIT. See LICENSE\n \n import json\n-from datetime import datetime\n+from datetime import datetime, timedelta\n+from random import randint\n \n import click\n from croniter import croniter\n@@ -110,7 +111,12 @@ class ScheduledJobType(Document):\n \t\t# immediately, even when it's meant to be daily.\n \t\t# A dynamic fallback like current time might miss the scheduler interval and job will never start.\n \t\tlast_execution = get_datetime(self.last_execution or self.creation)\n-\t\treturn croniter(self.cron_format, last_execution).get_next(datetime)\n+\t\tnext_execution = croniter(self.cron_format, last_execution).get_next(datetime)\n+\n+\t\tjitter = 0\n+\t\tif self.frequency in (\"Hourly Long\", \"Daily Long\"):\n+\t\t\tjitter = randint(1, 600)\n+\t\treturn next_execution + timedelta(seconds=jitter)\n \n \tdef execute(self):\n \t\tself.scheduler_log = None\n","commit_message_token_length":20,"code_token_length":294,"combined_token_length":314,"target":1}
{"commit_url":"https:\/\/github.com\/ClickHouse\/ClickHouse\/commit\/eeb78bf29172112ee832e2e46ed75271961717d9","commit_message":"slightly optimize very short queries with LowCardinality","code_diff":"@@ -43,11 +43,13 @@ MergeTreeReaderStream::MergeTreeReaderStream(\n         \/\/\/ If the end of range is inside the block, we will need to read it too.\n         if (right_mark < marks_count && marks_loader.getMark(right_mark).offset_in_decompressed_block > 0)\n         {\n-            while (right_mark < marks_count\n-                && marks_loader.getMark(right_mark).offset_in_compressed_file == marks_loader.getMark(mark_range.end).offset_in_compressed_file)\n+            auto indices = ext::range(right_mark, marks_count);\n+            auto it = std::upper_bound(indices.begin(), indices.end(), right_mark, [this](size_t i, size_t j)\n             {\n-                ++right_mark;\n-            }\n+                return marks_loader.getMark(i).offset_in_compressed_file < marks_loader.getMark(j).offset_in_compressed_file;\n+            });\n+\n+            right_mark = (it == indices.end() ? marks_count : *it);\n         }\n \n         size_t mark_range_bytes;\n","commit_message_token_length":11,"code_token_length":442,"combined_token_length":453,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/3a67eb26754d779b308d478e92b5d12252c70a5a","commit_message":"Disable a prohibitively slow code branch when reparenting nodes","code_diff":"@@ -1762,6 +1762,8 @@ bool SceneTreeDock::_check_node_path_recursive(Node *p_root_node, Variant &r_var\n \t\t\t}\n \t\t} break;\n \n+\/\/ FIXME: This approach causes a significant performance regression, see GH-84910.\n+#if 0\n \t\tcase Variant::OBJECT: {\n \t\t\tResource *resource = Object::cast_to<Resource>(r_variant);\n \t\t\tif (!resource) {\n@@ -1792,6 +1794,7 @@ bool SceneTreeDock::_check_node_path_recursive(Node *p_root_node, Variant &r_var\n \t\t\t}\n \t\t\tbreak;\n \t\t};\n+#endif\n \n \t\tdefault: {\n \t\t}\n","commit_message_token_length":13,"code_token_length":204,"combined_token_length":217,"target":1}
{"commit_url":"https:\/\/github.com\/llvm-mirror\/clang\/commit\/007983114f448135906abddea70250d463fcd13a","commit_message":"[objc-gnustep2] Use isalnum instead of a less efficient and nonportable equivalent.\n\nPatch by Hans Wennborg!\n\ngit-svn-id: https:\/\/llvm.org\/svn\/llvm-project\/cfe\/trunk@332964 91177308-0d34-0410-b5e6-96231b3b80d8","code_diff":"@@ -1054,7 +1054,7 @@ class CGObjCGNUstep2 : public CGObjCGNUstep {\n       StringName = \".objc_str_\";\n       for (int i=0,e=Str.size() ; i<e ; ++i) {\n         char c = Str[i];\n-        if (isalpha(c) || isnumber(c))\n+        if (isalnum(c))\n           StringName += c;\n         else if (c == ' ')\n           StringName += '_';\n","commit_message_token_length":90,"code_token_length":180,"combined_token_length":270,"target":1}
{"commit_url":"https:\/\/github.com\/openssl\/openssl\/commit\/1d2a18dc5a3b3363e17db5af8b6b0273856ac077","commit_message":"Multiblock corrupted pointer fix\n\nOpenSSL 1.0.2 introduced the \"multiblock\" performance improvement. This\nfeature only applies on 64 bit x86 architecture platforms that support AES\nNI instructions. A defect in the implementation of \"multiblock\" can cause\nOpenSSL's internal write buffer to become incorrectly set to NULL when\nusing non-blocking IO. Typically, when the user application is using a\nsocket BIO for writing, this will only result in a failed connection.\nHowever if some other BIO is used then it is likely that a segmentation\nfault will be triggered, thus enabling a potential DoS attack.\n\nCVE-2015-0290\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Andy Polyakov <appro@openssl.org>","code_diff":"@@ -804,7 +804,7 @@ int ssl3_write_bytes(SSL *s, int type, const void *buf_, int len)\n \n             i = ssl3_write_pending(s, type, &buf[tot], nw);\n             if (i <= 0) {\n-                if (i < 0) {\n+                if (i < 0 && (!s->wbio || !BIO_should_retry(s->wbio))) {\n                     OPENSSL_free(wb->buf);\n                     wb->buf = NULL;\n                 }\n","commit_message_token_length":177,"code_token_length":239,"combined_token_length":416,"target":1}
{"commit_url":"https:\/\/github.com\/opencv\/opencv\/commit\/c526705f4f72fbd5720fb739ae7f01eb2d45d7b4","commit_message":"[cv::transform] Enable CV_SIMD for the 16U case on AArch64.","code_diff":"@@ -1537,7 +1537,7 @@ transform_8u( const uchar* src, uchar* dst, const float* m, int len, int scn, in\n static void\n transform_16u( const ushort* src, ushort* dst, const float* m, int len, int scn, int dcn )\n {\n-#if CV_SIMD && !defined(__aarch64__) && !defined(_M_ARM64)\n+#if CV_SIMD\n     if( scn == 3 && dcn == 3 )\n     {\n         int x = 0;\n","commit_message_token_length":20,"code_token_length":154,"combined_token_length":174,"target":1}
{"commit_url":"https:\/\/github.com\/tonlabs\/TVM-Compiler\/commit\/c48affb81f979a9eb554208bd63a978228928b4c","commit_message":"Removed dead variable \"hadError\" in ParseReturnStmt.  llvm-svn: 41079","code_diff":"@@ -324,8 +324,7 @@ Sema::ParseReturnStmt(SourceLocation ReturnLoc, ExprTy *rex) {\n   \/\/ function return.  \n   AssignmentCheckResult result = CheckSingleAssignmentConstraints(lhsType, \n                                                                   RetValExp);\n-  bool hadError = false;\n-  \n+\n   \/\/ decode the result (notice that extensions still return a type).\n   switch (result) {\n   case Compatible:\n@@ -334,7 +333,6 @@ Sema::ParseReturnStmt(SourceLocation ReturnLoc, ExprTy *rex) {\n     Diag(ReturnLoc, diag::err_typecheck_return_incompatible, \n          lhsType.getAsString(), rhsType.getAsString(),\n          RetValExp->getSourceRange());\n-    hadError = true;\n     break;\n   case PointerFromInt:\n     \/\/ check for null pointer constant (C99 6.3.2.3p3)\n","commit_message_token_length":23,"code_token_length":330,"combined_token_length":353,"target":0}
{"commit_url":"https:\/\/github.com\/hfinkel\/llvm-project-cxxjit\/commit\/daea6f1e8496bb72fe6455b650f65952f2461f34","commit_message":"LivePhysRegs: Follow-up to r303937  We may have situations in which a superregister is reserved and not added to liveins, so we have to add the subregisters.  llvm-svn: 303949","code_diff":"@@ -230,7 +230,7 @@ void llvm::computeLiveIns(LivePhysRegs &LiveRegs,\n     \/\/ Skip the register if we are about to add one of its super registers.\n     bool ContainsSuperReg = false;\n     for (MCSuperRegIterator SReg(Reg, &TRI); SReg.isValid(); ++SReg) {\n-      if (LiveRegs.contains(*SReg)) {\n+      if (LiveRegs.contains(*SReg) && !MRI.isReserved(*SReg)) {\n         ContainsSuperReg = true;\n         break;\n       }\n","commit_message_token_length":52,"code_token_length":178,"combined_token_length":230,"target":0}
{"commit_url":"https:\/\/github.com\/M66B\/BackPackTrackII\/commit\/b94ec8f6216ae6f2a45d5487534e80905ed1eda9","commit_message":"Log forecast.io API calls \/ response time","code_diff":"@@ -92,6 +92,9 @@ public class ForecastIO {\n             if (code != HttpsURLConnection.HTTP_OK)\n                 throw new IOException(\"HTTP error \" + urlConnection.getResponseCode());\n \n+            Log.i(TAG, \"API calls=\" + urlConnection.getHeaderField(\"X-Forecast-API-Calls\") +\n+                    \" reponse time=\" + urlConnection.getHeaderField(\"X-Response-Time\"));\n+\n             \/\/ Get response\n             BufferedReader br = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n             StringBuilder json = new StringBuilder();\n","commit_message_token_length":9,"code_token_length":237,"combined_token_length":246,"target":0}
{"commit_url":"https:\/\/github.com\/llvm-mirror\/clang\/commit\/ac39f135ea0d45bc37d1154fa8380d46aac0547d","commit_message":"Minor optimization to r177367 to treat a module with missing dependencies as out-of-date rather than missing.\n\n\ngit-svn-id: https:\/\/llvm.org\/svn\/llvm-project\/cfe\/trunk@177369 91177308-0d34-0410-b5e6-96231b3b80d8","code_diff":"@@ -1789,7 +1789,7 @@ ASTReader::ReadControlBlock(ModuleFile &F,\n                            ClientLoadCapabilities)) {\n         case Failure: return Failure;\n           \/\/ If we have to ignore the dependency, we'll have to ignore this too.\n-        case Missing: return Missing;\n+        case Missing:\n         case OutOfDate: return OutOfDate;\n         case VersionMismatch: return VersionMismatch;\n         case ConfigurationMismatch: return ConfigurationMismatch;\n","commit_message_token_length":79,"code_token_length":190,"combined_token_length":269,"target":1}
{"commit_url":"https:\/\/github.com\/SORMAS-Foundation\/SORMAS-Project\/commit\/31e1c111c766308e74e1f04d3e4e8ead3840bbdc","commit_message":"#12256 - [Users] Loop of loading when updating the user role of a specific user","code_diff":"@@ -923,7 +923,7 @@ public class UserFacadeEjb implements UserFacade {\n \t\tSet<User> possibleUsersForAvailableFacilities = new HashSet<>();\n \n \t\tpossibleFacilities.forEach(facility -> {\n-\t\t\tif (!facility.getUuid().equals(FacilityDto.NONE_FACILITY_UUID) && !facility.getUuid().equals(FacilityDto.OTHER_FACILITY_UUID)) {\n+\t\t\tif (!FacilityDto.NONE_FACILITY_UUID.equals(facility.getUuid()) && !FacilityDto.OTHER_FACILITY_UUID.equals(facility.getUuid())) {\n \t\t\t\tpossibleUsersForAvailableFacilities.addAll(userService.getFacilityUsersOfHospital(facility));\n \t\t\t}\n \t\t});\n","commit_message_token_length":19,"code_token_length":230,"combined_token_length":249,"target":1}
{"commit_url":"https:\/\/github.com\/jhu-lcsr\/costar_plan\/commit\/316342f745cb1b3d45f6f63372071d092bd71b73","commit_message":"100 epoch resnet training run repetitions [3, 3, 3, 3] initial_filters 96","code_diff":"@@ -75,10 +75,11 @@ def grasp_model_resnet(clear_view_image_op,\n     model = ResNet(input_shape=combined_input_shape,\n                    classes=1,\n                    block='bottleneck',\n-                   repetitions=[3, 4, 6, 3],\n+                   repetitions=[3, 3, 3, 3],\n                    include_top=include_top,\n                    input_tensor=combined_input_data,\n                    activation='sigmoid',\n+                   initial_filters=96,\n                    dropout=dropout_rate)\n     return model\n \n","commit_message_token_length":22,"code_token_length":309,"combined_token_length":331,"target":0}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/ba431a9306f6f018488b6d19854ea40fa528f205","commit_message":"Fix volumetric fog memory leak on resize","code_diff":"@@ -4011,6 +4011,9 @@ void RendererSceneRenderRD::_volumetric_fog_erase(RenderBuffers *rb) {\n \tRD::get_singleton()->free(rb->volumetric_fog->prev_light_density_map);\n \tRD::get_singleton()->free(rb->volumetric_fog->light_density_map);\n \tRD::get_singleton()->free(rb->volumetric_fog->fog_map);\n+\tRD::get_singleton()->free(rb->volumetric_fog->density_map);\n+\tRD::get_singleton()->free(rb->volumetric_fog->light_map);\n+\tRD::get_singleton()->free(rb->volumetric_fog->emissive_map);\n \n \tif (rb->volumetric_fog->fog_uniform_set.is_valid() && RD::get_singleton()->uniform_set_is_valid(rb->volumetric_fog->fog_uniform_set)) {\n \t\tRD::get_singleton()->free(rb->volumetric_fog->fog_uniform_set);\n","commit_message_token_length":9,"code_token_length":298,"combined_token_length":307,"target":1}
{"commit_url":"https:\/\/github.com\/llvm-mirror\/clang\/commit\/f78232dcbf734a1c7e42ae60b58c9bbe14b64516","commit_message":"Replace use of SmallVector::back + pop_back with pop_back_val\n\nI ran across an instance where the value was being loaded\nout via back, then immediately popped.  Since pop_back_val\nis more efficient at this (it moves out), replace this \ninstance.\n\n\ngit-svn-id: https:\/\/llvm.org\/svn\/llvm-project\/cfe\/trunk@316015 91177308-0d34-0410-b5e6-96231b3b80d8","code_diff":"@@ -361,8 +361,7 @@ static bool hasThrowOutNonThrowingFunc(SourceLocation &OpLoc, CFG *BodyCFG) {\n   SmallVector<CFGBlock *, 16> Stack;\n   Stack.push_back(&BodyCFG->getEntry());\n   while (!Stack.empty()) {\n-    CFGBlock *CurBlock = Stack.back();\n-    Stack.pop_back();\n+    CFGBlock *CurBlock = Stack.pop_back_val();\n \n     unsigned ID = CurBlock->getBlockID();\n     ThrowState CurState = States[ID];\n","commit_message_token_length":120,"code_token_length":155,"combined_token_length":275,"target":1}
{"commit_url":"https:\/\/github.com\/microsoft\/kafka-connect-cosmosdb\/commit\/768cbc5d9363a09ce95995607d504d69a968d1ac","commit_message":"MINOR: minor performance and readability improvement for logging","code_diff":"@@ -69,7 +69,7 @@ public class CosmosDBSinkTask extends SinkTask {\n                 logger.debug(\"Writing record, value type: {}\", record.value().getClass().getName());\r\n                 logger.debug(\"Key Schema: {}\", record.keySchema());\r\n                 logger.debug(\"Value schema: {}\", record.valueSchema());\r\n-                logger.trace(\"Value.toString(): {}\", record.value() != null ? record.value().toString() : \"<null>\");\r\n+                logger.trace(\"Value.toString(): {}\", record.value());\r\n \r\n                 Object recordValue;\r\n                 if (record.value() instanceof Struct) {\r\n","commit_message_token_length":11,"code_token_length":265,"combined_token_length":276,"target":1}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/7a40a95eb4f79517750eb2bcd81342c25c6db406","commit_message":"refs: use skip_prefix() in ref_is_hidden()\n\nThis is shorter, makes the logic a bit easier to follow, and is\nperhaps a bit faster too.\n\nThe logic is to make the final decision only when \"subject\" is there,\nits early part matches \"match\", and the match is at the slash\nboundary (or the whole thing).\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nReviewed-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -1066,7 +1066,7 @@ int ref_is_hidden(const char *refname, const char *refname_full)\n \t\tconst char *match = hide_refs->items[i].string;\n \t\tconst char *subject;\n \t\tint neg = 0;\n-\t\tint len;\n+\t\tconst char *p;\n \n \t\tif (*match == '!') {\n \t\t\tneg = 1;\n@@ -1081,10 +1081,9 @@ int ref_is_hidden(const char *refname, const char *refname_full)\n \t\t}\n \n \t\t\/* refname can be NULL when namespaces are used. *\/\n-\t\tif (!subject || !starts_with(subject, match))\n-\t\t\tcontinue;\n-\t\tlen = strlen(match);\n-\t\tif (!subject[len] || subject[len] == '\/')\n+\t\tif (subject &&\n+\t\t    skip_prefix(subject, match, &p) &&\n+\t\t    (!*p || *p == '\/'))\n \t\t\treturn !neg;\n \t}\n \treturn 0;\n","commit_message_token_length":144,"code_token_length":286,"combined_token_length":430,"target":1}
{"commit_url":"https:\/\/github.com\/openssl\/openssl\/commit\/65d62488b8c808350f440d2276034f5223b391ad","commit_message":"openssl enc: Don't unbuffer stdin\n\n - unbuffer causes single-byte reads from stdin and poor performance\n\nFixes #3281\nCLA: trivial\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https:\/\/github.com\/openssl\/openssl\/pull\/3299)","code_diff":"@@ -291,7 +291,6 @@ int enc_main(int argc, char **argv)\n     buff = app_malloc(EVP_ENCODE_LENGTH(bsize), \"evp buffer\");\n \n     if (infile == NULL) {\n-        unbuffer(stdin);\n         in = dup_bio_in(informat);\n     } else\n         in = bio_open_default(infile, 'r', informat);\n","commit_message_token_length":94,"code_token_length":138,"combined_token_length":232,"target":1}
{"commit_url":"https:\/\/github.com\/natcap\/invest\/commit\/ed86f3d779d9565f823334dc037e19d2f50dc145","commit_message":"use the Python ternary operator for lulc_time. see #BITBUCKET-3798","code_diff":"@@ -451,11 +451,7 @@ def execute(args):\n             if lulc_key not in lulc_path_dict:\n                 continue\n             lulc_path = lulc_path_dict[lulc_key]\n-\n-            if lulc_key == '_c':\n-                lulc_time = 'current'\n-            else:\n-                lulc_time = 'future'\n+            lulc_time = 'current' if lulc_key == '_c' else 'future'\n \n             # get the area of a cur\/fut pixel\n             lulc_pixel_size = pygeoprocessing.get_raster_info(\n","commit_message_token_length":23,"code_token_length":287,"combined_token_length":310,"target":0}
{"commit_url":"https:\/\/github.com\/cherrypy\/cheroot\/commit\/9f94ba37e739a25ad531cca8ca0030352d8fa484","commit_message":"Better message when test_states fails due to slow autoreload","code_diff":"@@ -267,7 +267,9 @@ class ServerStateTests(helper.CPWebCase):\n             cherrypy._cpserver.wait_for_occupied_port(host, port)\n \n             self.getPage(\"\/start\")\n-            self.assert_(float(self.body) > start)\n+            if not (float(self.body) > start):\n+                raise AssertionError(\"start time %s not greater than %s\" %\n+                                     (float(self.body), start))\n         finally:\n             # Shut down the spawned process\n             self.getPage(\"\/exit\")\n","commit_message_token_length":13,"code_token_length":262,"combined_token_length":275,"target":0}
{"commit_url":"https:\/\/github.com\/matplotlib\/matplotlib\/commit\/1e6352ab60409d936c8073343329abf3ebbe750b","commit_message":"Special case degree-1 Bezier curves.\n\nThis greatly speeds up extent computation for the common case of\npolylines.  (We were previously only special-casing the degree-0 case.)","code_diff":"@@ -287,10 +287,10 @@ class BezierSegment:\n             0`\n         \"\"\"\n         n = self.degree\n+        if n <= 1:\n+            return np.array([]), np.array([])\n         Cj = self.polynomial_coefficients\n         dCj = np.arange(1, n+1)[:, None] * Cj[1:]\n-        if len(dCj) == 0:\n-            return np.array([]), np.array([])\n         dims = []\n         roots = []\n         for i, pi in enumerate(dCj.T):\n","commit_message_token_length":43,"code_token_length":241,"combined_token_length":284,"target":1}
{"commit_url":"https:\/\/github.com\/tonlabs\/TVM-Compiler\/commit\/eb23add2ad0426edabf8221f60627af086b7b980","commit_message":"Add a simpler version of is_regular_file.  llvm-svn: 184764","code_diff":"@@ -448,6 +448,15 @@ bool is_regular_file(file_status status);\n \/\/\/          platform specific error_code.\n error_code is_regular_file(const Twine &path, bool &result);\n \n+\/\/\/ @brief Simpler version of is_regular_file for clients that don't need to\n+\/\/\/        differentiate between an error and false.\n+inline bool is_regular_file(const Twine &Path) {\n+  bool Result;\n+  if (is_regular_file(Path, Result))\n+    return false;\n+  return Result;\n+}\n+\n \/\/\/ @brief Does this status represent something that exists but is not a\n \/\/\/        directory, regular file, or symlink?\n \/\/\/\n","commit_message_token_length":21,"code_token_length":195,"combined_token_length":216,"target":0}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/244d2f07b49e3470d679fdd0f6ebd24fac8d5dc7","commit_message":"fs-util: add shortcut for chase_symlinks() when it is called like open(O_PATH)\n\nLet's optimize things, and let the kernel chase the paths if none of the\nfeatures chase_symlinks() offers are actually used.","code_diff":"@@ -634,6 +634,16 @@ int chase_symlinks(const char *path, const char *original_root, unsigned flags,\n         if (noop_root(original_root))\n                 original_root = NULL;\n \n+        if (!original_root && !ret && (flags & (CHASE_NONEXISTENT|CHASE_NO_AUTOFS|CHASE_SAFE|CHASE_OPEN)) == CHASE_OPEN) {\n+                \/* Shortcut the CHASE_OPEN case if the caller isn't interested in the actual path and has no root set\n+                 * and doesn't care about any of the other special features we provide either. *\/\n+                r = open(path, O_PATH|O_CLOEXEC);\n+                if (r < 0)\n+                        return -errno;\n+\n+                return r;\n+        }\n+\n         if (original_root) {\n                 r = path_make_absolute_cwd(original_root, &root);\n                 if (r < 0)\n","commit_message_token_length":53,"code_token_length":411,"combined_token_length":464,"target":1}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/2523c4be855af84460e70ab5c8375534f8cefed5","commit_message":"dir.c: avoid stat() in valid_cached_dir()\n\nstat() may follow a symlink and return stat data of the link's target\ninstead of the link itself. We are concerned about the link itself.\n\nIt's kind of hard to demonstrate the bug. I think when path->buf is a\nsymlink, we most likely find that its target's stat data does not\nmatch our cached one, which means we ignore the cache and fall back to\nslow path.\n\nThis is performance issue, not correctness (though we could still\ncatch it by verifying test-dump-untracked-cache. The less unlikely\ncase is, link target stat data matches the cached version and we\nincorrectly go fast path, ignoring real data on disk. A test for this\nmay involve manipulating stat data, which may be not portable.\n\nSigned-off-by: Nguy\u1ec5n Th\u00e1i Ng\u1ecdc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -1739,7 +1739,7 @@ static int valid_cached_dir(struct dir_struct *dir,\n \t *\/\n \trefresh_fsmonitor(istate);\n \tif (!(dir->untracked->use_fsmonitor && untracked->valid)) {\n-\t\tif (stat(path->len ? path->buf : \".\", &st)) {\n+\t\tif (lstat(path->len ? path->buf : \".\", &st)) {\n \t\t\tinvalidate_directory(dir->untracked, untracked);\n \t\t\tmemset(&untracked->stat_data, 0, sizeof(untracked->stat_data));\n \t\t\treturn 0;\n","commit_message_token_length":240,"code_token_length":171,"combined_token_length":411,"target":1}
{"commit_url":"https:\/\/github.com\/codecov\/codecov-api\/commit\/e4f121f6be2a780e70b7170b1330497e0caf6ec4","commit_message":"fix: last uploaded for components over time (#511)","code_diff":"@@ -116,5 +116,5 @@ class ComponentMeasurements:\n \n     @cached_property\n     def last_uploaded(self):\n-        if len(self.raw_measurements) > 1:\n+        if len(self.raw_measurements) > 0:\n             return self.raw_measurements[-1][\"timestamp_bin\"]\n","commit_message_token_length":11,"code_token_length":118,"combined_token_length":129,"target":0}
{"commit_url":"https:\/\/github.com\/FenixEdu\/fenixedu-academic\/commit\/878ada650ac2dee055dc10e8805e31d141c945fb","commit_message":"teachers with ASC category have 1.5 credits for 1 hour.","code_diff":"@@ -100,7 +100,8 @@ public class TeacherService extends TeacherService_Base {\n                 Teacher teacher = degreeTeachingService.getProfessorship().getTeacher();                \n                 Category teacherCategory = teacher.getCategoryForCreditsByPeriod(executionPeriod);\n                 if (teacherCategory != null \n-                        && teacherCategory.getCode().equals(\"AST\") && teacherCategory.getLongName().equals(\"ASSISTENTE\")\n+                        && ((teacherCategory.getCode().equals(\"AST\") && teacherCategory.getLongName().equals(\"ASSISTENTE\")) ||\n+                                (teacherCategory.getCode().equals(\"ASC\") && teacherCategory.getLongName().equals(\"ASSISTENTE CONVIDADO\")))\n                         && degreeTeachingService.getShift().getTipo().equals(ShiftType.TEORICA)) {                    \n                     double hours = degreeTeachingService.getShift().hours();\n                     credits += (hours * (degreeTeachingService.getPercentage().doubleValue() \/ 100)) * 1.5;                    \n","commit_message_token_length":14,"code_token_length":478,"combined_token_length":492,"target":0}
{"commit_url":"https:\/\/github.com\/opencv\/opencv\/commit\/3bc1b5396258a85c6b3078b176cab3f7c8210c3a","commit_message":"Added YUV conversion fix\n\nFixed OpenCV issue #18878","code_diff":"@@ -104,6 +104,7 @@ inline int dstChannels(int code)\n             return 4;\n \n         case COLOR_BGRA2BGR: case COLOR_RGBA2BGR: case COLOR_RGB2BGR:\n+        case COLOR_YUV2RGB: case COLOR_YUV2BGR: case COLOR_RGB2YUV: case COLOR_BGR2YUV:\n         case COLOR_BGR5652BGR: case COLOR_BGR5552BGR: case COLOR_BGR5652RGB: case COLOR_BGR5552RGB:\n         case COLOR_GRAY2BGR:\n         case COLOR_YUV2BGR_NV21: case COLOR_YUV2RGB_NV21: case COLOR_YUV2BGR_NV12: case COLOR_YUV2RGB_NV12:\n","commit_message_token_length":14,"code_token_length":252,"combined_token_length":266,"target":1}
{"commit_url":"https:\/\/github.com\/apache\/hbase\/commit\/3e7b90ac6d808c171ea988d8d32ef998146713ac","commit_message":"HBASE-19445 PerformanceEvaluation NPE processing split policy option","code_diff":"@@ -406,7 +406,7 @@ public class PerformanceEvaluation extends Configured implements Tool {\n     if (opts.replicas != DEFAULT_OPTS.replicas) {\n       desc.setRegionReplication(opts.replicas);\n     }\n-    if (opts.splitPolicy != DEFAULT_OPTS.splitPolicy) {\n+    if (opts.splitPolicy != null && !opts.splitPolicy.equals(DEFAULT_OPTS.splitPolicy)) {\n       desc.setRegionSplitPolicyClassName(opts.splitPolicy);\n     }\n     return desc;\n","commit_message_token_length":15,"code_token_length":166,"combined_token_length":181,"target":0}
{"commit_url":"https:\/\/github.com\/TISUnion\/ChatBridge\/commit\/929d48ffdec18853741f44d3d70a34eafeb464fe","commit_message":"less status log spam in cqhttp bot","code_diff":"@@ -51,10 +51,9 @@ class CQBot(websocket.WebSocketApp):\n \t\t\tif chatClient is None:\n \t\t\t\treturn\n \t\t\tdata = json.loads(message)\n-\t\t\tif 'status' in data:\n-\t\t\t\tself.logger.info('CoolQ return status {}'.format(data['status']))\n-\t\t\telif data['post_type'] == 'message' and data['message_type'] == 'group':\n+\t\t\tif data['post_type'] == 'message' and data['message_type'] == 'group':\n \t\t\t\tif data['anonymous'] is None and data['group_id'] == self.config.react_group_id:\n+\t\t\t\t\tself.logger.info('QQ chat message: {}'.format(data))\n \t\t\t\t\targs = data['raw_message'].split(' ')\n \n \t\t\t\t\tif len(args) == 1 and args[0] == '!!help':\n","commit_message_token_length":9,"code_token_length":251,"combined_token_length":260,"target":0}
{"commit_url":"https:\/\/github.com\/git\/git\/commit\/4c30d50402c17d2569151820b92cea110ad1d240","commit_message":"rev-list: disable object\/refname ambiguity check with --stdin\n\nThis is the \"rev-list\" analogue to 25fba78 (cat-file:\ndisable object\/refname ambiguity check for batch mode,\n2013-07-12).  Like cat-file, \"rev-list --stdin\" may read a\nlarge number of sha1 object names, and the warning check\nintroduces a significant slow-down.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>","code_diff":"@@ -1541,6 +1541,10 @@ static void read_revisions_from_stdin(struct rev_info *revs,\n {\n \tstruct strbuf sb;\n \tint seen_dashdash = 0;\n+\tint save_warning;\n+\n+\tsave_warning = warn_on_object_refname_ambiguity;\n+\twarn_on_object_refname_ambiguity = 0;\n \n \tstrbuf_init(&sb, 1000);\n \twhile (strbuf_getwholeline(&sb, stdin, '\\n') != EOF) {\n@@ -1562,7 +1566,9 @@ static void read_revisions_from_stdin(struct rev_info *revs,\n \t}\n \tif (seen_dashdash)\n \t\tread_pathspec_from_stdin(revs, &sb, prune);\n+\n \tstrbuf_release(&sb);\n+\twarn_on_object_refname_ambiguity = save_warning;\n }\n \n static void add_grep(struct rev_info *revs, const char *ptn, enum grep_pat_token what)\n","commit_message_token_length":138,"code_token_length":280,"combined_token_length":418,"target":1}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/496ae8c84b2d3622bc767a727e3582e2b6bcffcd","commit_message":"resolved: Recover from slow DNS responses\n\nWhen DNS is unreliable temporarily, the current implementation will\nnever improve resend behavior again and switch DNS servers only late\n(current maximum timeout is 5 seconds).\n\nWe can improve this by biasing the resend_timeout back to the current\nRTT when a successful response was received. Next time, a timeout is hit\non this server, it will switch to the next server faster.\n\nFixes: #5953","code_diff":"@@ -304,7 +304,10 @@ void dns_server_packet_received(DnsServer *s, int protocol, DnsServerFeatureLeve\n         if (s->max_rtt < rtt) {\n                 s->max_rtt = rtt;\n                 s->resend_timeout = CLAMP(s->max_rtt * 2, DNS_TIMEOUT_MIN_USEC, DNS_TIMEOUT_MAX_USEC);\n-        }\n+        } else if (s->resend_timeout > rtt)\n+                \/* If we received the packet faster than the resend_timeout, bias\n+                 * the resend_timeout back to the rtt. *\/\n+                s->resend_timeout = CLAMP((2 * s->resend_timeout + rtt) \/ 3, DNS_TIMEOUT_MIN_USEC, DNS_TIMEOUT_MAX_USEC);\n }\n \n void dns_server_packet_lost(DnsServer *s, int protocol, DnsServerFeatureLevel level, usec_t usec) {\n","commit_message_token_length":99,"code_token_length":340,"combined_token_length":439,"target":1}
{"commit_url":"https:\/\/github.com\/SORMAS-Foundation\/SORMAS-Project\/commit\/5752ebd20a0c9e308984349c1382c696fb0e365d","commit_message":"#6204 - reduce non needed complexity for all queries that use event user filter with health facility user","code_diff":"@@ -396,6 +396,7 @@ public class EventService extends AbstractCoreAdoService<Event> {\n \t\t\t\tfilter = CriteriaBuilderHelper\n \t\t\t\t\t.or(cb, filter, cb.equal(eventJoins.getLocation().get(Location.DISTRICT), currentUser.getHealthFacility().getDistrict()));\n \t\t\t}\n+\t\t\tbreak;\n \t\tcase LABORATORY:\n \t\t\tfinal Subquery<Long> sampleSubQuery = cq.subquery(Long.class);\n \t\t\tfinal Root<Sample> sampleRoot = sampleSubQuery.from(Sample.class);\n","commit_message_token_length":20,"code_token_length":155,"combined_token_length":175,"target":1}
{"commit_url":"https:\/\/github.com\/the-virtual-brain\/tvb-multiscale\/commit\/fffaff3a5a41167c30d222ad3d005f3d7e5f3493","commit_message":"Corrected time computation (-1 time step) for ANNarchy interfaces","code_diff":"@@ -92,13 +92,14 @@ class ANNarchyOutputInterface(ANNarchyInterface):\n \n     def get_proxy_data(self):\n         data = self.proxy()\n+        # Only for ANNarchy, we start from time = dt instead for time = 0\n         if len(data[0]) == 2:\n             # This will work for multimeters:\n-            self.times = np.array([np.round(data[0][0] \/ self.dt),  # start_time_step\n-                                   np.round(data[0][1] \/ self.dt)]).astype(\"i\")\n+            self.times = np.array([np.round(data[0][0] \/ self.dt) - 1,  # start_time_step\n+                                   np.round(data[0][1] \/ self.dt) - 1]).astype(\"i\")\n         else:\n             # This will work for spike recorders:\n-            time = np.int(np.round(self.time\/self.dt))\n+            time = np.int(np.round(self.time\/self.dt)) - 1\n             times = self.times.copy()\n             if time > times[1]:\n                 times[0] = times[1] + 1\n","commit_message_token_length":13,"code_token_length":490,"combined_token_length":503,"target":0}
{"commit_url":"https:\/\/github.com\/llvm-mirror\/llvm\/commit\/a9fbbb48bcc56354681fc2ead593a9861bfec699","commit_message":"Small optimization: once the size is know, we don't have to call fillCurWord.\n\ngit-svn-id: https:\/\/llvm.org\/svn\/llvm-project\/llvm\/trunk@221891 91177308-0d34-0410-b5e6-96231b3b80d8","code_diff":"@@ -227,8 +227,8 @@ public:\n   bool AtEndOfStream() {\n     if (BitsInCurWord != 0)\n       return false;\n-    if (Size != 0 && Size == NextChar)\n-      return true;\n+    if (Size != 0)\n+      return Size == NextChar;\n     fillCurWord();\n     return BitsInCurWord == 0;\n   }\n","commit_message_token_length":76,"code_token_length":124,"combined_token_length":200,"target":1}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/a6149b93afeb4e7b37e1313920ac2e0a91ff1c08","commit_message":"process-util: trivial optimization","code_diff":"@@ -181,10 +181,10 @@ int is_kernel_thread(pid_t pid) {\n         bool eof;\n         FILE *f;\n \n-        if (pid == 0)\n+        if (pid == 0 || pid == 1) \/* pid 1, and we ourselves certainly aren't a kernel thread *\/\n                 return 0;\n \n-        assert(pid > 0);\n+        assert(pid > 1);\n \n         p = procfs_file_alloca(pid, \"cmdline\");\n         f = fopen(p, \"re\");\n","commit_message_token_length":6,"code_token_length":198,"combined_token_length":204,"target":1}
{"commit_url":"https:\/\/github.com\/gisalgs\/indexing\/commit\/eab148f7f6aa5e52e212014521a030109383a3c6","commit_message":"Circular range query of point k-D trees","code_diff":"@@ -1,7 +1,7 @@\n \"\"\"\r\n k-D trees, Part 2b.\r\n \r\n-Circular range query of k-D trees\r\n+Circular range query of point k-D trees\r\n \r\n Contact:\r\n Ningchuan Xiao\r\n@@ -18,7 +18,7 @@ def range_query_circular(t, p, r, found, depth=0):\n     Circular range search for points within a radius of r around p\r\n \r\n     Input\r\n-      t: node of a k-D tree\r\n+      t: node of a point k-D tree\r\n       p: a Point object around which query is performed\r\n       found: a list to hold points found, declared outside\r\n       depth: the current depth on the k-D tree, mainly used internally\r\n","commit_message_token_length":10,"code_token_length":221,"combined_token_length":231,"target":0}
{"commit_url":"https:\/\/github.com\/trinodb\/trino\/commit\/f49b3205de5705a082efaebce246ff3da2589171","commit_message":"Avoid using regular expressions for string replacement","code_diff":"@@ -173,7 +173,7 @@ public class LdapAuthenticator\n \n     private static String replaceUser(String pattern, String user)\n     {\n-        return pattern.replaceAll(\"\\\\$\\\\{USER}\", user);\n+        return pattern.replace(\"${USER}\", user);\n     }\n \n     private static void closeContext(DirContext context)\n","commit_message_token_length":7,"code_token_length":110,"combined_token_length":117,"target":0}
{"commit_url":"https:\/\/github.com\/rsyslog\/rsyslog\/commit\/123143d0f1f5e99b04f963c5d785a8f8918decdc","commit_message":"optimize: another round of removing isdigit()","code_diff":"@@ -362,7 +362,7 @@ processDataRcvd(tcps_sess_t *pThis, char c, struct syslogTime *stTime, time_t tt\n \tISOBJ_TYPE_assert(pThis, tcps_sess);\n \n \tif(pThis->inputState == eAtStrtFram) {\n-\t\tif(pThis->bSuppOctetFram && isdigit((int) c)) {\n+\t\tif(pThis->bSuppOctetFram && c >= '0' && c <= '9') {\n \t\t\tpThis->inputState = eInOctetCnt;\n \t\t\tpThis->iOctetsRemain = 0;\n \t\t\tpThis->eFraming = TCP_FRAMING_OCTET_COUNTING;\n@@ -373,7 +373,7 @@ processDataRcvd(tcps_sess_t *pThis, char c, struct syslogTime *stTime, time_t tt\n \t}\n \n \tif(pThis->inputState == eInOctetCnt) {\n-\t\tif(isdigit(c)) {\n+\t\tif(c >= '0' && c <= '9') { \/* isdigit() the faster way *\/\n \t\t\tpThis->iOctetsRemain = pThis->iOctetsRemain * 10 + c - '0';\n \t\t} else { \/* done with the octet count, so this must be the SP terminator *\/\n \t\t\tDBGPRINTF(\"TCP Message with octet-counter, size %d.\\n\", pThis->iOctetsRemain);\n","commit_message_token_length":10,"code_token_length":392,"combined_token_length":402,"target":1}
{"commit_url":"https:\/\/github.com\/SORMAS-Foundation\/SORMAS-Project\/commit\/0386b83f646e78828e86cbc066c0835e238f499a","commit_message":"#9054 added missing null check","code_diff":"@@ -175,17 +175,20 @@ public abstract class AbstractView extends VerticalLayout implements View {\n \t\t\tnewState = newState.substring(0, paramsIndex);\n \t\t}\n \n-\t\tString urlParams = Arrays.stream(criteriaList)\n-\t\t\t\t.filter(Objects::nonNull)\n-\t\t\t\t.map(BaseCriteria::toUrlParams)\n-\t\t\t\t.filter(params -> !DataHelper.isNullOrEmpty(params))\n-\t\t\t\t.collect(Collectors.joining(\"&\"));\n-\n-\t\tif (urlParams.length() > 0) {\n-\t\t\tif (newState.charAt(newState.length() - 1) != '\/') {\n-\t\t\t\tnewState += \"\/\";\n+\t\tif (criteriaList != null)\n+\t\t{\n+\t\t\tString urlParams = Arrays.stream(criteriaList)\n+\t\t\t\t\t.filter(Objects::nonNull)\n+\t\t\t\t\t.map(BaseCriteria::toUrlParams)\n+\t\t\t\t\t.filter(params -> !DataHelper.isNullOrEmpty(params))\n+\t\t\t\t\t.collect(Collectors.joining(\"&\"));\n+\n+\t\t\tif (urlParams.length() > 0) {\n+\t\t\t\tif (newState.charAt(newState.length() - 1) != '\/') {\n+\t\t\t\t\tnewState += \"\/\";\n+\t\t\t\t}\n+\t\t\t\tnewState += \"?\" + urlParams;\n \t\t\t}\n-\t\t\tnewState += \"?\" + urlParams;\n \t\t}\n \n \t\treturn newState;\n","commit_message_token_length":7,"code_token_length":420,"combined_token_length":427,"target":1}
{"commit_url":"https:\/\/github.com\/rsyslog\/rsyslog\/commit\/b9dcd4e434265821695865e18e9ca14fdc51c3f1","commit_message":"bugfix: imudp could do 0-size calloc if no listeners are active at late stage\n\nThis was found by clang static analyzer and is extremely unlikely to\nhappen in practice, due to checks in earlier stages. But we did not\ninvestigate that in detail but rather add checks to be on the safe\nside. Note that this is not performance critical as it happens just\non startup.","code_diff":"@@ -4,7 +4,7 @@\n  * NOTE: read comments in module-template.h to understand how this file\n  *       works!\n  *\n- * Copyright 2007-2014 Rainer Gerhards and Adiscon GmbH.\n+ * Copyright 2007-2015 Rainer Gerhards and Adiscon GmbH.\n  *\n  * This file is part of rsyslog.\n  *\n@@ -747,6 +747,13 @@ rsRetVal rcvMainLoop(struct wrkrInfo_s *pWrkr)\n \tnLstn = 0;\n \tfor(lstn = lcnfRoot ; lstn != NULL ; lstn = lstn->next)\n \t\t++nLstn;\n+\n+\tif(nLstn == 0) {\n+\t\terrmsg.LogError(errno, RS_RET_ERR,\n+\t\t\t\"imudp error: we have 0 listeners, terminating\"\n+\t\t\t\"worker thread\");\n+\t\tABORT_FINALIZE(RS_RET_ERR);\n+\t}\n \tCHKmalloc(udpEPollEvt = calloc(nLstn, sizeof(struct epoll_event)));\n \n #if defined(EPOLL_CLOEXEC) && defined(HAVE_EPOLL_CREATE1)\n","commit_message_token_length":88,"code_token_length":327,"combined_token_length":415,"target":1}
{"commit_url":"https:\/\/github.com\/ElucidataInc\/ElMaven\/commit\/b4583dbb174a13617ff592a4599a099dd3389519","commit_message":"Remove unnecessary vector copy\n\nTemporary matrices being used in `find_path` method are attempted\nto be copied into ObiWarp's class matrices at the end. But these\nmatrices themselves are not being used anywhere else. The copy\noperation was causing a crash due to attempts to free unallocated\nmemory. The copy operations have been removed to prevent this\ncrash.\n\nIssue: #859","code_diff":"@@ -1301,10 +1301,5 @@ void DynProg::find_path(MatF& smat, VecF &gap_penalty, int minimize, float diag_\n     _traceback(tmp_tb, smat, optimal_m, optimal_n, tmp_tbpath, _mCoords, _nCoords, _sCoords); \n     int _equivLastInd = _mCoords.dim()-1;\n     _bestScore = tmp_asmat(_mCoords[_equivLastInd],_nCoords[_equivLastInd]);\n-\n-    _asmat.take(tmp_asmat);\n-    _tb.take(tmp_tb);\n-    _tbpath.take(tmp_tbpath);\n-    _gapmat.take(tmp_gapmat);\n }\n \n","commit_message_token_length":89,"code_token_length":217,"combined_token_length":306,"target":1}
{"commit_url":"https:\/\/github.com\/NixOS\/nix\/commit\/0f977bf91e29192d7f0c0f9cad16351bad7cd137","commit_message":"Remove a useless debug message in filetransfer.cc\n\nRemove the `verify TLS: Nix CA file = 'blah'` message that Nix used to print when fetching anything as it's both useless (`libcurl` prints the same info in its logs) and misleading (gives the impression that a new TLS connection is being established which might not be the case because of multiplexing. See #7011 )","code_diff":"@@ -322,7 +322,6 @@ struct curlFileTransfer : public FileTransfer\n             }\n \n             if (request.verifyTLS) {\n-                debug(\"verify TLS: Nix CA file = '%s'\", settings.caFile);\n                 if (settings.caFile != \"\")\n                     curl_easy_setopt(req, CURLOPT_CAINFO, settings.caFile.c_str());\n             } else {\n","commit_message_token_length":91,"code_token_length":185,"combined_token_length":276,"target":1}
{"commit_url":"https:\/\/github.com\/GeoStat-Framework\/GSTools\/commit\/c88f7bab0e309f7a32c1a61786ba340245d215a2","commit_message":"emcee: vectorize sampling since all ln_pdfs accept numpy arrays","code_diff":"@@ -86,7 +86,7 @@ class RNG:\n             self.random.rand(nwalkers).reshape((nwalkers, 1)) * sample_around\n         )\n         # initialize the sampler\n-        sampler = mc.EnsembleSampler(nwalkers, 1, ln_pdf)\n+        sampler = mc.EnsembleSampler(nwalkers, 1, ln_pdf, vectorize=True)\n         # burn in phase with saving of last position\n         initial_state = State(init_guess, copy=True)\n         initial_state.random_state = self.random.get_state()\n","commit_message_token_length":18,"code_token_length":207,"combined_token_length":225,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/97085358ce154f34d6ab571c35529a8b0e063513","commit_message":"[Editor] Prevent unnecessary editor theme regeneration on unrelated system setting update.","code_diff":"@@ -670,7 +670,10 @@ void EditorNode::_notification(int p_what) {\n \n \t\t\tcallable_mp(this, &EditorNode::_begin_first_scan).call_deferred();\n \n-\t\t\tDisplayServer::get_singleton()->set_system_theme_change_callback(callable_mp(this, &EditorNode::_update_theme).bind(false));\n+\t\t\tlast_dark_mode_state = DisplayServer::get_singleton()->is_dark_mode();\n+\t\t\tlast_system_accent_color = DisplayServer::get_singleton()->get_accent_color();\n+\t\t\tlast_system_base_color = DisplayServer::get_singleton()->get_base_color();\n+\t\t\tDisplayServer::get_singleton()->set_system_theme_change_callback(callable_mp(this, &EditorNode::_check_system_theme_changed));\n \n \t\t\t\/* DO NOT LOAD SCENES HERE, WAIT FOR FILE SCANNING AND REIMPORT TO COMPLETE *\/\n \t\t} break;\n","commit_message_token_length":14,"code_token_length":270,"combined_token_length":284,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/66d27df12f5b710ac5f569144944c1db0c86c96b","commit_message":"Fix 3D sky update performance regression","code_diff":"@@ -1172,7 +1172,7 @@ void RendererSceneSkyRD::setup(RendererSceneEnvironmentRD *p_env, RID p_render_b\n \t\t\t\t}\n \t\t\t}\n \t\t\t\/\/ Check whether the directional_light_buffer changes\n-\t\t\tbool light_data_dirty = true;\n+\t\t\tbool light_data_dirty = false;\n \n \t\t\t\/\/ Light buffer is dirty if we have fewer or more lights\n \t\t\t\/\/ If we have fewer lights, make sure that old lights are disabled\n","commit_message_token_length":7,"code_token_length":134,"combined_token_length":141,"target":1}
{"commit_url":"https:\/\/github.com\/gem\/oq-engine\/commit\/be813aa4a76c3689f45aca18c7b93aa64a446c0b","commit_message":"Fixed misprint making counting the ruptures ultra-slow in event_based","code_diff":"@@ -403,7 +403,7 @@ class EventBasedCalculator(base.HazardCalculator):\n         with self.monitor('counting ruptures', measuremem=True):\n             nrups = parallel.Starmap( # weighting the heavy sources\n                 count_ruptures, [(src,) for src in sources\n-                                 if src.code == b'AMSC'],\n+                                 if src.code in b'AMSC'],\n                 progress=logging.debug).reduce()\n             # NB: multifault sources must be considered light to avoid a large\n             # data transfer, even if .count_ruptures can be slow\n","commit_message_token_length":15,"code_token_length":279,"combined_token_length":294,"target":1}
{"commit_url":"https:\/\/github.com\/gpg\/libgcrypt\/commit\/3841b23c0ccb24d555b7570083bba958e3126d26","commit_message":"_gcry_burn_stack: use memset for clearing memory\n\n* src\/misc.c (__gcry_burn_stack) [HAVE_VLA]: Use 'memset' for clearing\nstack.\n--\n\nPatch switches stacking burning to use faster memset instead of\nwipememory. Memset is accessed through volatile function pointer,\nso that compiler will not optimize away the call.\n\nSigned-off-by: Jussi Kivilinna <jussi.kivilinna@iki.fi>","code_diff":"@@ -501,11 +501,12 @@ void\n __gcry_burn_stack (unsigned int bytes)\n {\n #ifdef HAVE_VLA\n+    static void *(*volatile memset_ptr)(void *, int, size_t) = (void *)memset;\n     \/* (bytes == 0 ? 1 : bytes) == (!bytes + bytes) *\/\n     unsigned int buflen = ((!bytes + bytes) + 63) & ~63;\n-    volatile char buf[buflen];\n+    char buf[buflen];\n \n-    wipememory (buf, sizeof buf);\n+    memset_ptr (buf, 0, sizeof buf);\n #else\n     volatile char buf[64];\n \n","commit_message_token_length":120,"code_token_length":188,"combined_token_length":308,"target":1}
{"commit_url":"https:\/\/github.com\/gammapy\/gammapy\/commit\/a12b15dc5195a5b329c68478fc50026e556d7945","commit_message":"Modify wrapper for doubling time to return the doubling coordinates as an astropy.Time instead of an astropy.units.Quanity","code_diff":"@@ -439,10 +439,12 @@ def compute_lightcurve_doublingtime(lightcurve, flux_quantity=\"flux\"):\n             energies[1:],\n             doubling_dict[\"doubling\"],\n             doubling_dict[\"doubling_err\"],\n-            doubling_dict[\"doubling_coord\"],\n+            lightcurve.geom.axes[\"time\"].reference_time\n+            + doubling_dict[\"doubling_coord\"],\n             doubling_dict[\"halving\"],\n             doubling_dict[\"halving_err\"],\n-            doubling_dict[\"halving_coord\"],\n+            lightcurve.geom.axes[\"time\"].reference_time\n+            + doubling_dict[\"halving_coord\"],\n         ],\n         names=(\n             \"min_energy\",\n","commit_message_token_length":27,"code_token_length":329,"combined_token_length":356,"target":0}
{"commit_url":"https:\/\/github.com\/systemd\/systemd\/commit\/426bb5ddb8ff122d3e08b0480466718b68485e70","commit_message":"bus-proxyd: optimize replies if they're not requested\n\nIf a caller does not request a reply, dont send it. This skips message\ncreation and speeds up NO_REPLY_EXPECTED cases. Note that sd-bus still\nhandles this case internally, but if we handle it in bus-proxyd, we can\nskip the whole message creation step.","code_diff":"@@ -405,6 +405,9 @@ static int synthetic_reply_return_strv(sd_bus_message *call, char **l) {\n \n         assert(call);\n \n+        if (call->header->flags & BUS_MESSAGE_NO_REPLY_EXPECTED)\n+                return 0;\n+\n         r = sd_bus_message_new_method_return(call, &m);\n         if (r < 0)\n                 return synthetic_reply_method_errno(call, r, NULL);\n","commit_message_token_length":83,"code_token_length":184,"combined_token_length":267,"target":1}
{"commit_url":"https:\/\/github.com\/godotengine\/godot\/commit\/27a6ab457b15e448147ab97ab6b23e835ac9e741","commit_message":"Turn off physics and 3d navigation servers in the Project Manager.\n\nCopying the editor behaviour of deactivating these servers we're not\nusing, to reduce CPU load.","code_diff":"@@ -52,6 +52,7 @@\n #include \"scene\/gui\/texture_rect.h\"\n #include \"scene\/main\/window.h\"\n #include \"servers\/display_server.h\"\n+#include \"servers\/navigation_server_3d.h\"\n \n static inline String get_project_key_from_path(const String &dir) {\n \treturn dir.replace(\"\/\", \"::\");\n@@ -2387,6 +2388,11 @@ ProjectManager::ProjectManager() {\n \t\tEditorSettings::create();\n \t}\n \n+\t\/\/ Turn off some servers we aren't going to be using in the Project Manager.\n+\tNavigationServer3D::get_singleton()->set_active(false);\n+\tPhysicsServer3D::get_singleton()->set_active(false);\n+\tPhysicsServer2D::get_singleton()->set_active(false);\n+\n \tEditorSettings::get_singleton()->set_optimize_save(false); \/\/just write settings as they came\n \n \t{\n","commit_message_token_length":37,"code_token_length":257,"combined_token_length":294,"target":1}
{"commit_url":"https:\/\/github.com\/matplotlib\/matplotlib\/commit\/318a5894fd4958ce9cdaaed9ac81e1143cbc37a6","commit_message":"Disable sticky edge accumulation if no autoscaling.\n\nIf there's no margin to be added, we don't need sticky edges, but if\nautoscaling is off, we _also_ don't need the sticky edges. This saves a\nlot of time when plotting many artists, like in #12542.","code_diff":"@@ -2403,7 +2403,9 @@ class _AxesBase(martist.Artist):\n         if tight is not None:\n             self._tight = bool(tight)\n \n-        if self.use_sticky_edges and (self._xmargin or self._ymargin):\n+        if self.use_sticky_edges and (\n+                (self._xmargin and scalex and self._autoscaleXon) or\n+                (self._ymargin and scaley and self._autoscaleYon)):\n             stickies = [artist.sticky_edges for artist in self.get_children()]\n             x_stickies = sum([sticky.x for sticky in stickies], [])\n             y_stickies = sum([sticky.y for sticky in stickies], [])\n","commit_message_token_length":66,"code_token_length":284,"combined_token_length":350,"target":1}
{"commit_url":"https:\/\/github.com\/mikf\/gallery-dl\/commit\/d29fb940982e0b8def3cfe8583eae7276f807c83","commit_message":"[bunkr] use 'media-files' servers for m4v and mov files (#2925)","code_diff":"@@ -81,7 +81,7 @@ class BunkrAlbumExtractor(LolisafeAlbumExtractor):\n         for file in files:\n             name = file[\"name\"]\n             cdn = file[\"cdn\"]\n-            if name.endswith(\".mp4\"):\n+            if name.endswith((\".mp4\", \".m4v\", \".mov\")):\n                 cdn = cdn.replace(\"\/\/cdn\", \"\/\/media-files\")\n             file[\"file\"] = cdn + \"\/\" + name\n \n","commit_message_token_length":23,"code_token_length":201,"combined_token_length":224,"target":0}
{"commit_url":"https:\/\/github.com\/ClickHouse\/ClickHouse\/commit\/3e700e854d6a1620bf80da5340206e1ec691b22a","commit_message":"cancel merges before acquiring lock for truncate","code_diff":"@@ -35,6 +35,10 @@ namespace ErrorCodes\n     extern const int TABLE_IS_READ_ONLY;\n }\n \n+namespace ActionLocks\n+{\n+    extern const StorageActionBlockType PartsMerge;\n+}\n \n static DatabasePtr tryGetDatabase(const String & database_name, bool if_exists)\n {\n@@ -202,7 +206,15 @@ BlockIO InterpreterDropQuery::executeToTableImpl(ContextPtr context_, ASTDropQue\n \n             table->checkTableCanBeDropped();\n \n-            auto table_lock = table->lockExclusively(context_->getCurrentQueryId(), context_->getSettingsRef().lock_acquire_timeout);\n+            TableExclusiveLockHolder table_lock;\n+            \/\/\/ We don't need this lock for ReplicatedMergeTree\n+            if (!table->supportsReplication())\n+            {\n+                \/\/\/ And for simple MergeTree we can stop merges before acquiring the lock\n+                auto merges_blocker = table->getActionLock(ActionLocks::PartsMerge);\n+                auto table_lock = table->lockExclusively(context_->getCurrentQueryId(), context_->getSettingsRef().lock_acquire_timeout);\n+            }\n+\n             auto metadata_snapshot = table->getInMemoryMetadataPtr();\n             \/\/\/ Drop table data, don't touch metadata\n             table->truncate(query_ptr, metadata_snapshot, context_, table_lock);\n","commit_message_token_length":10,"code_token_length":501,"combined_token_length":511,"target":1}
{"commit_url":"https:\/\/github.com\/mozilla\/gecko-dev\/commit\/783e661627ee82083e5f2a71668ade7633dfb897","commit_message":"Bug 925088 - SpiderMonkey: Micro-optimize x64's testStringTruthy. r=mjrosen","code_diff":"@@ -1057,14 +1057,11 @@ class MacroAssemblerX64 : public MacroAssemblerX86Shared\n         testl(operand.valueReg(), operand.valueReg());\n         j(truthy ? NonZero : Zero, label);\n     }\n-    \/\/ This returns the tag in ScratchReg.\n     Condition testStringTruthy(bool truthy, const ValueOperand &value) {\n         unboxString(value, ScratchReg);\n \n         Operand lengthAndFlags(ScratchReg, JSString::offsetOfLengthAndFlags());\n-        movq(lengthAndFlags, ScratchReg);\n-        shrq(Imm32(JSString::LENGTH_SHIFT), ScratchReg);\n-        testq(ScratchReg, ScratchReg);\n+        testq(lengthAndFlags, Imm32(-1 << JSString::LENGTH_SHIFT));\n         return truthy ? Assembler::NonZero : Assembler::Zero;\n     }\n \n","commit_message_token_length":27,"code_token_length":300,"combined_token_length":327,"target":1}
{"commit_url":"https:\/\/github.com\/redpanda-data\/redpanda\/commit\/6d1223d4e4b0489c0fade40a727b9633d506398a","commit_message":"kafka: Disable use of separate fetch scheduling group\n\nThis partially reverts 9a93a9c22238e145dfa9d7fe297eb494d7c5f0bf\n\nWhile the original motiviation isn't invalidated we have now found a\ncounter example where the extra fetch groups makes things worse overall.\n\n`ManyPartitionTest` fails on ARM with the extra group but passes\nwithout. With the group in use CPU util hits 100% and grinds everything\nto halt.\n\nFetch seems to be a lot slower on ARM. Hence, with the guaranteed share\nof the extra group the whole system gets affected and hits CPU limits.\n\nBecause this is incredibly hard to reason about and it wasn't the core\nfetch optimization we decided to revert back to keeping it disabled by\ndefault.\n\nWe still keep the option around as it might be useful potentially in\ncorner cases.\n\nFixes https:\/\/github.com\/redpanda-data\/redpanda\/issues\/10507","code_diff":"@@ -516,7 +516,7 @@ configuration::configuration()\n       \"use_fetch_scheduler_group\",\n       \"Use a separate scheduler group for fetch processing\",\n       {.needs_restart = needs_restart::no, .visibility = visibility::tunable},\n-      true)\n+      false)\n   , metadata_status_wait_timeout_ms(\n       *this,\n       \"metadata_status_wait_timeout_ms\",\n","commit_message_token_length":221,"code_token_length":143,"combined_token_length":364,"target":1}
{"commit_url":"https://github.com/jruby/jruby-openssl/commit/cdf525a4b567fbde8e5becfaf23936ae08db9aba","commit_message":"use Ruby runtime's STDOUT instead of Java System.err","code_diff":"@@ -871,7 +871,7 @@ public class ASN1 {\n \n             // TODO throw an exception here too?\n             if ( isDebug(context.runtime) ) {\n-                System.err.println(\"object with tag: \" + tag + \" and value: \" + val + \" and val.class: \" + val.getClass().getName() + \" and impl: \" + imp.getName());\n+                context.runtime.getOut().println(\"object with tag: \" + tag + \" and value: \" + val + \" and val.class: \" + val.getClass().getName() + \" and impl: \" + imp.getName());\n             }\n             warn(context, \"WARNING: unimplemented method called: asn1data#toASN1\");\n             return null;\n","commit_message_token_length":12,"code_token_length":270,"combined_token_length":282,"target":0}
{"commit_url":"https://github.com/ykfre/BsodSurvivor/commit/4a0b4fb9a519912bb0161371553e15b25e7c9c81","commit_message":"Add a special handling case for untyped CopyFromReg node in GetCostForDef() of ScheduleDAGRRList  llvm-svn: 173833","code_diff":"@@ -21,6 +21,7 @@\n #include \"llvm/ADT/STLExtras.h\"\n #include \"llvm/ADT/SmallSet.h\"\n #include \"llvm/ADT/Statistic.h\"\n+#include \"llvm/CodeGen/MachineRegisterInfo.h\"\n #include \"llvm/CodeGen/ScheduleHazardRecognizer.h\"\n #include \"llvm/CodeGen/SelectionDAGISel.h\"\n #include \"llvm/IR/DataLayout.h\"\n@@ -274,8 +275,17 @@ static void GetCostForDef(const ScheduleDAGSDNodes::RegDefIter &RegDefPos,\n   // the expansion of custom DAG-to-DAG patterns.\n   if (VT == MVT::Untyped) {\n     const SDNode *Node = RegDefPos.GetNode();\n-    unsigned Opcode = Node->getMachineOpcode();\n \n+    // Special handling for CopyFromReg of untyped values.\n+    if (!Node->isMachineOpcode() && Node->getOpcode() == ISD::CopyFromReg) {\n+      unsigned Reg = cast<RegisterSDNode>(Node->getOperand(1))->getReg();\n+      const TargetRegisterClass *RC = MF.getRegInfo().getRegClass(Reg);\n+      RegClass = RC->getID();\n+      Cost = 1;\n+      return;\n+    }\n+\n+    unsigned Opcode = Node->getMachineOpcode();\n     if (Opcode == TargetOpcode::REG_SEQUENCE) {\n       unsigned DstRCIdx = cast<ConstantSDNode>(Node->getOperand(0))->getZExtValue();\n       const TargetRegisterClass *RC = TRI->getRegClass(DstRCIdx);\n","commit_message_token_length":36,"code_token_length":473,"combined_token_length":509,"target":0}
{"commit_url":"https://github.com/EQEmu/Server/commit/fa50ab8a18e36518f9caaa7f66bca8fb84e63332","commit_message":"Removed a usage of Mob::DistNoRoot and used ComparativeDistance instead","code_diff":"@@ -1284,7 +1284,7 @@ void Group::BalanceMana(int32 penalty, float range, Mob* caster, int32 limit)\n \tfor(; gi < MAX_GROUP_MEMBERS; gi++)\n \t{\n \t\tif(members[gi] && (members[gi]->GetMaxMana() > 0)){\n-\t\t\tdistance = caster->DistNoRoot(*members[gi]);\n+\t\t\tdistance = ComparativeDistance(caster->GetPosition(), members[gi]->GetPosition());\n \t\t\tif(distance <= range2){\n \n \t\t\t\tmanataken_tmp = members[gi]->GetMaxMana() - members[gi]->GetMana();\n","commit_message_token_length":15,"code_token_length":173,"combined_token_length":188,"target":0}
{"commit_url":"https://github.com/tonlabs/TVM-Compiler/commit/6b16b43ef95d2ffbad889601f26786ecdbd914b4","commit_message":"Make the lifetime of the DICompileUnit we're constructing from the MDNode more clear as just for a single argument.  llvm-svn: 189294","code_diff":"@@ -2686,14 +2686,13 @@ void DwarfDebug::emitDebugInlineInfo() {\n // DW_AT_ranges_base, DW_AT_addr_base. If DW_AT_ranges is present,\n // DW_AT_low_pc and DW_AT_high_pc are not used, and vice versa.\n CompileUnit *DwarfDebug::constructSkeletonCU(const CompileUnit *CU) {\n-  DICompileUnit DIUnit(CU->getNode());\n \n   DIE *Die = new DIE(dwarf::DW_TAG_compile_unit);\n   CompileUnit *NewCU = new CompileUnit(CU->getUniqueID(), Die, CU->getNode(),\n                                        Asm, this, &SkeletonHolder);\n \n   NewCU->addLocalString(Die, dwarf::DW_AT_GNU_dwo_name,\n-                        DIUnit.getSplitDebugFilename());\n+                        DICompileUnit(CU->getNode()).getSplitDebugFilename());\n \n   // Relocate to the beginning of the addr_base section, else 0 for the\n   // beginning of the one for this compile unit.\n","commit_message_token_length":35,"code_token_length":362,"combined_token_length":397,"target":0}
{"commit_url":"https://github.com/mozillazg/pypy/commit/b5b22d0e1b0adaaefc9f6b1e059f75ed01e290d1","commit_message":"complicated the uid masking a little, avoiding to create a const larger than word size. This is relevant for generating interp-level. Well, maybe this could be avoided by generating long object calls instead of refusing.","code_diff":"@@ -8,10 +8,14 @@ def coerce(left, right):\n obj_setattr = object.__setattr__\n obj_getattribute = object.__getattribute__\n \n-MASK = sys.maxint * 2 + 2\n+MASK = sys.maxint * 2 + 1\n \n def uid(o):\n-    return (MASK + id(o)) & (MASK-1)\n+    v = id(o)\n+    if v < 0:\n+        v += MASK\n+        v += 1\n+    return v & MASK\n \n def type_err(arg, expected, v):\n    return TypeError(\"argument %s must be %s, not %s\" % (arg, expected, type(v).__name__))\n","commit_message_token_length":46,"code_token_length":205,"combined_token_length":251,"target":0}
{"commit_url":"https://github.com/ijanos/ebedke/commit/b2b49941c450848065c73342637b49a1906155e0","commit_message":"Use longer text for burgerking menu to workaround the culling of too short menus","code_diff":"@@ -16,7 +16,7 @@ def getMenu(today):\n     day = today.weekday()\n     IMG_SIZE = \"181621\"\n     if content_size_match(IMG_URL, IMG_SIZE) and day < 5:\n-        menu = burgerking_menu[day]\n+        menu = f\"Akci\u00f3s napi men\u00fc: {burgerking_menu[day]}\"\n     else:\n         menu = ''\n \n","commit_message_token_length":16,"code_token_length":142,"combined_token_length":158,"target":0}
{"commit_url":"https://github.com/netbox-community/netbox/commit/ae342a0506c627e3b23196ce49940b60b94f54f5","commit_message":"Correct delay time from 6 to 60 seconds","code_diff":"@@ -23,7 +23,7 @@ class TokenAuthentication(authentication.TokenAuthentication):\n             raise exceptions.AuthenticationFailed(\"Invalid token\")\n \n         # Update last used, but only once a minute. This reduces the write load on the db\n-        if not token.last_used or (timezone.now() - token.last_used).total_seconds() > 6:\n+        if not token.last_used or (timezone.now() - token.last_used).total_seconds() > 60:\n             # If maintenance mode is enabled, assume the database is read-only, and disable updating the token's\n             # last_used time upon authentication.\n             if get_config().MAINTENANCE_MODE:\n","commit_message_token_length":8,"code_token_length":231,"combined_token_length":239,"target":0}
{"commit_url":"https://github.com/Kolifanes/plugin.video.youtube/commit/d2d33d5de0903ad71f8db197d38685e095810544","commit_message":"[storage] cache bugfix  - dbapi2 requires microsecond on timestamp, datetime.now() trims microsecond if exact to the second. - resolve by adding 1 microsecond to timestamp if timestamp has no microseconds","code_diff":"@@ -128,6 +128,8 @@ class Storage(object):\n \n         self._open()\n         now = datetime.datetime.now()\n+        if not now.microsecond:  # now is to the second\n+            now += datetime.timedelta(microseconds=1)  # add 1 microsecond, required for dbapi2\n         query = 'REPLACE INTO %s (key,time,value) VALUES(?,?,?)' % self._table_name\n         self._execute(True, query, values=[item_id, now, _encode(item)])\n         self._optimize_item_count()\n","commit_message_token_length":47,"code_token_length":200,"combined_token_length":247,"target":0}
{"commit_url":"https://github.com/contiki-ng/cooja/commit/eac0a61b2f9a7b6b9778a022a0118b54db813f19","commit_message":"added transmission duration approximation (manchester encoding, uart-extra-bit, 19.2kbps)","code_diff":"@@ -26,7 +26,7 @@\n  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n  * SUCH DAMAGE.\n  *\n- * $Id: ContikiRadio.java,v 1.3 2006/10/02 15:18:55 fros4943 Exp $\n+ * $Id: ContikiRadio.java,v 1.4 2006/10/02 15:38:44 fros4943 Exp $\n  */\n \n package se.sics.cooja.contikimote.interfaces;\n@@ -307,7 +307,12 @@ public class ContikiRadio extends Radio implements ContikiMoteInterface {\n       transmitting = true;\n       int size = myMoteMemory.getIntValueOf(\"simOutSize\");\n       packetFromMote = myMoteMemory.getByteArray(\"simOutDataBuffer\", size);\n-      transmissionEndTime = myMote.getSimulation().getSimulationTime() + 100; // TODO What's the duration?\n+\n+      // Assuming sending at 19.2 kbps, with manchester-encoding (x2) and 1\n+      // bit/byte UART overhead (x9 instead of x8)\n+      int duration = (int) ((2 * size * 9) / 19.2); // ms\n+      transmissionEndTime = myMote.getSimulation().getSimulationTime()\n+          + Math.max(1, duration);\n       \n       lastEventTime = myMote.getSimulation().getSimulationTime();\n       lastEvent = RadioEvent.TRANSMISSION_STARTED;\n","commit_message_token_length":22,"code_token_length":433,"combined_token_length":455,"target":0}
{"commit_url":"https://github.com/ynput/OpenPype/commit/b04fc48fbc475f671c0876c6d05cfca79c6d95c0","commit_message":"hiero: fix - skip audio in collect effects","code_diff":"@@ -16,6 +16,9 @@ class CollectClipEffects(pyblish.api.InstancePlugin):\n         review_track_index = instance.context.data.get(\"reviewTrackIndex\")\n         item = instance.data[\"item\"]\n \n+        if \"audio\" in instance.data[\"family\"]:\n+            return\n+\n         # frame range\n         self.handle_start = instance.data[\"handleStart\"]\n         self.handle_end = instance.data[\"handleEnd\"]\n","commit_message_token_length":11,"code_token_length":165,"combined_token_length":176,"target":0}
{"commit_url":"https://github.com/tryton/tryton/commit/0fbbe86928bb8c06b3a4c316be6aa69532cce812","commit_message":"Increase progressively the task retry duration up to 1 hour  issue11209 review385991002","code_diff":"@@ -138,9 +138,12 @@ def run_task(pool, task_id):\n                     logger.critical('%s failed', name, exc_info=True)\n                     return\n                 task = Queue(task_id)\n-                scheduled_at = dt.datetime.now()\n-                scheduled_at += dt.timedelta(\n-                    seconds=random.randint(0, 2 * retry))\n+                if task.scheduled_at and task.enqueued_at < task.scheduled_at:\n+                    duration = (task.scheduled_at - task.enqueued_at) * 2\n+                else:\n+                    duration = dt.timedelta(seconds=2 * retry)\n+                duration = max(duration, dt.timedelta(hours=1))\n+                scheduled_at = dt.datetime.now() + duration * random.random()\n                 Queue.push(task.name, task.data, scheduled_at=scheduled_at)\n         except Exception:\n             logger.critical(\n","commit_message_token_length":20,"code_token_length":478,"combined_token_length":498,"target":0}
{"commit_url":"https://github.com/oneapi-src/oneDNN/commit/448be8d93b5b8d957fa46b0580fb435368bce523","commit_message":"benchdnn: rnn: add skip case for non-lstm","code_diff":"@@ -596,6 +596,15 @@ void check_known_skipped_case(const prb_t &p, res_t *r) {\n     check_known_skipped_case_common({p.cfg[SRC_LAYER].dt}, dir, r);\n     if (r->state == SKIPPED) return;\n \n+    // Only LSTM supports peephole and projection layer\n+    bool is_lstm_peephole = IMPLICATION(p.with_peephole, p.alg == VANILLA_LSTM);\n+    bool is_lstm_projection\n+            = IMPLICATION(p.with_projection, p.alg == VANILLA_LSTM);\n+    if (!is_lstm_peephole || !is_lstm_projection) {\n+        r->state = SKIPPED, r->reason = CASE_NOT_SUPPORTED;\n+        return;\n+    }\n+\n     // int8 weights reorder does not support non trivial strides;\n     // only LSTM cell kind supports int8 so far;\n     if (p.is_int8() && (!p.trivial_strides || p.alg != VANILLA_LSTM)) {\n","commit_message_token_length":16,"code_token_length":349,"combined_token_length":365,"target":0}
{"commit_url":"https://github.com/meshtastic/firmware/commit/7799e1b7e6a2ad219aa8da6e2ed4ec80e797dbbd","commit_message":"Increased NTP update frequency to 1024 seconds","code_diff":"@@ -80,7 +80,6 @@ static int32_t reconnectWiFi()\n     }\n \n #ifndef DISABLE_NTP\n-    // if (*wifiName) {\n     if (WiFi.isConnected()) {\n         DEBUG_MSG(\"Updating NTP time\\n\");\n         if (timeClient.update()) {\n@@ -98,7 +97,7 @@ static int32_t reconnectWiFi()\n     }\n #endif\n \n-    return 30 * 1000; // every 30 seconds\n+    return 1024 * 1000; // every 1024 seconds\n }\n \n static Periodic *wifiReconnect;\n","commit_message_token_length":8,"code_token_length":179,"combined_token_length":187,"target":0}
{"commit_url":"https://github.com/galaxyproject/galaxy/commit/3e2773b14506a64d7afa805afe9ff4164036dee7","commit_message":"use element_identifier if possible  for collection input","code_diff":"@@ -2959,7 +2959,7 @@ class BuildListCollectionTool(DatabaseOperationTool):\n                 if incoming_repeat[\"id_cond\"][\"id_select\"] == 'idx':\n                     identifier = str(i)\n                 elif incoming_repeat[\"id_cond\"][\"id_select\"] == 'identifier':\n-                    identifier = incoming_repeat[\"input\"].element_identifier\n+                    identifier = getattr(incoming_repeat[\"input\"], 'element_identifier', incoming_repeat[\"input\"].name)\n                 elif incoming_repeat[\"id_cond\"][\"id_select\"] == 'manual':\n                     identifier = incoming_repeat[\"id_cond\"][\"identifier\"]\n                 new_elements[identifier] = incoming_repeat[\"input\"].copy(copy_tags=incoming_repeat[\"input\"].tags)\n","commit_message_token_length":11,"code_token_length":330,"combined_token_length":341,"target":0}
{"commit_url":"https://github.com/tonlabs/TVM-Compiler/commit/33696cd9cf04286f658ab5cc647cb6a8385762d7","commit_message":"Do run ComputeLiveOutVRegInfo with -fast.  llvm-svn: 52975","code_diff":"@@ -5347,7 +5347,7 @@ void SelectionDAGISel::CodeGenAndEmitDAG(SelectionDAG &DAG) {\n \n   if (ViewISelDAGs) DAG.viewGraph();\n   \n-  if (EnableValueProp)  // FIXME: Only do this if !fast.\n+  if (!FastISel && EnableValueProp)\n     ComputeLiveOutVRegInfo(DAG);\n \n   // Third, instruction select all of the operations to machine code, adding the\n","commit_message_token_length":22,"code_token_length":131,"combined_token_length":153,"target":0}
{"commit_url":"https://github.com/hibernate/hibernate-search/commit/9a105a2a1897983c56c8538d06650f6b3ebe7046","commit_message":"HSEARCH-3774 Pass the remaining time to ES request","code_diff":"@@ -79,30 +79,6 @@ public boolean defined() {\n \t}\n \n \tpublic String timeoutString() {\n-\t\tStringBuilder builder = new StringBuilder( timeoutValue.toString() );\n-\t\tswitch ( timeoutUnit ) {\n-\t\t\tcase DAYS:\n-\t\t\t\tbuilder.append( \"d\" );\n-\t\t\t\tbreak;\n-\t\t\tcase HOURS:\n-\t\t\t\tbuilder.append( \"h\" );\n-\t\t\t\tbreak;\n-\t\t\tcase MINUTES:\n-\t\t\t\tbuilder.append( \"m\" );\n-\t\t\t\tbreak;\n-\t\t\tcase SECONDS:\n-\t\t\t\tbuilder.append( \"s\" );\n-\t\t\t\tbreak;\n-\t\t\tcase MILLISECONDS:\n-\t\t\t\tbuilder.append( \"ms\" );\n-\t\t\t\tbreak;\n-\t\t\tcase MICROSECONDS:\n-\t\t\t\tbuilder.append( \"micros\" );\n-\t\t\t\tbreak;\n-\t\t\tcase NANOSECONDS:\n-\t\t\t\tbuilder.append( \"nanos\" );\n-\t\t\t\tbreak;\n-\t\t}\n-\t\treturn builder.toString();\n+\t\treturn checkTimeLeftInMilliseconds() + \"ms\";\n \t}\n }\n","commit_message_token_length":13,"code_token_length":330,"combined_token_length":343,"target":0}
{"commit_url":"https://github.com/graphaware/neo4j-nlp/commit/fe8f38c36da2393b350003e62d7f074e5fc6b10c","commit_message":"uses ENDS WITH for TR postprocess with subgroups","code_diff":"@@ -819,7 +819,7 @@ public class TextRank {\n             query += \"k.numTerms > 1\\n\"\n                     + \"with k, k.value as ks_orig\\n\"\n                     + \"match (k2:\" + keywordLabel.name() + \")\\n\"\n-                    + \"where k2.value STARTS WITH (ks_orig + ' ')\\n\"\n+                    + \"where k2.value ENDS WITH (ks_orig + ' ')\\n\"\n                     + \"merge (k)-[r:HAS_SUBGROUP]->(k2)\";\n     \n             try (Transaction tx = database.beginTx();) {\n","commit_message_token_length":11,"code_token_length":277,"combined_token_length":288,"target":0}
{"commit_url":"https://github.com/mariadb-corporation/MaxScale/commit/757ab3fd476c4e55cea38a5b2b71b3bfc4cbe933","commit_message":"Increase mxs431 timeouts  The first timeouts don't appear to relate to the actual test but to preparing it. Due to this, they can be increased by a great amount.","code_diff":"@@ -13,11 +13,11 @@ int main(int argc, char *argv[])\n     char str[256];\n     int iterations = 100;\n     test.repl->execute_query_all_nodes((char *) \"set global max_connections = 600;\");\n-    test.set_timeout(30);\n+    test.set_timeout(200);\n     test.repl->stop_slaves();\n-    test.set_timeout(30);\n+    test.set_timeout(200);\n     test.restart_maxscale();\n-    test.set_timeout(30);\n+    test.set_timeout(200);\n     test.repl->connect();\n     test.stop_timeout();\n \n","commit_message_token_length":38,"code_token_length":204,"combined_token_length":242,"target":0}
{"commit_url":"https://github.com/kislyuk/aegea/commit/4dbc23605ecc05f129860e93af4e5dc27ce3385a","commit_message":"Use subprocess instead of distro to check for Ubuntu presence (#56)","code_diff":"@@ -44,7 +44,7 @@ def ensure_session_manager_plugin():\n         target_path = os.path.join(session_manager_dir, \"session-manager-plugin\")\n         if platform.system() == \"Darwin\":\n             download_session_manager_plugin_macos(target_path=target_path)\n-        elif platform.linux_distribution()[0] == \"Ubuntu\":  # type: ignore\n+        elif \"Ubuntu\" in subprocess.run([\"uname\", \"-a\"], capture_output=True).stdout.decode():  # type: ignore\n             download_session_manager_plugin_linux(target_path=target_path)\n         else:\n             download_session_manager_plugin_linux(target_path=target_path, pkg_format=\"rpm\")\n","commit_message_token_length":15,"code_token_length":259,"combined_token_length":274,"target":0}
{"commit_url":"https://github.com/cedrickchee/transformers-llama/commit/f6969cc12b90c8f6c76f4819ea5f2f2e909f70b3","commit_message":"upgrade max model difference to 2e-2 (for transfo-xl adaptive softmax + inputs)","code_diff":"@@ -95,7 +95,7 @@ def convert_pt_checkpoint_to_tf(model_type, pytorch_checkpoint_path, config_file\n         np_tf = tfo[0].numpy()\n         diff = np.amax(np.abs(np_pt - np_tf))\n         print(\"Max absolute difference between models outputs {}\".format(diff))\n-        assert diff <= 1e-3, \"Error, model absolute difference is >1e-3\"\n+        assert diff <= 2e-2, \"Error, model absolute difference is >2e-2\"\n \n     # Save pytorch-model\n     print(\"Save TensorFlow model to {}\".format(tf_dump_path))\n","commit_message_token_length":23,"code_token_length":208,"combined_token_length":231,"target":0}
{"commit_url":"https://github.com/hyperledger/indy-plenum/commit/551d50a8d675615f1bfc3e104b9d692822f4b2ed","commit_message":"[INDY-1165] Try to decrease testing time (#552)  * [INDY-1165] Added check, that proofs already received\r \r  \r * [INDY-1165] Remove retry timeout changing","code_diff":"@@ -91,11 +91,14 @@ class LedgerManager(HasActionQueue):\n         if ledgerInfo.consistencyProofsTimer is None:\n             return\n \n+        proofs = ledgerInfo.recvdConsistencyProofs\n+        # there is no any received ConsistencyProofs\n+        if not proofs:\n+            return\n         logger.debug(\"{} requesting consistency \"\n                      \"proofs after timeout\".format(self))\n \n         quorum = Quorums(self.owner.totalNodes)\n-        proofs = ledgerInfo.recvdConsistencyProofs\n         groupedProofs, null_proofs_count = self._groupConsistencyProofs(proofs)\n         if quorum.same_consistency_proof.is_reached(null_proofs_count):\n             return\n","commit_message_token_length":50,"code_token_length":302,"combined_token_length":352,"target":0}
{"commit_url":"https://github.com/rhinstaller/anaconda/commit/8af279b5baa7fd39c2467f43bf8e8373dc8e2659","commit_message":"don't save system time on s390 (#867856)","code_diff":"@@ -96,6 +96,9 @@ def save_hw_clock(timezone):\n \n     \"\"\"\n \n+    if iutil.isS390():\n+        return\n+\n     cmd = \"hwclock\"\n     args = [\"--systohc\"]\n     if timezone.isUtc:\n","commit_message_token_length":13,"code_token_length":94,"combined_token_length":107,"target":0}
{"commit_url":"https://github.com/ChaissonLab/LRA/commit/08f7de695954a416d40eb97551cba1361d317a1e","commit_message":"Change the threshold to use 3rd SDP","code_diff":"@@ -1244,7 +1244,7 @@ RefinedAlignmentbtwnAnchors(int & cur, int & next, int & str, int & chromIndex,\n \tif (curGenomeEnd <= nextGenomeStart) {\n \t\tlong read_dist = nextReadStart - curReadEnd;\n \t\tlong genome_dist = nextGenomeStart - curGenomeEnd;\n-\t\tif (tinyOpts.RefineBySDP == true and min(read_dist, genome_dist) >= 500) {\n+\t\tif (tinyOpts.RefineBySDP == true and min(read_dist, genome_dist) >= 300) {\n \t\t\tGenomePairs BtwnPairs;\n \t\t\tvector<unsigned int> BtwnChain;\n \t\t\ttinyOpts.refineSpaceDiag = 30;\n","commit_message_token_length":9,"code_token_length":203,"combined_token_length":212,"target":0}
{"commit_url":"https://github.com/hfinkel/llvm-project-cxxjit/commit/37625f348538b5698704f3e2114a6c74e8c496d8","commit_message":"[analyzer] Add a comment that FunctionCodeRegions may also need canonicalization  llvm-svn: 353592","code_diff":"@@ -1009,6 +1009,7 @@ MemRegionManager::getElementRegion(QualType elementType, NonLoc Idx,\n \n const FunctionCodeRegion *\n MemRegionManager::getFunctionCodeRegion(const NamedDecl *FD) {\n+  // To think: should we canonicalize the declaration here?\n   return getSubRegion<FunctionCodeRegion>(FD, getCodeRegion());\n }\n \n","commit_message_token_length":27,"code_token_length":93,"combined_token_length":120,"target":0}
{"commit_url":"https://github.com/AnonymousMessenger/AnonymousMessenger/commit/0d5b83f3ce6dd640482943f2922dfe6ad78389e8","commit_message":"Swipe refresh trigger distance increased to 100dp.","code_diff":"@@ -368,7 +368,7 @@ public class AppFragment extends Fragment {\n         recyclerView.setAdapter(mAdapter);\n         ((SwipyRefreshLayout)rootView.findViewById(R.id.refresh)).setProgressBackgroundColor(R.color.dx_night_940);\n         ((SwipyRefreshLayout)rootView.findViewById(R.id.refresh)).setColorSchemeResources(R.color.dx_white);\n-        ((SwipyRefreshLayout)rootView.findViewById(R.id.refresh)).setDistanceToTriggerSync(20);\n+        ((SwipyRefreshLayout)rootView.findViewById(R.id.refresh)).setDistanceToTriggerSync(100);\n         ((SwipyRefreshLayout)rootView.findViewById(R.id.refresh)).setOnRefreshListener(\n                 (direction) -> {\n                     checkConnectivity();\n","commit_message_token_length":10,"code_token_length":292,"combined_token_length":302,"target":0}
{"commit_url":"https://github.com/M66B/FairEmail/commit/a7d59ba3cd530f21b454abf1644a1ded766cd6e6","commit_message":"Use default schedule for end of time condition","code_diff":"@@ -351,10 +351,7 @@ public class EntityRule {\n             JSONObject jcondition = new JSONObject(condition);\n             JSONObject jschedule = jcondition.optJSONObject(\"schedule\");\n \n-            if (jschedule == null)\n-                throw new IllegalArgumentException(\"Rule snooze schedule not found\");\n-\n-            int end = jschedule.optInt(\"end\", 0);\n+            int end = (jschedule == null ? 0 : jschedule.optInt(\"end\", 0));\n             Calendar cal = getRelativeCalendar(end, message.received);\n             wakeup = cal.getTimeInMillis() + duration * 3600 * 1000L;\n         } else\n","commit_message_token_length":8,"code_token_length":261,"combined_token_length":269,"target":0}
{"commit_url":"https://github.com/mzy2240/ESA/commit/5ea25b47fd6884ab374a62813b1350468e648d5d","commit_message":"1. Update the dependencies for fast N-1/2 CA.","code_diff":"@@ -17,6 +17,7 @@ import datetime\n import signal\n \n import numpy as np\n+from numpy.linalg import multi_dot, det, solve, inv\n import pandas as pd\n from scipy.sparse import csr_matrix\n import networkx as nx\n@@ -842,7 +843,7 @@ class SAW(object):\n         if np.any((df['MVAMax'] > df['LineLimMVA'])):\n             raise(Error(\"The current operational states has violations. Please fix and try again.\"))\n \n-        if not self.lodf:\n+        if self.lodf is None:\n             self.lodf = self.get_lodf_matrix()\n \n         lim = df['LineLimMVA'].to_numpy().flatten()\n","commit_message_token_length":14,"code_token_length":249,"combined_token_length":263,"target":0}
{"commit_url":"https://github.com/koying/SPMC/commit/ba5bf6acfc7825c20dfc5f26c87abea892a021ce","commit_message":"pivos: [amcodec-hack] pvr can reopen too fast, slow us down a little","code_diff":"@@ -1734,6 +1734,10 @@ void CAMLCodec::CloseDecoder()\n   SysfsUtils::SetInt(\"/sys/class/tsync/enable\", 1);\n \n   ShowMainVideo(false);\n+\n+  // add a little delay after closing in case\n+  // we are reopened too fast.\n+  usleep(500 * 1000);\n }\n \n void CAMLCodec::Reset()\n","commit_message_token_length":23,"code_token_length":106,"combined_token_length":129,"target":0}
{"commit_url":"https://github.com/intel/cm-compiler/commit/83133d9a74e9491a8ee22746d897213efbcc2da3","commit_message":"Use the right cast kind when comparing null to member pointers.  llvm-svn: 79927","code_diff":"@@ -4292,13 +4292,13 @@ QualType Sema::CheckCompareOperands(Expr *&lex, Expr *&rex, SourceLocation Loc,\n     if (RHSIsNull && \n         (lType->isPointerType() ||\n          (!isRelational && lType->isMemberPointerType()))) {\n-      ImpCastExprToType(rex, lType);\n+      ImpCastExprToType(rex, lType, CastExpr::CK_NullToMemberPointer);\n       return ResultTy;\n     }\n     if (LHSIsNull &&\n         (rType->isPointerType() ||\n          (!isRelational && rType->isMemberPointerType()))) {\n-      ImpCastExprToType(lex, rType);\n+      ImpCastExprToType(lex, rType, CastExpr::CK_NullToMemberPointer);\n       return ResultTy;\n     }\n \n","commit_message_token_length":22,"code_token_length":292,"combined_token_length":314,"target":0}
{"commit_url":"https://github.com/plctlab/llvm-project/commit/a095770a821cb93dc864a3ff33b801dc3c526a87","commit_message":"[clangd] Always remove dots before converting paths to URIs in symbol collector.  llvm-svn: 335458","code_diff":"@@ -75,9 +75,10 @@ llvm::Optional<std::string> toURI(const SourceManager &SM, StringRef Path,\n     }\n   } else if (!Opts.FallbackDir.empty()) {\n     llvm::sys::fs::make_absolute(Opts.FallbackDir, AbsolutePath);\n-    llvm::sys::path::remove_dots(AbsolutePath, /*remove_dot_dot=*/true);\n   }\n \n+  llvm::sys::path::remove_dots(AbsolutePath, /*remove_dot_dot=*/true);\n+\n   std::string ErrMsg;\n   for (const auto &Scheme : Opts.URISchemes) {\n     auto U = URI::create(AbsolutePath, Scheme);\n","commit_message_token_length":27,"code_token_length":197,"combined_token_length":224,"target":0}
{"commit_url":"https://github.com/COMP1511UNSW/dcc/commit/1f1b48745ff3470d7debf769c1787cd807b7856a","commit_message":"exec valgrind watcher to save a process","code_diff":"@@ -458,7 +458,7 @@ def add_constants_to_source_code(src, options):\n \n def add_embedded_tarfile_handling_to_source_code(src, options):\n     tar_n_bytes, tar_source = source_for_embedded_tarfile(options)\n-    watcher = rf\"python3 -E -c \\\"import io,os,sys,tarfile,tempfile\\n\\\n+    watcher = rf\"exec python3 -E -c \\\"import io,os,sys,tarfile,tempfile\\n\\\n with tempfile.TemporaryDirectory() as temp_dir:\\n\\\n  buffer = io.BytesIO(sys.stdin.buffer.raw.read({tar_n_bytes}))\\n\\\n  if len(buffer.getbuffer()) == {tar_n_bytes}:\\n\\\n","commit_message_token_length":10,"code_token_length":213,"combined_token_length":223,"target":0}
{"commit_url":"https://github.com/matwey/pybeam/commit/84b995f1421640e440bdd60544252d7a2589c4b1","commit_message":"pybeam.beam_file: use open() instead of removed file()","code_diff":"@@ -24,7 +24,7 @@ from pybeam.beam_construct import beam\n \n class BeamFile(object):\n \tdef __init__(self, filename):\n-\t\tself._tree = beam.parse(file(filename,\"r\").read())\n+\t\tself._tree = beam.parse(open(filename,\"rb\").read())\n \n \tdef selectChunkByName(self, name):\n \t\tfor c in self._tree.chunk:\n","commit_message_token_length":15,"code_token_length":111,"combined_token_length":126,"target":0}
{"commit_url":"https://github.com/mezz/JustEnoughItems/commit/22b3786d80055373e3b350eb7841ae0811529012","commit_message":"Use NBTIngredient for the potion in generated tipped arrow recipes (#2666)","code_diff":"@@ -9,6 +9,7 @@ import net.minecraft.world.item.alchemy.PotionUtils;\n import net.minecraft.world.item.crafting.CraftingRecipe;\n import net.minecraft.world.item.crafting.Ingredient;\n import net.minecraft.world.item.crafting.ShapedRecipe;\n+import net.minecraftforge.common.crafting.NBTIngredient;\n import net.minecraftforge.registries.ForgeRegistries;\n \n import java.util.stream.Stream;\n@@ -22,7 +23,8 @@ public final class TippedArrowRecipeMaker {\n \t\t\t\tItemStack arrowStack = new ItemStack(Items.ARROW);\n \t\t\t\tItemStack lingeringPotion = PotionUtils.setPotion(new ItemStack(Items.LINGERING_POTION), potion);\n \t\t\t\tIngredient arrowIngredient = Ingredient.of(arrowStack);\n-\t\t\t\tIngredient potionIngredient = Ingredient.of(lingeringPotion);\n+\t\t\t\tIngredient potionIngredient = new NBTIngredient(lingeringPotion) {\n+\t\t\t\t};\n \t\t\t\tNonNullList<Ingredient> inputs = NonNullList.of(Ingredient.EMPTY,\n \t\t\t\t\tarrowIngredient, arrowIngredient, arrowIngredient,\n \t\t\t\t\tarrowIngredient, potionIngredient, arrowIngredient,\n","commit_message_token_length":18,"code_token_length":357,"combined_token_length":375,"target":0}
{"commit_url":"https://github.com/gravitylow/AntiCheat/commit/b08ae8e60be033ad734041dc0f8e0f220ee00bfa","commit_message":"Lots of mobs in one area can cause players to move to fast in water.","code_diff":"@@ -211,7 +211,7 @@ public class PlayerListener implements Listener {\n                         if(!player.hasPermission(\"anticheat.waterwalk\"))\n                         {                    \n                             //Otherwise check for normal walking speeds, making sure they aren't using 'jesus' hacks\n-                            if(!player.isSprinting() && !player.isFlying())\n+                            if(!player.isSprinting() && !player.isFlying() && player.getNearbyEntities(1, 1, 1).isEmpty())\n                             {\n                                 tracker.increaseLevel(player,2);\n                                 plugin.log(player.getName()+\" is walking too fast in water! XSpeed=\"+xd+\" ZSpeed=\"+zd);\n","commit_message_token_length":16,"code_token_length":402,"combined_token_length":418,"target":0}
{"commit_url":"https://github.com/squirrel-sql-client/squirrel-sql-code/commit/2791c916e1a4d1d8e7a47752701fdfebbf4a6cdc","commit_message":"Use smallint for BIT instead of byte to avoid conversion problems.","code_diff":"@@ -35,7 +35,7 @@ public class InformixDialect extends org.hibernate.dialect.InformixDialect\n         super();\n         registerColumnType(Types.BIGINT, \"integer\");\n         registerColumnType(Types.BINARY, \"byte\");\n-        registerColumnType(Types.BIT, \"byte\");\n+        registerColumnType(Types.BIT, \"smallint\");\n         registerColumnType(Types.BLOB, \"byte\");\n         registerColumnType(Types.BOOLEAN, \"smallint\");\n         registerColumnType(Types.CHAR, 32511, \"char($l)\");\n","commit_message_token_length":13,"code_token_length":200,"combined_token_length":213,"target":0}
{"commit_url":"https://github.com/Neferetheka/Helper-Tools-for-Android/commit/272c5925c6ceb693036aefe7f979d252f80d1937","commit_message":"Improved time formatting  Better time formatting when converting seconds into mm:ss","code_diff":"@@ -82,9 +82,9 @@ public final class Converter\n \t\tStringBuilder sb = new StringBuilder();\n \t\tint minutes = duration / 60;\n \t\tint seconds = duration % 60;\n-\t\tsb.append(minutes);\n+\t\tsb.append(String.format(\"%02d\", minutes));\n \t\tsb.append(\"m\");\n-\t\tsb.append(seconds);\n+\t\tsb.append(String.format(\"%02d\", seconds));\n \t\treturn sb.toString();\n \t}\n \n","commit_message_token_length":14,"code_token_length":135,"combined_token_length":149,"target":0}
{"commit_url":"https://github.com/mooshim/Mooshimeter-AndroidApp/commit/33ab879ab06a6977d5726ff45745bf71b8430e29","commit_message":"Fixes incorrect number of milliseconds in 10 minutes","code_diff":"@@ -136,7 +136,7 @@ public class PreferencesActivity extends MyActivity {\n         }));\n         // Logging interval\n         final Button log_interval_button = new Button(mContext);\n-        final int[] ms_options = new int[]{0, 1000, 10000, 60000, 60000};\n+        final int[] ms_options = new int[]{0, 1000, 10000, 60000, 600000};\n         final ArrayList<String> option_list = new ArrayList<>(\n                 Arrays.asList(\"No wait\", \"1s\", \"10s\", \"1min\", \"10min\"));\n         int i=0;\n","commit_message_token_length":9,"code_token_length":212,"combined_token_length":221,"target":0}
{"commit_url":"https://github.com/NanoVNA-Saver/nanovna-saver/commit/c77b1370386142b1f9f6051d22429230ed52fafc","commit_message":"- Increased bin count for TDR for possible increased accuracy.","code_diff":"@@ -1467,9 +1467,9 @@ class TDRWindow(QtWidgets.QWidget):\n \n         windowed_s11 = window * s11\n \n-        self.td = np.abs(np.fft.ifft(windowed_s11, 2**14))\n+        self.td = np.abs(np.fft.ifft(windowed_s11, 2**16))\n \n-        time_axis = np.linspace(0, 1/step_size, 2**14)\n+        time_axis = np.linspace(0, 1/step_size, 2**16)\n         self.distance_axis = time_axis * v * c\n \n         # peak = np.max(td)  # We should check that this is an actual *peak*, and not just a vague maximum\n","commit_message_token_length":12,"code_token_length":243,"combined_token_length":255,"target":0}
{"commit_url":"https://github.com/ykfre/BsodSurvivor/commit/5a629d4cee40a08137e2e672061bd5242b3d5c99","commit_message":"A minor simplication in the generated code.  llvm-svn: 40479","code_diff":"@@ -2875,7 +2875,7 @@ public:\n         std::string NodeName;\n         if (!isRoot) {\n           NodeName = \"Tmp\" + utostr(ResNo);\n-          Code2 = \"SDOperand \" + NodeName + \" = SDOperand(\";\n+          Code2 = \"SDOperand \" + NodeName + \"(\";\n         } else {\n           NodeName = \"ResNode\";\n           if (!ResNodeDecled) {\n@@ -2991,7 +2991,7 @@ public:\n         bool NeedReplace = false;\n         if (NodeHasOutFlag) {\n           if (!InFlagDecled) {\n-            emitCode(\"SDOperand InFlag = SDOperand(ResNode, \" + \n+            emitCode(\"SDOperand InFlag(ResNode, \" + \n                      utostr(NumResults + (unsigned)NodeHasChain) + \");\");\n             InFlagDecled = true;\n           } else\n","commit_message_token_length":18,"code_token_length":376,"combined_token_length":394,"target":0}
{"commit_url":"https://github.com/dsavransky/EXOSIMS/commit/c96f595f930eaba08915c8a9b9eebc1396140647","commit_message":"Switching Stark F0 calc to TargetList instead of OpticalSystem","code_diff":"@@ -99,7 +99,7 @@ class Stark(ZodiacalLight):\n         h = const.h                             # Planck constant\r\n         c = const.c                             # speed of light in vacuum\r\n         ephoton = h*c/lam/u.ph                  # energy of a photon\r\n-        F0 = TL.OpticalSystem.F0(lam)           # zero-magnitude star (in ph/s/m2/nm)\r\n+        F0 = TL.starF0(sInds, mode)             # zero-magnitude star (in ph/s/m2/nm)\r\n         f_corr = f/ephoton/F0                   # color correction factor\r\n         \r\n         fZ = fbeta*f_corr.to('1/arcsec2')\r\n","commit_message_token_length":13,"code_token_length":352,"combined_token_length":365,"target":0}
{"commit_url":"https://github.com/uyuni-project/uyuni/commit/3e264b114515534980c9d8caff8be18acfe873e2","commit_message":"shorten the action name if > 128 chars (bnc#675021)","code_diff":"@@ -116,6 +116,10 @@ public class Action extends BaseDomainHelper implements Serializable {\n      * @param nameIn to set\n     */\n     public void setName(String nameIn) {\n+        // Shorten the name to 128 chars if necessary\n+        if (nameIn.length() > 128) {\n+            nameIn = nameIn.substring(0, 128);\n+        }\n         this.name = nameIn;\n     }\n \n","commit_message_token_length":17,"code_token_length":155,"combined_token_length":172,"target":0}
{"commit_url":"https://github.com/jss2a98aj/BugTorch/commit/90ed63f9b64582fdf42158abe8f175a8e2b39f09","commit_message":"Made fasterOptionInteractions off by default is it breaks Optifine","code_diff":"@@ -196,7 +196,7 @@ public class BugTorchConfig {\n \t\tfasterEntityLivingBaseIsPotionActiveAndSetAir = config.getBoolean(\"fasterEntityLivingBaseIsPotionActiveAndSetAir\", categoryPerformance, true, \"isPotionActive returns immediately if there are no active potions.\\nsetAir only updates its datawatcher when needed.\");\n \t\tfasterGetBlockByIdForAirBlocks = config.getBoolean(\"fasterGetBlockByIdForAirBlocks\", categoryPerformance, true, \"When something gets air blocks from ID it will return faster.\");\n \n-\t\tfasterOptionInteractions = config.getBoolean(\"fasterOptionInteractions\", categoryPerformance, true, \"Makes several functions used by option buttons faster.\");\n+\t\tfasterOptionInteractions = config.getBoolean(\"fasterOptionInteractions\", categoryPerformance, false, \"Makes several functions used by option buttons faster.\");\n \t\tfasterOptionLoading = config.getBoolean(\"fasterOptionLoading\", categoryPerformance, false, \"Makes the function that reads options.txt much faster.\");\n \n \t\tmoreAccurateLayeredSnowFaceCulling = config.getBoolean(\"moreAccurateLayeredSnowFaceCulling\", categoryPerformance, true, \"The faces of layered snow get culled more accurately when chunk meshes are created.\");\n","commit_message_token_length":14,"code_token_length":310,"combined_token_length":324,"target":0}
{"commit_url":"https://github.com/team-abnormals/endergetic/commit/2cc02b42634178746f11a4251ab6f96af57c70a0","commit_message":"Booflo Power Bar now drains faster when the Booflo is grounded","code_diff":"@@ -99,8 +99,8 @@ public class BoofloEntity extends EndimatedEntity {\n \t\treturn false;\n \t};\n \tprivate static final int BOOST_POWER_INCREMENT = 10;\n-\tprivate static final int BOOST_POWER_DECREMENT = 2;\n \tprivate static final int MAX_BOOST_POWER = 182;\n+\tprivate static final int HALF_BOOST_POWER = 91;\n \tprivate static final DataParameter<Optional<UUID>> OWNER_UNIQUE_ID = EntityDataManager.createKey(BoofloEntity.class, DataSerializers.OPTIONAL_UNIQUE_ID);\n \tprivate static final DataParameter<Optional<UUID>> LAST_FED_UNIQUE_ID = EntityDataManager.createKey(BoofloEntity.class, DataSerializers.OPTIONAL_UNIQUE_ID);\n \tprivate static final DataParameter<Boolean> ON_GROUND = EntityDataManager.createKey(BoofloEntity.class, DataSerializers.BOOLEAN);\n@@ -231,7 +231,7 @@ public class BoofloEntity extends EndimatedEntity {\n \n \t\t\tint power = this.getBoostPower();\n \t\t\tif (power > 0 && !this.isBoostExpanding()) {\n-\t\t\t\tthis.setBoostPower(Math.max(0, power - BOOST_POWER_DECREMENT));\n+\t\t\t\tthis.setBoostPower(Math.max(0, power - (this.isOnGround() ? 3 : 2)));\n \t\t\t\tif (this.getBoostPower() <= 0) {\n \t\t\t\t\tthis.setBoostLocked(false);\n \t\t\t\t}\n","commit_message_token_length":15,"code_token_length":416,"combined_token_length":431,"target":0}
{"commit_url":"https://github.com/oci-pronghorn/Pronghorn/commit/3c357677bbf9953e4c42f45b7c1112fb84207f39","commit_message":"fixing rate of check for long runs","code_diff":"@@ -208,7 +208,7 @@ public class ScriptedNonThreadScheduler extends StageScheduler implements Runnab\n         \t}\n         }\n         \n-        nextLongRunningCheck = System.nanoTime()+longRunningCheckFreqNS;\n+        nextLongRunningCheck = System.nanoTime()+(longRunningCheckFreqNS/6);//first check is quicker.\n         \n     }\n \n","commit_message_token_length":8,"code_token_length":143,"combined_token_length":151,"target":0}
{"commit_url":"https://github.com/live-clones/gmsh/commit/97a19bc2e794ac7e97f6ac6e71f2ccd0b893cb43","commit_message":"increase default prealloc to handle 2nd order hex by default","code_diff":"@@ -127,7 +127,7 @@ template <class scalar> void linearSystemPETSc<scalar>::preAllocateEntries()\n   int blockSize = _getBlockSizeFromParameters();\n   std::vector<int> nByRowDiag(_localSize), nByRowOffDiag(_localSize);\n   if(_sparsity.getNbRows() == 0) {\n-    PetscInt prealloc = 100;\n+    PetscInt prealloc = 216; // 8*27 (8 2nd order hexas)\n     PetscBool set;\n     PetscOptionsGetInt(PETSC_NULL, \"-petsc_prealloc\", &prealloc, &set);\n     prealloc = std::min(prealloc, _localSize);\n","commit_message_token_length":13,"code_token_length":193,"combined_token_length":206,"target":0}
{"commit_url":"https://github.com/moold/ParallelTask/commit/c3926164af83c6ccc43a6103cd6ae57294077e5f","commit_message":"wait only if there are some unfilnished subtasks","code_diff":"@@ -198,7 +198,7 @@ class Run(object):\n \t\tfor task in self.tasks:\n \t\t\tif not os.path.exists(task + '.done'):\n \t\t\t\tself.unfinished_tasks.append(task)\n-\t\tif len(self.unfinished_tasks) < 5: # Avoid delays in generating done files\n+\t\tif self.unfinished_tasks and len(self.unfinished_tasks) < 5: # Avoid delays in generating done files\n \t\t\ttime.sleep(5)\n \t\t\tfor task in list(self.unfinished_tasks):\n \t\t\t\tif os.path.exists(task + '.done'):\n","commit_message_token_length":12,"code_token_length":173,"combined_token_length":185,"target":0}
{"commit_url":"https://github.com/ykfre/BsodSurvivor/commit/99fe1695c7146fe968acaba68261d3e2383103cd","commit_message":"Add version of getMethodSummary() that can be used to query the summary for the method currently being analyzed.  llvm-svn: 70388","code_diff":"@@ -748,6 +748,20 @@ public:\n                                  ME->getClassInfo().first,\n                                  ME->getMethodDecl(), ME->getType());\n   }\n+\n+  /// getMethodSummary - This version of getMethodSummary is used to query\n+  ///  the summary for the current method being analyzed.\n+  RetainSummary *getMethodSummary(ObjCMethodDecl *MD) {\n+    Selector S = MD->getSelector();\n+    ObjCInterfaceDecl *ID = MD->getClassInterface();\n+    IdentifierInfo *ClsName = ID->getIdentifier();\n+    QualType ResultTy = MD->getResultType();\n+    \n+    if (MD->isInstanceMethod())\n+      return getInstanceMethodSummary(S, ClsName, ID, MD, ResultTy);\n+    else\n+      return getClassMethodSummary(S, ClsName, ID, MD, ResultTy);\n+  }\n   \n   RetainSummary* getCommonMethodSummary(ObjCMethodDecl* MD, Selector S,\n                                         QualType RetTy);\n","commit_message_token_length":31,"code_token_length":379,"combined_token_length":410,"target":0}
{"commit_url":"https://github.com/apache/tomcat/commit/60d16837686c8ca20103914d3e1c6223ee10113e","commit_message":"Use localised string having gone to the bother of obtaining it.","code_diff":"@@ -804,7 +804,7 @@ class NoBodyOutputStream extends ServletOutputStream {\n             // isn't this really an IllegalArgumentException?\n             \n             String msg = lStrings.getString(\"err.io.negativelength\");\n-            throw new IOException(\"negative length\");\n+            throw new IOException(msg);\n         }\n     }\n }\n","commit_message_token_length":13,"code_token_length":149,"combined_token_length":162,"target":0}
{"commit_url":"https://github.com/intel/cm-compiler/commit/14715b7f2f506350b0b69dc1f655229b48fd1341","commit_message":"Only enable the ObjCAtSyncChecker when the translation unit uses Objective-C.  llvm-svn: 118414","code_diff":"@@ -33,7 +33,9 @@ public:\n } // end anonymous namespace\n \n void clang::RegisterObjCAtSyncChecker(GRExprEngine &Eng) {\n-  Eng.registerCheck(new ObjCAtSyncChecker());\n+  // @synchronized is an Objective-C 2 feature.\n+  if (Eng.getContext().getLangOptions().ObjC2)\n+    Eng.registerCheck(new ObjCAtSyncChecker());\n }\n \n void ObjCAtSyncChecker::PreVisitObjCAtSynchronizedStmt(CheckerContext &C,\n","commit_message_token_length":28,"code_token_length":141,"combined_token_length":169,"target":0}
{"commit_url":"https://github.com/akvo/akvo-flow/commit/2b0c897eca5fad4af17ad823811dbac626591acc","commit_message":"Issue #245 - Set the connection and read timeout to 5min","code_diff":"@@ -21,6 +21,7 @@ import java.io.BufferedInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.net.URL;\n+import java.net.URLConnection;\n import java.security.GeneralSecurityException;\n import java.security.MessageDigest;\n import java.text.DateFormat;\n@@ -86,6 +87,7 @@ public class TaskServlet extends AbstractRestApiServlet {\n \tprivate SurveyInstanceDAO siDao;\n \tprivate final static String EMAIL_FROM_ADDRESS_KEY = \"emailFromAddress\";\n \tprivate TreeMap<String, String> recepientList = null;\n+\tprivate static final int CONNECTION_TIMEOUT = 5 * 60 * 1000; // 5min\n \n \tpublic TaskServlet() {\n \t\tDEVICE_FILE_PATH = com.gallatinsystems.common.util.PropertyUtil\n@@ -116,8 +118,13 @@ public class TaskServlet extends AbstractRestApiServlet {\n \n \t\ttry {\n \t\t\tDeviceFilesDao dfDao = new DeviceFilesDao();\n+\n \t\t\tURL url = new URL(DEVICE_FILE_PATH + fileName);\n-\t\t\tBufferedInputStream bis = new BufferedInputStream(url.openStream());\n+\t\t\tURLConnection conn = url.openConnection();\n+\t\t\tconn.setConnectTimeout(CONNECTION_TIMEOUT);\n+\t\t\tconn.setReadTimeout(CONNECTION_TIMEOUT);\n+\n+\t\t\tBufferedInputStream bis = new BufferedInputStream(conn.getInputStream());\n \t\t\tZipInputStream zis = new ZipInputStream(bis);\n \t\t\tList<DeviceFiles> dfList = null;\n \t\t\tDeviceFiles deviceFile = null;\n","commit_message_token_length":13,"code_token_length":443,"combined_token_length":456,"target":0}
{"commit_url":"https://github.com/Mindwerks/worldengine/commit/e9441209e9eda6749b239861a1f100488657c5ec","commit_message":"Changed seed-range for platec-seeds to use numpy constant.","code_diff":"@@ -408,7 +408,7 @@ def main():\n         if not os.path.exists(args.FILE):\n             usage(\"The specified world file does not exist\")\n \n-    maxseed = 65535  # there is a hard limit somewhere so seeds outside the uint16 range are considered unsafe\n+    maxseed = numpy.iinfo(numpy.uint16).max  # there is a hard limit somewhere so seeds outside the uint16 range are considered unsafe\n     if args.seed is not None:\n         seed = int(args.seed)\n         assert 0 <= seed <= maxseed, \"Seed has to be in the range between 0 and %s, borders included.\" % maxseed\n","commit_message_token_length":16,"code_token_length":196,"combined_token_length":212,"target":0}
{"commit_url":"https://github.com/robcaulk/freqai/commit/27a6dcf3fc13821006903573d330c06cecf9b169","commit_message":"getting available balance from wallet instead of API call.","code_diff":"@@ -338,8 +338,8 @@ class FreqtradeBot(object):\n             stake_amount = self.config['stake_amount']\n \n         # TODO: should come from the wallet\n-        avaliable_amount = self.exchange.get_balance(self.config['stake_currency'])\n-        # avaliable_amount = self.wallets.wallets[self.config['stake_currency']].free\n+        #avaliable_amount = self.exchange.get_balance(self.config['stake_currency'])\n+        avaliable_amount = self.wallets.wallets[self.config['stake_currency']].free\n \n         if stake_amount == constants.UNLIMITED_STAKE_AMOUNT:\n             open_trades = len(Trade.query.filter(Trade.is_open.is_(True)).all())\n","commit_message_token_length":10,"code_token_length":267,"combined_token_length":277,"target":0}
{"commit_url":"https://github.com/meraki-analytics/cassiopeia/commit/bbc0ff72282502fbb39a18d8e5eda4749a9faaef","commit_message":"Search by `patch.name` instead of `patch.version` in `Patch.from_str","code_diff":"@@ -13,7 +13,7 @@ class Patch(object):\n     @classmethod\n     def from_str(cls, string):\n         for patch in cls.__patches:\n-            if string in patch.name:\n+            if string in patch.patch:\n                 return patch\n         else:\n             raise ValueError(\"Unknown patch name {}\".format(string))\n","commit_message_token_length":21,"code_token_length":154,"combined_token_length":175,"target":0}
{"commit_url":"https://github.com/MrStahlfelge/lightblocks/commit/28513ccb49632f0bb71d864ffdc2f88f19c0f021","commit_message":"Shorten server-side error messages if they exceed 200 chars","code_diff":"@@ -399,6 +399,11 @@ public class BackendClient {\n                         errorMsg = \"Connection problem\";\n                     }\n \n+                    // TODO: Filter HTML\n+                    if (errorMsg.length() > 200) {\n+                        errorMsg = errorMsg.substring(0, 200);\n+                    }\n+\n                     callback.onFail(statusCode, errorMsg);\n                 }\n             }\n","commit_message_token_length":12,"code_token_length":258,"combined_token_length":270,"target":0}
{"commit_url":"https://github.com/Wisser/Jailer/commit/63275b2ba5203553dc51f533c40e59d4b83d0984","commit_message":"increased min delay closing tool tip window","code_diff":"@@ -2602,7 +2602,7 @@ public class UIUtil {\n \t\t\t\t\t\t\t\ttimer.stop();\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tlong stopTime = System.currentTimeMillis()\n-\t\t\t\t\t\t\t\t\t+ ToolTipManager.sharedInstance().getInitialDelay() + 200;\n+\t\t\t\t\t\t\t\t\t+ ToolTipManager.sharedInstance().getInitialDelay() + 320;\n \t\t\t\t\t\t\ttimer = new Timer(10, ae -> {\n \t\t\t\t\t\t\t\tif (System.currentTimeMillis() >= stopTime || isToolTipVisible()) {\n \t\t\t\t\t\t\t\t\treset.run();\n","commit_message_token_length":8,"code_token_length":183,"combined_token_length":191,"target":0}
{"commit_url":"https://github.com/hfinkel/llvm-project-cxxjit/commit/1f673d4450a45c47ffd6ba7f017316e88b165829","commit_message":"[JumpThreading] When processing compares, explicitly check that the result type is not a vector rather than check for it being an integer.  Compares always return a scalar integer or vector of integers. isIntegerTy returns false for vectors, but that's not completely obvious. So using isVectorTy is less confusing.  llvm-svn: 302198","code_diff":"@@ -580,7 +580,7 @@ bool JumpThreadingPass::ComputeValueKnownInPredecessors(\n \n     // If comparing a live-in value against a constant, see if we know the\n     // live-in value on any predecessors.\n-    if (isa<Constant>(Cmp->getOperand(1)) && Cmp->getType()->isIntegerTy()) {\n+    if (isa<Constant>(Cmp->getOperand(1)) && !Cmp->getType()->isVectorTy()) {\n       Constant *CmpConst = cast<Constant>(Cmp->getOperand(1));\n \n       if (!isa<Instruction>(Cmp->getOperand(0)) ||\n","commit_message_token_length":75,"code_token_length":186,"combined_token_length":261,"target":0}
{"commit_url":"https://github.com/lincolnloop/salmon/commit/79f03ffa99f4dceb5d2d95262570e6d2162bfda0","commit_message":"Change the fromtime and untiltime to be datetime instead of epoch","code_diff":"@@ -1,4 +1,5 @@\n from datetime import datetime\n+import time\n import os\n import whisper\n \n@@ -58,14 +59,14 @@ class WhisperDatabase(object):\n           This method fetch data from the database according to the period\n           given\n \n-          fetch(path,fromTime,untilTime=None)\n+          fetch(path, fromTime, untilTime=None)\n \n-          fromTime is an epoch time\n-          untilTime is also an epoch time, but defaults to now.\n+          fromTime is an datetime\n+          untilTime is also an datetime, but defaults to now.\n \n           Returns a tuple of (timeInfo, valueList)\n           where timeInfo is itself a tuple of (fromTime, untilTime, step)\n \n           Returns None if no data can be returned\n           \"\"\"\n-          whisper.fetch(self.path, fromTime, untilTime)\n+          whisper.fetch(self.path, time.ctime(fromTime), time.ctime(untilTime))\n","commit_message_token_length":14,"code_token_length":361,"combined_token_length":375,"target":0}
{"commit_url":"https://github.com/oracle/graaljs/commit/81ea507e8ef0e2ef39d2880c01c947620f04c17a","commit_message":"src: dump isolate stats when process exits  When process exits, dump v8 isolate's internal stats for performance evaluation and debugging. It fixed the incorrect profiling log output when running V8's builtin PGO profiling for node.js service type application,which exits by user pressing CTRL+C etc. keys.  PR-URL: https://github.com/nodejs/node/pull/44534","code_diff":"@@ -768,6 +768,7 @@ ThreadId AllocateEnvironmentThreadId() {\n void DefaultProcessExitHandler(Environment* env, int exit_code) {\n   env->set_can_call_into_js(false);\n   env->stop_sub_worker_contexts();\n+  env->isolate()->DumpAndResetStats();\n   DisposePlatform();\n   uv_library_shutdown();\n   exit(exit_code);\n","commit_message_token_length":83,"code_token_length":111,"combined_token_length":194,"target":0}
{"commit_url":"https://github.com/wocommunity/wonder/commit/a742d5633e0adec63d85c683e95b837aebbfef2b","commit_message":"using urlForResourceNamed (otherwise we get file://... url)","code_diff":"@@ -37,7 +37,7 @@ public class ERXFlashMovie extends ERXStatelessComponent {\n \t\tif(movieUrl == null) {\n \t\t\tString name = stringValueForBinding(\"movieName\");\n \t\t\tString framework = stringValueForBinding(\"framework\");\n-\t\t\tmovieUrl = application().resourceManager().pathURLForResourceNamed(name, framework, context().request().browserLanguages()).toExternalForm();\n+\t\t\tmovieUrl = application().resourceManager().urlForResourceNamed(name, framework, context().request().browserLanguages(), context().request());\n \t\t}\n \t\treturn movieUrl;\n \t}\n","commit_message_token_length":16,"code_token_length":158,"combined_token_length":174,"target":0}
{"commit_url":"https://github.com/zaproxy/zap-hud/commit/fee0229ff0b0516b9bb420e6a871d267b8318f50","commit_message":"Use generic timeout in Frames test  This gives more time and should be enough for the HUD and the frames to fully load, reducing failures.  Part of #344 - Make functional tests more reliable","code_diff":"@@ -38,6 +38,7 @@ import org.openqa.selenium.support.ui.WebDriverWait;\n import org.zaproxy.zap.extension.hud.tutorial.pages.AlertsPage;\n import org.zaproxy.zap.extension.hud.tutorial.pages.FramesPage;\n import org.zaproxy.zap.extension.hud.tutorial.pages.WarningPage;\n+import org.zaproxy.zap.extension.hud.ui.Constants;\n import org.zaproxy.zap.extension.hud.ui.firefox.FirefoxUnitTest;\n import org.zaproxy.zap.extension.hud.ui.generic.GenericUnitTest;\n import org.zaproxy.zap.extension.hud.ui.uimap.HUD;\n@@ -124,7 +125,8 @@ public class FramesPageUnitTest extends FirefoxUnitTest {\n     }\n \n     private static void checkWithRetry(WebDriver driver, Function<WebDriver, Object> check) {\n-        new WebDriverWait(driver, 10L).until(wd -> check.apply(driver));\n+        new WebDriverWait(driver, Constants.GENERIC_TESTS_TIMEOUT_SECS)\n+                .until(wd -> check.apply(driver));\n     }\n \n     private static void testSidePanesVisible(HUD hud) {\n","commit_message_token_length":39,"code_token_length":379,"combined_token_length":418,"target":0}
{"commit_url":"https://github.com/vinija/LeetCode/commit/b9a626e21b119e24412c2e5dd9b99fd833022a56","commit_message":"Time: 48 ms (86.27%), Space: 13.9 MB (68.98%) - LeetHub","code_diff":"@@ -0,0 +1,6 @@\n+class Solution:\n+    def numOfPairs(self, nums: List[str], target: str) -> int:\n+        ctr = Counter(nums)\n+        return sum(ctr[prefix] * (ctr[suffix] - (prefix == suffix))\n+                   for prefix in accumulate(target)\n+                   for suffix in [target.removeprefix(prefix)])\n\\ No newline at end of file\n","commit_message_token_length":24,"code_token_length":157,"combined_token_length":181,"target":0}
{"commit_url":"https://github.com/ykfre/BsodSurvivor/commit/26ef663c42660a74a025bbf6b7f316f3e37815cc","commit_message":"Make SlotIndex::getEntry() return unsigned to match IndexListEntry.  llvm-svn: 175600","code_diff":"@@ -112,7 +112,7 @@ namespace llvm {\n       return lie.getPointer();\n     }\n \n-    int getIndex() const {\n+    unsigned getIndex() const {\n       return listEntry()->getIndex() | getSlot();\n     }\n \n","commit_message_token_length":25,"code_token_length":86,"combined_token_length":111,"target":0}
{"commit_url":"https://github.com/intel/cm-compiler/commit/684d5fe95dc696916e58085aa95afe19402d1165","commit_message":"if Xcore doesn't support TLS, it doesn't have to worry about thread local LLVM IR, it should be rejected by a front-end.  llvm-svn: 76665","code_diff":"@@ -72,7 +72,7 @@ unsigned XCoreTargetAsmInfo::\n SectionFlagsForGlobal(const GlobalValue *GV, const char* Name) const {\n   unsigned Flags = ELFTargetAsmInfo::SectionFlagsForGlobal(GV, Name);\n   // Mask out unsupported flags\n-  Flags &= ~(SectionFlags::Small | SectionFlags::TLS);\n+  Flags &= ~SectionFlags::Small;\n \n   // Set CP / DP relative flags\n   if (GV) {\n","commit_message_token_length":41,"code_token_length":119,"combined_token_length":160,"target":0}
{"commit_url":"https://github.com/broadinstitute/seqr/commit/414b30453d8399362a2f9f5d3103e230feaab221","commit_message":"use Individual ID = Sample ID instead of Participant ID for now","code_diff":"@@ -433,7 +433,7 @@ def _parse_merged_pedigree_sample_manifest_format(rows):\n         MergedPedigreeSampleManifestConstants.MATERNAL_ID_COLUMN: JsonConstants.MATERNAL_ID_COLUMN,\n         MergedPedigreeSampleManifestConstants.SEX_COLUMN: JsonConstants.SEX_COLUMN,\n         MergedPedigreeSampleManifestConstants.AFFECTED_COLUMN: JsonConstants.AFFECTED_COLUMN,\n-        MergedPedigreeSampleManifestConstants.COLLABORATOR_SAMPLE_ID_COLUMN: JsonConstants.SAMPLE_ID_COLUMN,\n+        #MergedPedigreeSampleManifestConstants.COLLABORATOR_SAMPLE_ID_COLUMN: JsonConstants.SAMPLE_ID_COLUMN,\n         MergedPedigreeSampleManifestConstants.NOTES_COLUMN: JsonConstants.NOTES_COLUMN,\n         MergedPedigreeSampleManifestConstants.CODED_PHENOTYPE_COLUMN: JsonConstants.CODED_PHENOTYPE_COLUMN,\n     }\n","commit_message_token_length":12,"code_token_length":349,"combined_token_length":361,"target":0}
{"commit_url":"https://github.com/tonlabs/TVM-Compiler/commit/99fcb721b2cf21d16f8b195af05510e6b52d4102","commit_message":"[Sparc] Tweak r255668: Use llvm_unreachable.  llvm-svn: 255698","code_diff":"@@ -527,7 +527,7 @@ LowerFormalArguments_32(SDValue Chain,\n                          \"pass indirectly\");\n     } else {\n       // We shouldn't see any other value types here.\n-      assert(false && \"Unexpected ValVT encountered in frame lowering.\");\n+      llvm_unreachable(\"Unexpected ValVT encountered in frame lowering.\");\n     }\n     InVals.push_back(Load);\n   }\n","commit_message_token_length":28,"code_token_length":152,"combined_token_length":180,"target":0}
{"commit_url":"https://github.com/CTSRD-CHERI/cheribuild/commit/dce3ccf17a43a3423993203f287bc8e1d9d55595","commit_message":"CheriBSD tests: increase timeout for login prompt  Booting the purecap kernel with a purecap world is currently quite slow and we sometimes get timeouts in Jenkins.","code_diff":"@@ -815,7 +815,7 @@ def boot_and_login(child: CheriBSDSpawnMixin, *, starttime, kernel_init_only=Fal\n             have_dhclient = True\n             success(\"===> got DHCPACK\")\n             # we have a network, keep waiting for the login prompt\n-            i = child.expect(boot_expect_strings + FATAL_ERROR_MESSAGES, timeout=5 * 60,\n+            i = child.expect(boot_expect_strings + FATAL_ERROR_MESSAGES, timeout=15 * 60,\n                              timeout_msg=\"timeout awaiting login prompt\")\n         if i == boot_expect_strings.index(LOGIN):\n             success(\"===> got login prompt\")\n","commit_message_token_length":36,"code_token_length":274,"combined_token_length":310,"target":0}
{"commit_url":"https://github.com/hfinkel/llvm-project-cxxjit/commit/1b97fc34a4727c8d8cc27b5637a5c36db3a3ef49","commit_message":"[NewGVN] Prefer auto over explicit type. NFCI.  llvm-svn: 291328","code_diff":"@@ -849,7 +849,7 @@ const Expression *NewGVN::performSymbolicPHIEvaluation(Instruction *I,\n     // common value unless it dominates the phi block.\n     if (HasUndef) {\n       // Only have to check for instructions\n-      if (Instruction *AllSameInst = dyn_cast<Instruction>(AllSameValue))\n+      if (auto *AllSameInst = dyn_cast<Instruction>(AllSameValue))\n         if (!DT->dominates(AllSameInst, I))\n           return E;\n     }\n","commit_message_token_length":25,"code_token_length":172,"combined_token_length":197,"target":0}
{"commit_url":"https://github.com/EthanJamesLew/AutoKoopman/commit/f349a07fc4ae5d5ca7a11aa0ada6d6a8457c7b54","commit_message":"check the None case for input selection (#45)","code_diff":"@@ -364,7 +364,7 @@ class KoopmanSystem:\n     def __init__(self, A, B, obs, names, dim=None):\n         self._A = A\n         self._B = B\n-        self._has_input = not np.any(np.array(B.shape) == 0)\n+        self._has_input = B is not None and not np.any(np.array(B.shape) == 0)\n         self.obs = obs\n         self.dim = A.shape[0] if dim is None else dim\n \n","commit_message_token_length":10,"code_token_length":177,"combined_token_length":187,"target":0}
{"commit_url":"https://github.com/gauteh/lieer/commit/94bbd276a1a0e15c2735c56f0ff8e1a957553e46","commit_message":"remote: lower limit batch request size at integer levels","code_diff":"@@ -306,11 +306,13 @@ class Remote:\n         i = j # reset\n \n       except Remote.BatchException as ex:\n-        if max_req > self.MIN_BATCH_REQUEST_SIZE:\n-          max_req = max_req / 2\n+        max_req = max_req // 2\n+\n+        if max_req >= self.MIN_BATCH_REQUEST_SIZE:\n           i = j # reset\n           print (\"reducing batch request size to: %d\" % max_req)\n         else:\n+          max_req = self.MIN_BATCH_REQUEST_SIZE\n           raise Remote.BatchException (\"cannot reduce request any further\")\n \n       except ConnectionError as ex:\n","commit_message_token_length":10,"code_token_length":259,"combined_token_length":269,"target":0}
{"commit_url":"https://github.com/hfinkel/llvm-project-cxxjit/commit/9414782d68ed75cf0ff78ea7e963da5736947c66","commit_message":"Output a very high-precision number  llvm-svn: 8856","code_diff":"@@ -80,7 +80,7 @@ static inline std::string itostr(int X) {\n \n static inline std::string ftostr(double V) {\n   char Buffer[200];\n-  snprintf(Buffer, 200, \"%e\", V);\n+  snprintf(Buffer, 200, \"%20.6e\", V);\n   return Buffer;\n }\n \n","commit_message_token_length":17,"code_token_length":91,"combined_token_length":108,"target":0}
{"commit_url":"https://github.com/intel/cm-compiler/commit/d184c18074b973fb77e1f4757af878b90857e783","commit_message":"Handle functions with multiple exit blocks properly.  llvm-svn: 37539","code_diff":"@@ -526,6 +526,9 @@ bool GVNPRE::runOnFunction(Function &F) {\n          df_begin(PDT.getRootNode()), E = df_end(PDT.getRootNode());\n          PDI != E; ++PDI) {\n       BasicBlock* BB = PDI->getBlock();\n+      if (BB == 0)\n+        continue;\n+      \n       DOUT << \"Block: \" << BB->getName() << \"\\n\";\n       DOUT << \"TMP_GEN: \";\n       dump(generatedTemporaries[BB]);\n@@ -635,6 +638,9 @@ bool GVNPRE::runOnFunction(Function &F) {\n          E = df_end(DT.getRootNode()); DI != E; ++DI) {\n       BasicBlock* BB = DI->getBlock();\n       \n+      if (BB == 0)\n+        continue;\n+      \n       std::set<Value*, ExprLT>& new_set = new_sets[BB];\n       std::set<Value*, ExprLT>& availOut = availableOut[BB];\n       std::set<Value*, ExprLT>& anticIn = anticipatedIn[BB];\n","commit_message_token_length":17,"code_token_length":383,"combined_token_length":400,"target":0}
{"commit_url":"https://github.com/ilstam/FF-Multi-Converter/commit/01f9ecf49134a70563da39faadaea179999c70b8","commit_message":"use textwrap.fill() from stdlib to wrap long lines","code_diff":"@@ -30,7 +30,7 @@ import sys\n import re\n import platform\n import logging\n-import codecs\n+import textwrap\n \n import ffmulticonverter as ffmc\n from ffmulticonverter import utils\n@@ -465,15 +465,7 @@ class MainWindow(QMainWindow):\n     def about(self):\n         \"\"\"Call the about dialog with the appropriate values.\"\"\"\n         msg = self.tr('Convert among several file types to other extensions')\n-        if len(msg) > 54:\n-            # break line if msg is too long to fit the window\n-            nmsg = ''\n-            for n, w in enumerate(msg.split(' ')):\n-                if len(nmsg) > 54:\n-                    break\n-                nmsg += w + ' '\n-            nmsg += '<br>' + msg[len(nmsg):]\n-            msg = nmsg\n+        msg = textwrap.fill(msg, 54).replace('\\n', '<br>')\n         text = '''<b> FF Multi Converter {0} </b>\n                  <p>{1}\n                  <p><a href=\"{2}\">FF Multi Converter - Home Page</a>\n","commit_message_token_length":13,"code_token_length":452,"combined_token_length":465,"target":0}
{"commit_url":"https://github.com/NYRDS/remixed-dungeon/commit/bc7278c6cf55298107448162935591935df0e924","commit_message":"33% chance for lich to jump on hit","code_diff":"@@ -199,7 +199,11 @@ public class Lich extends Boss {\n                 return 0;\n             }\n         }\n-        jump();\n+\n+        if (Random.Int(3) == 1){\n+            jump();\n+        }\n+\n         return damage;\n     }\n \n","commit_message_token_length":9,"code_token_length":141,"combined_token_length":150,"target":0}
{"commit_url":"https://github.com/morganstanley/binlog/commit/616b9496adb29e4acb41fd456dfc9853e477dad1","commit_message":"Note why logging a large variant takes long compile: std::visit","code_diff":"@@ -54,8 +54,9 @@ int main()\n   BINLOG_INFO(\"nested: {}\", nested);\n   // Outputs: nested: true\n \n-  // TODO(benedek) this works, but the log statement takes ages to compile\n-  // and 5 time as long to run clang-tidy -- needs further investigation.\n+  // This works, but the log statement takes ages to compile\n+  // and 5 time as long to run clang-tidy -- because of the huge amount\n+  // of code generated by std::visit.\n   //// limits\n   //const std::variant<\n   //  int, int, int, int, int, int, int, int, int, int, // 10\n","commit_message_token_length":14,"code_token_length":178,"combined_token_length":192,"target":0}
