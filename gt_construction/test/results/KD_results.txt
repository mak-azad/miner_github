Commit Message: Change MixedModeAlgorithm default to TCP. Closes #7779.

MixedModeAlgorithm::Proportional will throttle TCP connections when utp
is in use and users is expecting maximum speed no matter what, so now
disable the throttling.
Code Diff: @@ -304,7 +304,7 @@ Session::Session(QObject *parent)
     , m_btProtocol(BITTORRENT_SESSION_KEY("BTProtocol"), BTProtocol::Both
         , clampValue(BTProtocol::Both, BTProtocol::UTP))
     , m_isUTPRateLimited(BITTORRENT_SESSION_KEY("uTPRateLimited"), true)
-    , m_utpMixedMode(BITTORRENT_SESSION_KEY("uTPMixedMode"), MixedModeAlgorithm::Proportional
+    , m_utpMixedMode(BITTORRENT_SESSION_KEY("uTPMixedMode"), MixedModeAlgorithm::TCP
         , clampValue(MixedModeAlgorithm::TCP, MixedModeAlgorithm::Proportional))
     , m_multiConnectionsPerIpEnabled(BITTORRENT_SESSION_KEY("MultiConnectionsPerIp"), false)
     , m_isAddTrackersEnabled(BITTORRENT_SESSION_KEY("AddTrackersEnabled"), false)

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Further increase wait times for shove tree testcase
Code Diff: @@ -192,13 +192,13 @@ class TestShoveTree(unittest.TestCase):
         rospy.sleep(0.5)
 
         is_running = False
-        for _ in range(16):
+        for _ in range(32):
             rospy.sleep(0.5)
             if remote_slot_node.tick() == NodeMsg.RUNNING:
                 is_running = True
                 break
         if not is_running:
-            raise Exception('Slot is not running after 4 seconds, but in state %s'
+            raise Exception('Slot is not running after 16 seconds, but in state %s'
                             % remote_slot_node.state)
 
         rospy.sleep(0.05)

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: ValueTracking: Small cleanup in ComputeNumSignBits  Constant contains the isAllOnesValue and isNullValue predicates, not ConstantInt.  llvm-svn: 224848
Code Diff: @@ -1768,7 +1768,7 @@ unsigned ComputeNumSignBits(Value *V, const DataLayout *TD,
     if (Tmp == 1) return 1;  // Early out.
 
     // Special case decrementing a value (ADD X, -1):
-    if (ConstantInt *CRHS = dyn_cast<ConstantInt>(U->getOperand(1)))
+    if (const auto *CRHS = dyn_cast<Constant>(U->getOperand(1)))
       if (CRHS->isAllOnesValue()) {
         APInt KnownZero(TyBits, 0), KnownOne(TyBits, 0);
         computeKnownBits(U->getOperand(0), KnownZero, KnownOne, TD, Depth+1, Q);
@@ -1793,7 +1793,7 @@ unsigned ComputeNumSignBits(Value *V, const DataLayout *TD,
     if (Tmp2 == 1) return 1;
 
     // Handle NEG.
-    if (ConstantInt *CLHS = dyn_cast<ConstantInt>(U->getOperand(0)))
+    if (const auto *CLHS = dyn_cast<Constant>(U->getOperand(0)))
       if (CLHS->isNullValue()) {
         APInt KnownZero(TyBits, 0), KnownOne(TyBits, 0);
         computeKnownBits(U->getOperand(1), KnownZero, KnownOne, TD, Depth+1, Q);

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: upload-pack: drop lookup-before-parse optimization

When we receive a "have" line from the client, we want to
load the object pointed to by the sha1. However, we are
careful to do:

  o = lookup_object(sha1);
  if (!o || !o->parsed)
	  o = parse_object(sha1);

to avoid loading the object from disk if we have already
seen it.  However, since ccdc603 (parse_object: try internal
cache before reading object db), parse_object already does
this optimization internally. We can just call parse_object
directly.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -327,9 +327,7 @@ static int got_sha1(char *hex, unsigned char *sha1)
 	if (!has_sha1_file(sha1))
 		return -1;
 
-	o = lookup_object(sha1);
-	if (!(o && o->parsed))
-		o = parse_object(sha1);
+	o = parse_object(sha1);
 	if (!o)
 		die("oops (%s)", sha1_to_hex(sha1));
 	if (o->type == OBJ_COMMIT) {

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: sd-dhcp-client: --omg-optimized

Passing the protocol to socket() is redundant as it will be specified again in
bind(). Dropping the redundancy reduces the cost of bind() from ~30ms to ~0ms.
For details see [0].

networkd in a container (i.e., with next to no network latency) can now
negotiate a DHCP lease in 0.7 - 5 ms.

Thanks to Kay for help with debugging and to Daniel Borkmann for the pointer
to fix the problem.

[0]: <https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=902fefb82ef72a50c78cb4a20cc954b037a98d1c>
Code Diff: @@ -37,8 +37,7 @@ int dhcp_network_bind_raw_socket(int index, union sockaddr_union *link)
         assert(index > 0);
         assert(link);
 
-        s = socket(AF_PACKET, SOCK_DGRAM | SOCK_CLOEXEC | SOCK_NONBLOCK,
-                   htons(ETH_P_IP));
+        s = socket(AF_PACKET, SOCK_DGRAM | SOCK_CLOEXEC | SOCK_NONBLOCK, 0);
         if (s < 0)
                 return -errno;
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Fix #967: Debugging Django in VSC with subprocess debugging is very slow

Avoid hogging CPU while waiting on the subprocess notification queue.
Code Diff: @@ -1296,7 +1296,7 @@ class VSCodeMessageProcessor(VSCLifecycleMsgProcessor):
     def _subprocess_notifier(self):
         while not self.closed:
             try:
-                subprocess_request, subprocess_response = multiproc.subprocess_queue.get(block=False, timeout=0.1)
+                subprocess_request, subprocess_response = multiproc.subprocess_queue.get(timeout=0.1)
             except queue.Empty:
                 continue
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Effects cache: Fix memory leak

The BitmapRef reference counter never reached 0 because it was part of the key, preventing deletion.
Changed it to a pointer. The value is never read so doesn't matter if it becomes stale.

Fix #3163
Code Diff: @@ -81,7 +81,7 @@ namespace {
 	std::unordered_map<tile_key_type, std::weak_ptr<Bitmap>> cache_tiles;
 
 	// rect, flip_x, flip_y, tone, blend
-	using effect_key_type = std::tuple<BitmapRef, Rect, bool, bool, Tone, Color>;
+	using effect_key_type = std::tuple<Bitmap*, Rect, bool, bool, Tone, Color>;
 	std::map<effect_key_type, std::weak_ptr<Bitmap>> cache_effects;
 
 	std::string system_name;
@@ -444,7 +444,7 @@ BitmapRef Cache::Tile(StringView filename, int tile_id) {
 
 BitmapRef Cache::SpriteEffect(const BitmapRef& src_bitmap, const Rect& rect, bool flip_x, bool flip_y, const Tone& tone, const Color& blend) {
 	const effect_key_type key {
-		src_bitmap,
+		src_bitmap.get(),
 		rect,
 		flip_x,
 		flip_y,

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Test for virtual instead of pure here. It has the exact same effect, and John
claims it will improve performance.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@174341 91177308-0d34-0410-b5e6-96231b3b80d8
Code Diff: @@ -11192,7 +11192,7 @@ void Sema::MarkDeclRefReferenced(DeclRefExpr *E) {
   // if it's a qualified reference.
   bool OdrUse = true;
   if (CXXMethodDecl *Method = dyn_cast<CXXMethodDecl>(E->getDecl()))
-    if (Method->isPure())
+    if (Method->isVirtual())
       OdrUse = false;
   MarkExprReferenced(*this, E->getLocation(), E->getDecl(), E, OdrUse);
 }

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: strbuf_getwholeline: use getc macro

strbuf_getwholeline calls fgetc in a tight loop. Using the
getc form, which can be implemented as a macro, should be
faster (and we do not care about it evaluating our argument
twice, as we just have a plain variable).

On my glibc system, running "git rev-parse
refs/heads/does-not-exist" on a file with an extremely large
(1.6GB) packed-refs file went from (best of 3 runs):

  real    0m19.383s
  user    0m18.876s
  sys     0m0.528s

to:

  real    0m18.900s
  user    0m18.472s
  sys     0m0.448s

for a wall-clock speedup of 2.5%.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -443,7 +443,7 @@ int strbuf_getwholeline(struct strbuf *sb, FILE *fp, int term)
 		return EOF;
 
 	strbuf_reset(sb);
-	while ((ch = fgetc(fp)) != EOF) {
+	while ((ch = getc(fp)) != EOF) {
 		strbuf_grow(sb, 1);
 		sb->buf[sb->len++] = ch;
 		if (ch == term)

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: changed to fig.show to avoid floating figure
Code Diff: @@ -1456,9 +1456,6 @@ class DisplaySettingsDialog(QtGui.QDialog):
         self.show_legend.setEnabled(False)
         self.show_legend.setAutoDefault(False)
         self.show_legend.clicked.connect(self.window.view.show_legend)
-
-
-
         
     def on_oversampling_changed(self, value):
         contrast_factor = (self._oversampling / value)**2
@@ -3463,7 +3460,6 @@ class View(QtGui.QLabel):
         self.update_scene()
 
     def show_legend(self):
-        print('This will be the legend')
         parameter = self.window.display_settings_dialog.parameter.currentText()
         n_colors = self.window.display_settings_dialog.color_step.value()
         min_val = self.window.display_settings_dialog.minimum_render.value()
@@ -3490,7 +3486,7 @@ class View(QtGui.QLabel):
         plt.xticks(x, labels)
 
         plt.title(parameter )
-        plt.show()
+        fig1.show()
 
 
     def activate_render_property(self):

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: setForcedUpdateAllAabbs to false; Reduces stepSimulation time by 35%.

This causes a drop from 6.5ms to 4.2ms on my machine.
Code Diff: @@ -92,6 +92,7 @@ GameWorld::GameWorld(Logger* log, GameData* dat)
         _overlappingPairCallback.get());
     gContactProcessedCallback = ContactProcessedCallback;
     dynamicsWorld->setInternalTickCallback(PhysicsTickCallback, this);
+    dynamicsWorld->setForceUpdateAllAabbs(false);
 }
 
 GameWorld::~GameWorld() {

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: slight optimizations: avoid unnecessary writes

but this happens only during config load, so no real gain
Code Diff: @@ -543,8 +543,10 @@ rsRetVal cstrTrimTrailingWhiteSpace(cstr_t *pThis)
 		--i;
 	}
 	/* i now is the new string length! */
-	pThis->iStrLen = i;
-	pThis->pBuf[pThis->iStrLen] = '\0'; /* we always have this space */
+	if(i != pThis->iStrLen) {
+		pThis->iStrLen = i;
+		pThis->pBuf[pThis->iStrLen] = '\0'; /* we always have this space */
+	}
 
 done:	return RS_RET_OK;
 }

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: grep: skip pthreads overhead when using one thread

Skip the administrative overhead of using pthreads when only using one
thread. Instead take the non-threaded path which would be taken under
NO_PTHREADS.

The threading support was initially added in commit
5b594f457a ("Threaded grep", 2010-01-25) with a hardcoded compile-time
number of 8 threads. Later the number of threads was made configurable
in commit 89f09dd34e ("grep: add --threads=<num> option and
grep.threads configuration", 2015-12-15).

That change did not add any special handling for --threads=1. Now we
take a slightly faster path by skipping thread handling entirely when
1 thread is requested.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -1238,6 +1238,8 @@ int cmd_grep(int argc, const char **argv, const char *prefix)
 		num_threads = GREP_NUM_THREADS_DEFAULT;
 	else if (num_threads < 0)
 		die(_("invalid number of threads specified (%d)"), num_threads);
+	if (num_threads == 1)
+		num_threads = 0;
 #else
 	if (num_threads)
 		warning(_("no threads support, ignoring --threads"));

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Fix constant editor redraw after shortcut

Introduced by me by mistake on #71328. Fixes #71652.
Code Diff: @@ -385,6 +385,7 @@ void BaseButton::shortcut_input(const Ref<InputEvent> &p_event) {
 		if (shortcut_feedback) {
 			if (shortcut_feedback_timer == nullptr) {
 				shortcut_feedback_timer = memnew(Timer);
+				shortcut_feedback_timer->set_one_shot(true);
 				add_child(shortcut_feedback_timer);
 				shortcut_feedback_timer->set_wait_time(GLOBAL_GET("gui/timers/button_shortcut_feedback_highlight_time"));
 				shortcut_feedback_timer->connect("timeout", callable_mp(this, &BaseButton::_shortcut_feedback_timeout));

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: string-util: optimize strshorten() a bit

There's no reason to determine the full length of the string, it's
sufficient to know whether it is larger than the intended size...
Code Diff: @@ -558,7 +558,7 @@ bool nulstr_contains(const char *nulstr, const char *needle) {
 char* strshorten(char *s, size_t l) {
         assert(s);
 
-        if (l < strlen(s))
+        if (strnlen(s, l+1) > l)
                 s[l] = 0;
 
         return s;

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: cipher: Fix IDEA cipher for clearing memory.

* cipher/idea.c (invert_key): Use wipememory, since this kind of memset
may be removed by compiler optimization.

--
Reported-by: Zhaomo Yang and Brian Johannesmeyer
Signed-off-by: NIIBE Yutaka <gniibe@fsij.org>
Code Diff: @@ -152,7 +152,7 @@ invert_key( u16 *ek, u16 dk[IDEA_KEYLEN] )
     *--p = t2;
     *--p = t1;
     memcpy(dk, temp, sizeof(temp) );
-    memset(temp, 0, sizeof(temp) );  /* burn temp */
+    wipememory(temp, sizeof(temp));
 }
 
 

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: use mimetype determination by extension for direct upload
Code Diff: @@ -1094,8 +1094,13 @@ public class FileUtil implements java.io.Serializable  {
 
 			} 
 		} else {
-			//Remote file, trust supplier
-			finalType = suppliedContentType;
+			if(suppliedContentType==FileUtil.MIME_TYPE_UNDETERMINED_DEFAULT) {
+				finalType=determineFileTypeByExtension(fileName);
+				logger.fine("Determined type: " + finalType);
+			} else {
+			  //Remote file, trust supplier
+			  finalType = suppliedContentType;
+			}
 		}
         // Finally, if none of the special cases above were applicable (or 
         // if we were unable to unpack an uploaded file, etc.), we'll just 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: core/stream.c: very, very slightly speed up multiline reads
Code Diff: @@ -934,8 +934,10 @@ strmReadMultiLine(strm_t *pThis, cstr_t **ppCStr, regex_t *preg, const sbool bEs
 				} else {
 					cstrAppendChar(pThis->prevMsgSegment, '\n');
 				}
-				CHKiRet(cstrAppendCStr(pThis->prevMsgSegment, thisLine));
-				/* we could do this faster, but for now keep it simple */
+				if(thisLine->iStrLen > 0) {
+					CHKiRet(cstrAppendCStr(pThis->prevMsgSegment, thisLine));
+					/* we could do this faster, but for now keep it simple */
+				}
 
 			}
 		}

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Improved X11 screen_get_refresh_rate performance
Code Diff: @@ -1571,7 +1571,7 @@ float DisplayServerX11::screen_get_refresh_rate(int p_screen) const {
 
 	//Use xrandr to get screen refresh rate.
 	if (xrandr_ext_ok) {
-		XRRScreenResources *screen_info = XRRGetScreenResources(x11_display, windows[MAIN_WINDOW_ID].x11_window);
+		XRRScreenResources *screen_info = XRRGetScreenResourcesCurrent(x11_display, windows[MAIN_WINDOW_ID].x11_window);
 		if (screen_info) {
 			RRMode current_mode = 0;
 			xrr_monitor_info *monitors = nullptr;

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: When the cache is exhausted do not delete unreferenced assets that were used during the last 50ms (approx. 3 frames).

The current behaviour (flush everything unreferenced when cache is full) was added to workaround out-of-memory issues on systems with limited RAM but this direct unload makes some use cases like face rendering in the Battle scene with Gauge style really slow (when the cache is full the face is unloaded and reloaded from disk once every frame).

I hope that 50ms is a good compromise here.

Fix #2509
Code Diff: @@ -101,8 +101,15 @@ namespace {
 				continue;
 			}
 
-			if (cache_size <= cache_limit && cur_ticks - it->second.last_access < 3s) {
-				// Below memory limit and last access < 3s
+			auto last_access = cur_ticks - it->second.last_access;
+			bool cache_exhausted = cache_size > cache_limit;
+			if (cache_exhausted) {
+				if (last_access <= 50ms) {
+					// Used during the last 3 frames, must be important, keep it.
+					++it;
+					continue;
+				}
+			} else if (last_access <= 3s) {
 				++it;
 				continue;
 			}

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Include temporary token light sources

This adds back in necessary functionality for Expose Last Path to function correctly.
Code Diff: @@ -455,6 +455,13 @@ private Illumination getIllumination(IlluminationKey illuminationKey) {
         illuminationKey, key -> getUpToDateIlluminator(key).getIllumination());
   }
 
+  /**
+   * Add personal lights and daylight for a token, as well as any normal lights if the token is
+   * temporary.
+   *
+   * @param token
+   * @return All extra light contributions to be made for this token.
+   */
   private @Nonnull List<ContributedLight> getPersonalTokenContributions(Token token) {
     if (!token.getHasSight()) {
       return Collections.emptyList();
@@ -477,6 +484,14 @@ private Illumination getIllumination(IlluminationKey illuminationKey) {
         personalLights.add(contributedLight);
       }
 
+      if (token.hasLightSources()
+          && !lightSourceMap
+              .getOrDefault(LightSource.Type.NORMAL, Collections.emptySet())
+              .contains(token.getId())) {
+        // This accounts for temporary tokens (such as during an Expose Last Path)
+        personalLights.addAll(calculateLitAreas(token, sight.getMultiplier()));
+      }
+
       if (sight.hasPersonalLightSource()) {
         // Calculate the personal light area here.
         // Note that a personal light is affected by its own sight's magnification, but that's it.

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Fix another case where we should be using isBeforeInTranslationUnit().  llvm-svn: 163533
Code Diff: @@ -325,8 +325,10 @@ static bool compare(const PathDiagnostic &X, const PathDiagnostic &Y) {
       return false;
     SourceLocation XDL = XD->getLocation();
     SourceLocation YDL = YD->getLocation();
-    if (XDL != YDL)
-      return XDL < YDL;
+    if (XDL != YDL) {
+      const SourceManager &SM = XL.getManager();
+      return SM.isBeforeInTranslationUnit(XDL, YDL);
+    }
   }
   PathDiagnostic::meta_iterator XI = X.meta_begin(), XE = X.meta_end();
   PathDiagnostic::meta_iterator YI = Y.meta_begin(), YE = Y.meta_end();

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Swap to using _longjmp/_setjmp instead of longjmp/setjmp

_longjmp/_setjmp do not manipulate the signal mask whilst
longjmp/setjmp may do. Online sources suggest this could result
in a significant speed up in the context switching.

Reviewed-by: Rich Salz <rsalz@openssl.org>
Code Diff: @@ -80,9 +80,9 @@ static inline int async_fibre_swapcontext(async_fibre *o, async_fibre *n, int r)
 {
     o->env_init = 1;
 
-    if (!r || !setjmp(o->env)) {
+    if (!r || !_setjmp(o->env)) {
         if (n->env_init)
-            longjmp(n->env, 1);
+            _longjmp(n->env, 1);
         else
             setcontext(&n->fibre);
     }

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Remove useless codec from system.asynchronous_metric_log
Code Diff: @@ -40,7 +40,7 @@ struct AsynchronousMetricLogElement
         return "event_date Date CODEC(Delta(2), ZSTD(1)), "
                "event_time DateTime CODEC(Delta(4), ZSTD(1)), "
                "metric LowCardinality(String) CODEC(ZSTD(1)), "
-               "value Float64 CODEC(Gorilla, ZSTD(3))";
+               "value Float64 CODEC(ZSTD(3))";
     }
 };
 

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Disable heading updates for .FollowWithCourse

Fixes #2180.
Code Diff: @@ -2310,6 +2310,7 @@ CLLocationCoordinate2D MGLLocationCoordinate2DFromLatLng(mbgl::LatLng latLng)
             break;
         }
         case MGLUserTrackingModeFollow:
+        case MGLUserTrackingModeFollowWithCourse:
         {
             self.showsUserLocation = YES;
 
@@ -2323,7 +2324,6 @@ CLLocationCoordinate2D MGLLocationCoordinate2DFromLatLng(mbgl::LatLng latLng)
             break;
         }
         case MGLUserTrackingModeFollowWithHeading:
-        case MGLUserTrackingModeFollowWithCourse:
         {
             self.showsUserLocation = YES;
 

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: code expected value in seconds, not interval object
Code Diff: @@ -109,8 +109,10 @@ class SmartTicker(skytools.DBScript):
         t.start()
 
     def refresh_queues(self, cx):
-        q = "select queue_name, queue_event_seq, queue_ticker_idle_period,"\
-            " queue_ticker_max_lag, queue_ticker_max_count"\
+        q = "select queue_name, queue_event_seq,"\
+            " extract('epoch' from queue_ticker_idle_period) as queue_ticker_idle_period,"\
+            " extract('epoch' from queue_ticker_max_lag) as queue_ticker_max_lag,"\
+            " queue_ticker_max_count"\
             " from pgq.queue"\
             " where not queue_external_ticker"
         cx.execute(q)

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Do not reload resources and send notification if locale is not changed.
Code Diff: @@ -518,8 +518,12 @@ String TranslationServer::get_country_name(const String &p_country) const {
 }
 
 void TranslationServer::set_locale(const String &p_locale) {
-	locale = standardize_locale(p_locale);
+	String new_locale = standardize_locale(p_locale);
+	if (locale == new_locale) {
+		return;
+	}
 
+	locale = new_locale;
 	ResourceLoader::reload_translation_remaps();
 
 	if (OS::get_singleton()->get_main_loop()) {

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: OpenMP: Adding an ifdef around chunksize for static schedule for GCC compiler.
Code Diff: @@ -101,8 +101,15 @@ class ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP> {
   std::enable_if_t<!std::is_same<typename Policy::schedule_type::type,
                                  Kokkos::Dynamic>::value>
   execute_parallel() const {
+// Specifying an chunksize with GCC compiler leads to performance regression
+// with static schedule.
+#ifdef KOKKOS_COMPILER_GNU
+#pragma omp parallel for schedule(static) \
+    num_threads(m_instance->thread_pool_size())
+#else
 #pragma omp parallel for schedule(static KOKKOS_OPENMP_OPTIONAL_CHUNK_SIZE) \
     num_threads(m_instance->thread_pool_size())
+#endif
     KOKKOS_PRAGMA_IVDEP_IF_ENABLED
     for (auto iwork = m_policy.begin(); iwork < m_policy.end(); ++iwork) {
       exec_work(m_functor, iwork);

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: #4346: Listing samples for a lab officer can be slow
Code Diff: @@ -305,6 +305,12 @@ public class SampleService extends AbstractCoreAdoService<Sample> {
 
 		Predicate filter = createUserFilterWithoutCase(cb, joins);
 
+		User currentUser = getCurrentUser();
+		final JurisdictionLevel jurisdictionLevel = currentUser.getJurisdictionLevel();
+		if (jurisdictionLevel == JurisdictionLevel.LABORATORY || jurisdictionLevel == JurisdictionLevel.EXTERNAL_LABORATORY) {
+			return filter;
+		}
+
 		if (criteria != null) {
 			final SampleAssociationType sampleAssociationType = criteria.getSampleAssociationType();
 			if (sampleAssociationType == SampleAssociationType.CASE) {

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: logging: remove assertion in nm_logging_enabled() from production builds

We really expect this assertion not to be violated.

As we want for nm_logging_enabled() to become smaller and inline,
remove the runtime assertion from regular builds.

Live fast and dangerous.
Code Diff: @@ -447,8 +447,7 @@ nm_logging_all_domains_to_string (void)
 gboolean
 nm_logging_enabled (NMLogLevel level, NMLogDomain domain)
 {
-	if ((guint) level >= G_N_ELEMENTS (global.logging))
-		g_return_val_if_reached (FALSE);
+	nm_assert (((guint) level) < G_N_ELEMENTS (global.logging));
 
 	return !!(global.logging[level] & domain);
 }

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: sort semeval2014 aspects consistently with the datasets
Code Diff: @@ -63,7 +63,7 @@ def get_predictions(predictions_dir, task, dataset_type):
                         scores.append(current_aspect_scores)
                         predicted_labels.append(np.argmax(current_aspect_scores))
             elif task == "single":
-                semeval_aspects = ["ambience", "anecdotes", "food", "price", "service"]
+                semeval_aspects = ["price", "anecdotes", "food", "ambience", "service"]
                 data = {}
                 for aspect in semeval_aspects:
                     data[aspect] = pd.read_csv(f"{predictions_dir}/{dataset_type}/BERT-single/{aspect}.csv", header=0).values.tolist()

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Try to turn off/on all lights faster #331
Code Diff: @@ -1589,7 +1589,8 @@ class S(BaseHTTPRequestHandler):
                         for light in bridge_config["lights"].keys():
                             if "virtual_light" not in bridge_config["alarm_config"] or light != bridge_config["alarm_config"]["virtual_light"]:
                                 bridge_config["lights"][light]["state"].update(put_dictionary)
-                                sendLightRequest(light, put_dictionary)
+                                Thread(target=sendLightRequest, args=[light, put_dictionary]).start()
+                                sleep(0.1)
                         for group in bridge_config["groups"].keys():
                             bridge_config["groups"][group][url_pices[5]].update(put_dictionary)
                             if "on" in put_dictionary:

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: use startswith if org_id is 15 char
Code Diff: @@ -201,9 +201,16 @@ def run_flows(
     """
     result = result_class.objects.get(pk=result_id)
     scratch_org = None
+
+    # This means we're in a ScratchOrg.
     if not result.user:
-        # This means we're in a ScratchOrg.
-        scratch_org = ScratchOrg.objects.get(org_id=result.org_id)
+        if len(result.org_id) == 15:
+            # we've seen a bug where the front-end will pass back a 15 char org-id
+            # when re-running preflight checks on a scratch org.
+            # See W-10330033 for additional context
+            scratch_org = ScratchOrg.objects.filter(org_id__startswith=result.org_id)[0]
+        else:
+            scratch_org = ScratchOrg.objects.get(org_id=result.org_id)
 
     repo_url = plan.version.product.repo_url
     commit_ish = plan.commit_ish or plan.version.commit_ish

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Fix new performance regressions (short delay_usec)

My Mac was using 20% cpu again, which was related to the Javascript
Export plugin.

I had however no export templates setup in the project so this is more
of a stopgap fix.
Code Diff: @@ -645,7 +645,7 @@ Ref<Texture2D> EditorExportPlatformJavaScript::get_run_icon() const {
 void EditorExportPlatformJavaScript::_server_thread_poll(void *data) {
 	EditorExportPlatformJavaScript *ej = (EditorExportPlatformJavaScript *)data;
 	while (!ej->server_quit) {
-		OS::get_singleton()->delay_usec(1000);
+		OS::get_singleton()->delay_usec(6900);
 		{
 			MutexLock lock(ej->server_lock);
 			ej->server->poll();

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: fetch-pack: grow stateless RPC windows exponentially

When updating large repositories, the LARGE_FLUSH limit (that is, the
limit at which the window growth strategy switches from exponential to
linear) is reached quite quickly. Use a conservative exponential growth
strategy when that limit is reached instead (and increase LARGE_FLUSH so
that there is no regression in window size).

This optimization is only applied during stateless RPCs to avoid the
issue raised and fixed in commit 44d8dc54 (Fix potential local
deadlock during fetch-pack, 2011-03-29).

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -243,16 +243,21 @@ static void insert_one_alternate_ref(const struct ref *ref, void *unused)
 
 #define INITIAL_FLUSH 16
 #define PIPESAFE_FLUSH 32
-#define LARGE_FLUSH 1024
+#define LARGE_FLUSH 16384
 
 static int next_flush(struct fetch_pack_args *args, int count)
 {
-	int flush_limit = args->stateless_rpc ? LARGE_FLUSH : PIPESAFE_FLUSH;
-
-	if (count < flush_limit)
-		count <<= 1;
-	else
-		count += flush_limit;
+	if (args->stateless_rpc) {
+		if (count < LARGE_FLUSH)
+			count <<= 1;
+		else
+			count = count * 11 / 10;
+	} else {
+		if (count < PIPESAFE_FLUSH)
+			count <<= 1;
+		else
+			count += PIPESAFE_FLUSH;
+	}
 	return count;
 }
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: improve perf of combine dims using views
Code Diff: @@ -219,10 +219,11 @@ combine_dimensions(int const degree, element_table const &table,
           degree > 1 ? (((id + 1) * degree) - 1) : index_start;
       kron_list.push_back(vectors[j].extract(index_start, index_end));
     }
-    fk::vector<P> const partial_result =
-        kron_d(kron_list, kron_list.size()) * time_scale;
-    combined.set_subvector((i - start_element) * std::pow(degree, num_dims),
-                           partial_result);
+    int const start_index = (i - start_element) * std::pow(degree, num_dims);
+    int const stop_index  = start_index + std::pow(degree, num_dims) - 1;
+    fk::vector<P, mem_type::view> combined_view(combined, start_index,
+                                                stop_index);
+    combined_view = kron_d(kron_list, kron_list.size()) * time_scale;
   }
   return combined;
 }

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: core: optimize nm_match_spec_s390_subchannels() to return early

No need to parse the subchannels if the spec list is empty.

This isn't actually an issue, because nm_match_spec_s390_subchannels()
was never called with empty spec list.
Code Diff: @@ -1108,6 +1108,9 @@ nm_match_spec_s390_subchannels (const GSList *specs, const char *subchannels)
 
 	g_return_val_if_fail (subchannels != NULL, NM_MATCH_SPEC_NO_MATCH);
 
+	if (!specs)
+		return NM_MATCH_SPEC_NO_MATCH;
+
 	if (!parse_subchannels (subchannels, &a, &b, &c))
 		return NM_MATCH_SPEC_NO_MATCH;
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: dhcp: support _LOGx_ENABLED() macro in dhcp-client

The macro _LOGx_ENABLED() is defined with a default implementation
that depends on _NMLOG_DOMAIN. Although that default does not
check for LOGD_DHCP4 vs. LOGD_DHCP6, still provide it.
Determining the correct domain might involve a larger performance
impact that what we would safe.
Code Diff: @@ -25,11 +25,18 @@
 #include "nm-dhcp-client.h"
 
 #define _NMLOG_PREFIX_NAME    "dhcp"
+#define _NMLOG_DOMAIN         LOGD_DHCP
 #define _NMLOG(level, ...) \
     G_STMT_START { \
         const NMLogLevel _level = (level); \
         \
-        if (nm_logging_enabled (_level, LOGD_DHCP)) { \
+        /* we check first for LOGD_DHCP instead of the correct domain.
+         * In the worst case, we guess wrong and enter the block.
+         *
+         * Same for the _NMLOG_ENABLED() macro. Probably it would be more
+         * expensive to determine the correct value then what we could
+         * safe. */ \
+        if (nm_logging_enabled (_level, _NMLOG_DOMAIN)) { \
             NMDhcpClient *_self = (NMDhcpClient *) (self); \
             const char *__ifname = _self ? nm_dhcp_client_get_iface (_self) : NULL; \
             const NMLogDomain _domain = !_self \

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: read-cache: speed up add_index_entry during checkout

Teach add_index_entry_with_check() to see if the path
of the new item is greater than the last path in the
index array before attempting to search for it.

During checkout, merge_working_tree() populates the new
index in sorted order, so this change will save a binary
lookups per file.  This preserves the original behavior
but simply checks the last element before starting the
search.

This helps performance on very large repositories.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -1021,7 +1021,16 @@ static int add_index_entry_with_check(struct index_state *istate, struct cache_e
 
 	if (!(option & ADD_CACHE_KEEP_CACHE_TREE))
 		cache_tree_invalidate_path(istate, ce->name);
-	pos = index_name_stage_pos(istate, ce->name, ce_namelen(ce), ce_stage(ce));
+
+	/*
+	 * If this entry's path sorts after the last entry in the index,
+	 * we can avoid searching for it.
+	 */
+	if (istate->cache_nr > 0 &&
+		strcmp(ce->name, istate->cache[istate->cache_nr - 1]->name) > 0)
+		pos = -istate->cache_nr - 1;
+	else
+		pos = index_name_stage_pos(istate, ce->name, ce_namelen(ce), ce_stage(ce));
 
 	/* existing match? Just replace it. */
 	if (pos >= 0) {

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: [Net] Fix SceneReplicationConfig setter.

Used by resource loader, it would always add properties as both sync and
spawn, disregarding the actual option value.
Code Diff: @@ -52,11 +52,19 @@ bool SceneReplicationConfig::_set(const StringName &p_name, const Variant &p_val
 		ReplicationProperty &prop = properties[idx];
 		if (what == "sync") {
 			prop.sync = p_value;
-			sync_props.push_back(prop.name);
+			if (prop.sync) {
+				sync_props.push_back(prop.name);
+			} else {
+				sync_props.erase(prop.name);
+			}
 			return true;
 		} else if (what == "spawn") {
 			prop.spawn = p_value;
-			spawn_props.push_back(prop.name);
+			if (prop.spawn) {
+				spawn_props.push_back(prop.name);
+			} else {
+				spawn_props.erase(prop.name);
+			}
 			return true;
 		}
 	}

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Use DXT1 when compressing PNGs with RGB format

This results in much smaller file sizes with the same quality
Code Diff: @@ -66,7 +66,7 @@ EtcpakType _determine_dxt_type(Image::UsedChannels p_channels) {
 		case Image::USED_CHANNELS_RG:
 			return EtcpakType::ETCPAK_TYPE_DXT5_RA_AS_RG;
 		case Image::USED_CHANNELS_RGB:
-			return EtcpakType::ETCPAK_TYPE_DXT5;
+			return EtcpakType::ETCPAK_TYPE_DXT1;
 		case Image::USED_CHANNELS_RGBA:
 			return EtcpakType::ETCPAK_TYPE_DXT5;
 		default:

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: fs-util: increase start buffer size in readlinkat_malloc()

I noticed while profiling journald that we invoke readlinkat() a ton on
open /proc/self/fd/<fd>, and that the returned paths are more often than
not longer than the 99 chars used before, when we look at archived
journal files. This means for these cases we generally need to execute
two rather than one syscalls.

Let's increase the buffer size a tiny bit, so that we reduce the number
of syscalls executed. This is really a low-hanging fruit of
optimization.
Code Diff: @@ -132,7 +132,7 @@ int rename_noreplace(int olddirfd, const char *oldpath, int newdirfd, const char
 }
 
 int readlinkat_malloc(int fd, const char *p, char **ret) {
-        size_t l = 100;
+        size_t l = FILENAME_MAX+1;
         int r;
 
         assert(p);

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Reset Max. Log Size to 20 MB
Code Diff: @@ -30,7 +30,7 @@ def set_up(logger, verbose=False, logfile=None):
 
     # File Logging
     if logfile:
-        max_log_size = 128 * 1024 * 1024 # 128 MB
+        max_log_size = 20 * 1024 * 1024 # 20 MB
         if os.name == 'nt':
             from counterpartylib.lib import util_windows
             fileh = util_windows.SanitizedRotatingFileHandler(logfile, maxBytes=max_log_size, backupCount=5)

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Verifier: Loosen r233559 check for 'function:' field in MDSubprogram  Stop worrying about what the `function:` field is in `MDSubprogram`, since it could be a bitcast [1].  Just check its type and leave it at that.  [1]: http://lab.llvm.org:8080/green/job/clang-stage2-configure-Rlto_build/3540/  llvm-svn: 233562
Code Diff: @@ -846,9 +846,8 @@ void Verifier::visitMDSubprogram(const MDSubprogram &N) {
     auto *FMD = dyn_cast<ConstantAsMetadata>(RawF);
     auto *F = FMD ? FMD->getValue() : nullptr;
     auto *FT = F ? dyn_cast<PointerType>(F->getType()) : nullptr;
-    Assert(F && (isa<Function>(F) || isa<ConstantPointerNull>(F)) && FT &&
-               isa<FunctionType>(FT->getElementType()),
-           "invalid function", &N, F);
+    Assert(F && FT && isa<FunctionType>(FT->getElementType()),
+           "invalid function", &N, F, FT);
   }
   if (N.getRawTemplateParams()) {
     auto *Params = dyn_cast<MDTuple>(N.getRawTemplateParams());

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Gzipping the _rates
Code Diff: @@ -400,7 +400,7 @@ class ClassicalCalculator(base.HazardCalculator):
         self.cmakers = read_cmakers(self.datastore, self.csm)
         self.cfactor = numpy.zeros(3)
         self.rel_ruptures = AccumDict(accum=0)  # grp_id -> rel_ruptures
-        self.datastore.create_df('_rates', rates_dt.items())
+        self.datastore.create_df('_rates', rates_dt.items(), 'gzip')
         self.datastore.create_dset('_rates/slice_by_sid', slice_dt)
         # NB: compressing the dataset causes a big slowdown in writing :-(
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: main: minor optimization

Let's remove one memory allocation in the common path.
Code Diff: @@ -1413,6 +1413,7 @@ static int bump_unix_max_dgram_qlen(void) {
 
 static int fixup_environment(void) {
         _cleanup_free_ char *term = NULL;
+        const char *t;
         int r;
 
         /* We expect the environment to be set correctly
@@ -1432,13 +1433,10 @@ static int fixup_environment(void) {
         r = proc_cmdline_get_key("TERM", 0, &term);
         if (r < 0)
                 return r;
-        if (r == 0) {
-                term = strdup(default_term_for_tty("/dev/console"));
-                if (!term)
-                        return -ENOMEM;
-        }
 
-        if (setenv("TERM", term, 1) < 0)
+        t = term ?: default_term_for_tty("/dev/console");
+
+        if (setenv("TERM", t, 1) < 0)
                 return -errno;
 
         return 0;

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: regular Pure() is _pure; pprint(Pure()) is pure
Code Diff: @@ -2233,11 +2233,11 @@ def ode_nth_linear_constant_coeff_homogeneous(eq, func, order, match, returns='s
     >>> dsolve(f(x).diff(x, 5) + 10*f(x).diff(x) - 2*f(x), f(x),
     ... hint='nth_linear_constant_coeff_homogeneous')
     ... # doctest: +NORMALIZE_WHITESPACE
-    f(x) == C1*exp(x*RootOf(pure**5 + 10*pure - 2, 0)) + \
-    C2*exp(x*RootOf(pure**5 + 10*pure - 2, 1)) + \
-    C3*exp(x*RootOf(pure**5 + 10*pure - 2, 2)) + \
-    C4*exp(x*RootOf(pure**5 + 10*pure - 2, 3)) + \
-    C5*exp(x*RootOf(pure**5 + 10*pure - 2, 4))
+    f(x) == C1*exp(x*RootOf(_pure**5 + 10*_pure - 2, 0)) + \
+    C2*exp(x*RootOf(_pure**5 + 10*_pure - 2, 1)) + \
+    C3*exp(x*RootOf(_pure**5 + 10*_pure - 2, 2)) + \
+    C4*exp(x*RootOf(_pure**5 + 10*_pure - 2, 3)) + \
+    C5*exp(x*RootOf(_pure**5 + 10*_pure - 2, 4))
 
     Note that because this method does not involve integration, there is
     no 'nth_linear_constant_coeff_homogeneous_Integral' hint.

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Increase the sleep period when updating pre-processing gcode to 1/60th of a second, which is pretty reasonable.
Code Diff: @@ -2184,8 +2184,9 @@ class OctolapsePlugin(
             "lines_processed": lines_processed
         }
         self._plugin_manager.send_plugin_message(self._identifier, data)
-        # sleep for just a bit to allow the plugin message time to be sent.
-        time.sleep(0.001)
+        # sleep for just a bit to allow the plugin message time to be sent and for cancel messages to arrive
+        # the real answer for this is to figure out how to allow threading in the C++ code
+        time.sleep(0.017)
 
     def send_popup_message(self, msg):
         self.send_plugin_message("popup", msg)

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: device-port: Return early from pa_device_port_set_latency_offset() if the offset doesn't change.

This avoids sending change notifications when nothing changes.
Code Diff: @@ -104,6 +104,9 @@ void pa_device_port_set_latency_offset(pa_device_port *p, int64_t offset) {
 
     pa_assert(p);
 
+    if (offset == p->latency_offset)
+        return;
+
     p->latency_offset = offset;
 
     if (p->is_output) {

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Fix Windows Activate Process
Code Diff: @@ -4727,6 +4727,7 @@ LRESULT DisplayServerWindows::WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARA
 		} break;
 		case WM_EXITSIZEMOVE: {
 			KillTimer(windows[window_id].hWnd, windows[window_id].move_timer_id);
+			windows[window_id].move_timer_id = 0;
 		} break;
 		case WM_TIMER: {
 			if (wParam == windows[window_id].move_timer_id) {

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: ENH: performance enhancement, fixes #411
Code Diff: @@ -1014,7 +1014,7 @@ class BiologicalSequence(Sequence):
             step = k
 
         for i in range(0, sequence_length - k + 1, step):
-            yield constructor(self[i:i+k])
+            yield self._sequence[i:i+k]
 
     def k_word_counts(self, k, overlapping=True, constructor=str):
         """Get the counts of words of length k

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: AST: Simplify CharUnits::alignmentAtOffset

CharUnits::alignmentAtOffset is equivalent to llvm::MinAlign but
slightly less efficient.  Use it's implementation instead.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@202099 91177308-0d34-0410-b5e6-96231b3b80d8
Code Diff: @@ -173,12 +173,7 @@ namespace clang {
       /// Given that this is a non-zero alignment value, what is the
       /// alignment at the given offset?
       CharUnits alignmentAtOffset(CharUnits offset) {
-        // alignment: 0010000
-        // offset:    1011100
-        // lowBits:   0001011
-        // result:    0000100
-        QuantityType lowBits = (Quantity-1) & (offset.Quantity-1);
-        return CharUnits((lowBits + 1) & ~lowBits);
+        return CharUnits(llvm::MinAlign(Quantity, offset.Quantity));
       }
 
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Correctly update LiveVariables when an instruction changes  llvm-svn: 12561
Code Diff: @@ -326,14 +326,14 @@ void LiveVariables::instructionChanged(MachineInstr *OldMI,
                                        MachineInstr *NewMI) {
   // If the instruction defines any virtual registers, update the VarInfo for
   // the instruction.
-  for (unsigned i = 0, e = NewMI->getNumOperands(); i != e; ++i) {
-    MachineOperand &MO = NewMI->getOperand(i);
+  for (unsigned i = 0, e = OldMI->getNumOperands(); i != e; ++i) {
+    MachineOperand &MO = OldMI->getOperand(i);
     if (MO.isRegister() && MO.isDef() && MO.getReg() &&
         MRegisterInfo::isVirtualRegister(MO.getReg())) {
       unsigned Reg = MO.getReg();
       VarInfo &VI = getVarInfo(Reg);
       if (VI.DefInst == OldMI)
-        VI.DefInst = NewMI; 
+        VI.DefInst = NewMI;
     }
   }
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: #5612: Increased chunk size for lazy loading to 100

- Avoids a 2nd query when initializing a list view
Code Diff: @@ -12,8 +12,8 @@ import com.vaadin.server.SerializableSupplier;
 import com.vaadin.ui.Grid;
 import com.vaadin.ui.renderers.HtmlRenderer;
 
-import de.symeda.sormas.api.utils.criteria.BaseCriteria;
 import de.symeda.sormas.api.i18n.I18nProperties;
+import de.symeda.sormas.api.utils.criteria.BaseCriteria;
 
 public class FilteredGrid<T, C extends BaseCriteria> extends Grid<T> {
 
@@ -21,11 +21,17 @@ public class FilteredGrid<T, C extends BaseCriteria> extends Grid<T> {
 
 	private static final long serialVersionUID = 8116377533153377424L;
 
+	/**
+	 * For lazy loading: Defines how many entries are loaded into the grid when new data needs to be loaded for the visible range.
+	 */
+	private static final int LAZY_BATCH_SIZE = 100;
+
 	private C criteria;
 	private boolean inEagerMode;
 
 	public FilteredGrid(Class<T> beanType) {
 		super(beanType);
+		getDataCommunicator().setMinPushSize(LAZY_BATCH_SIZE);
 	}
 
 	public C getCriteria() {

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: I believe this logic needs to be reversed.
Code Diff: @@ -218,12 +218,12 @@ class ParticleIndex(Index):
             else:
                 # TODO: only return files
                 if getattr(dobj.selector, 'is_all_data', False):
+                    nfiles = self.regions.nfiles
+                    dfi = np.arange(nfiles)
+                else:
                     dfi, file_masks, addfi = self.regions.identify_file_masks(
                         dobj.selector)
                     nfiles = len(file_masks)
-                else:
-                    nfiles = self.regions.nfiles
-                    dfi = np.arange(nfiles)
                 dobj._chunk_info = [None for _ in range(nfiles)]
                 for i in range(nfiles):
                     domain_id = i+1

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Increase RemoteDebuggerPeerTCP poll to 6.9ms

Fix high CPU usage on MacOS by reverting the polling for Network
debugging to match 144hz refresh rate.
Code Diff: @@ -190,7 +190,8 @@ Error RemoteDebuggerPeerTCP::connect_to_host(const String &p_host, uint16_t p_po
 }
 
 void RemoteDebuggerPeerTCP::_thread_func(void *p_ud) {
-	const uint64_t min_tick = 100;
+	// Update in time for 144hz monitors
+	const uint64_t min_tick = 6900;
 	RemoteDebuggerPeerTCP *peer = (RemoteDebuggerPeerTCP *)p_ud;
 	while (peer->running && peer->is_peer_connected()) {
 		uint64_t ticks_usec = OS::get_singleton()->get_ticks_usec();

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: core: add nm_utils_get_monotonic_timestamp_ns_cached() helper

Add a helper function to cache the current timestamp and return
it. The caching is a performance optimization, but it serves a
much more important purpose: repeatedly getting the timestamp
likely will yield different timings. So, commonly, within a
certain context we want to get the current time once, and stick
to that as "now".
Code Diff: @@ -239,6 +239,13 @@ gint64 nm_utils_get_monotonic_timestamp_ms (void);
 gint32 nm_utils_get_monotonic_timestamp_s (void);
 gint64 nm_utils_monotonic_timestamp_as_boottime (gint64 timestamp, gint64 timestamp_ticks_per_ns);
 
+static inline gint64
+nm_utils_get_monotonic_timestamp_ns_cached (gint64 *cache_now)
+{
+	return    (*cache_now)
+	       ?: (*cache_now = nm_utils_get_monotonic_timestamp_ns ());
+}
+
 gboolean    nm_utils_is_valid_path_component (const char *name);
 const char *NM_ASSERT_VALID_PATH_COMPONENT (const char *name);
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Add a heuristic avoiding joining framebuffers horizontally

...when texturing from the other one.

Greatly improves GPU performance in Rainbow Six: Vegas.

Fixes #9324.
Code Diff: @@ -426,6 +426,14 @@ VirtualFramebuffer *FramebufferManagerCommon::DoSetRenderFrameBuffer(Framebuffer
 			u32 v_fb_end_ptr = v->fb_address + v->fb_stride * v->height * bpp;
 
 			if (params.fb_address > v->fb_address && params.fb_address < v_fb_first_line_end_ptr) {
+				// If the framebuffer we can join to is currently bound as a texture, we likely have
+				// a situation like in #9324 and don't want to do this.
+				u32 curTextureAddress = gstate.getTextureAddress(0);
+				if (v->fb_address == curTextureAddress) {
+					// Don't try these joining shenanigans.
+					continue;
+				}
+
 				const int x_offset = (params.fb_address - v->fb_address) / bpp;
 				if (x_offset < params.fb_stride && v->height >= drawing_height) {
 					// Pretty certainly a pure render-to-X-offset.

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: [analyzer] micro optimization as per Jordan’s feedback on r177905.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@178062 91177308-0d34-0410-b5e6-96231b3b80d8
Code Diff: @@ -833,13 +833,13 @@ RegionStoreManager::removeSubRegionBindings(RegionBindingsConstRef B,
                                             const SubRegion *Top) {
   BindingKey TopKey = BindingKey::Make(Top, BindingKey::Default);
   const MemRegion *ClusterHead = TopKey.getBaseRegion();
-  const ClusterBindings *Cluster = B.lookup(ClusterHead);
 
   if (Top == ClusterHead) {
     // We can remove an entire cluster's bindings all in one go.
     return B.remove(Top);
   }
 
+  const ClusterBindings *Cluster = B.lookup(ClusterHead);
   if (!Cluster) {
     // If we're invalidating a region with a symbolic offset, we need to make
     // sure we don't treat the base region as uninitialized anymore.

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Use a more detailed alert mask where possible

Closes #9547
Code Diff: @@ -392,7 +392,11 @@ Session::Session(QObject *parent)
                     | libt::alert::tracker_notification
                     | libt::alert::status_notification
                     | libt::alert::ip_block_notification
+#if LIBTORRENT_VERSION_NUM < 10110
                     | libt::alert::progress_notification
+#else
+                    | libt::alert::file_progress_notification
+#endif
                     | libt::alert::stats_notification;
 
 #if LIBTORRENT_VERSION_NUM < 10100

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: [analyzer] Bump down the max size of functions being analyzed.

With the new setting, we are not going to inline any functions that are
more than 50 basic blocks. (The analyzer is 20% faster on several
especially bad benchmarks with the new default.)

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@171891 91177308-0d34-0410-b5e6-96231b3b80d8
Code Diff: @@ -304,7 +304,7 @@ public:
     NoRetryExhausted = 0;
     // Cap the stack depth at 4 calls (5 stack frames, base + 4 calls).
     InlineMaxStackDepth = 5;
-    InlineMaxFunctionSize = 200;
+    InlineMaxFunctionSize = 50;
     InliningMode = NoRedundancy;
   }
 };

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: sceKernelFindModuleByName:Add delay for Fake module

Fix #13601
Code Diff: @@ -2444,12 +2444,18 @@ u32 sceKernelFindModuleByName(const char *name)
 		PSPModule *module = kernelObjects.Get<PSPModule>(moduleId, error);
 		if (!module)
 			continue;
-		if (!module->isFake && strcmp(name, module->nm.name) == 0) {
-			INFO_LOG(SCEMODULE, "%d = sceKernelFindModuleByName(%s)", module->modulePtr, name);
-			return module->modulePtr;
+		if (strcmp(name, module->nm.name) == 0) {
+			if (!module->isFake) {
+				INFO_LOG(SCEMODULE, "%d = sceKernelFindModuleByName(%s)", module->modulePtr, name);
+				return module->modulePtr;
+			}
+			else {
+				WARN_LOG(SCEMODULE, "0 = sceKernelFindModuleByName(%s): Module Fake", name);
+				return hleDelayResult(0, "Module Fake", 1000 * 1000);
+			}
 		}
 	}
-	WARN_LOG(SCEMODULE, "0 = sceKernelFindModuleByName(%s): Module Not Found or Fake", name);
+	WARN_LOG(SCEMODULE, "0 = sceKernelFindModuleByName(%s): Module Not Found", name);
 	return 0;
 }
 

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: RESTEASY-1261 Use queryStringEncoding for the fragment  Use queryStringEncoding instead of queryNameValueEncoding for encoding the fragment part of a URI
Code Diff: @@ -180,7 +180,7 @@ public class Encode
     */
    public static String encodeFragment(String value)
    {
-      return encodeValue(value, queryNameValueEncoding);
+      return encodeValue(value, queryStringEncoding);
    }
 
    /**

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: 8002169: TEST_BUG: compiler/7009359/Test7009359.java sometimes times out  Make the test less prone to timeout by reducing the amount of iteration and allowing main to be compiled
Code Diff: @@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -27,13 +27,13 @@
  * @bug 7009359
  * @summary HS with -XX:+AggressiveOpts optimize new StringBuffer(null) so it does not throw NPE as expected
  *
- * @run main/othervm -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+OptimizeStringConcat -XX:CompileCommand=exclude,Test7009359,main Test7009359
+ * @run main/othervm -Xbatch -XX:+IgnoreUnrecognizedVMOptions -XX:+OptimizeStringConcat -XX:CompileCommand=dontinline,Test7009359,stringmakerBUG Test7009359
  *
  */
 
 public class Test7009359 {
     public static void main (String[] args) {
-        for(int i = 0; i < 1000000; i++) {
+        for(int i = 0; i < 100000; i++) {
             if(!stringmakerBUG(null).equals("NPE")) {
                 System.out.println("StringBuffer(null) does not throw NPE");
                 System.exit(97);

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: [STATS] print Total_* stats on their own line  llvm-svn: 266633
Code Diff: @@ -343,7 +343,10 @@ void kmp_stats_output_module::printTimerStats(FILE *statsOut, statistic const *
         char tag = timeStat::noUnits(s) ? ' ' : 'T';
 
         fprintf (statsOut, "%-28s, %s\n", timeStat::name(s), stat->format(tag, true).c_str());
-        // Also print the Total_ versions of times.
+    }
+    // Also print the Total_ versions of times.
+    for (timer_e s = timer_e(0); s<TIMER_LAST; s = timer_e(s+1)) {
+        char tag = timeStat::noUnits(s) ? ' ' : 'T';
         if (totalStats && !timeStat::noTotal(s))
             fprintf(statsOut, "Total_%-22s, %s\n", timeStat::name(s), totalStats[s].format(tag, true).c_str());
     }

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: 'Fix' property test by ignoring date cases. Is referenced by issue #132
Code Diff: @@ -158,7 +158,9 @@ class TestUnit(TestCase):
     @given(sfst.get_frame()) # type: ignore
     def test_frame_isin(self, f1: Frame) -> None:
         value = f1.iloc[0, 0]
-        if not isna_element(value):
+        if (not isna_element(value) and
+                not isinstance(value, np.datetime64) and
+                not isinstance(value, np.timedelta64)):
             self.assertTrue(f1.isin((value,)).iloc[0, 0])
 
 

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Wait 5 minutes after offroad before changing thresholds (#2113)
Code Diff: @@ -276,7 +276,8 @@ def thermald_thread():
     # If device is offroad we want to cool down before going onroad
     # since going onroad increases load and can make temps go over 107
     # We only do this if there is a relay that prevents the car from faulting
-    if max_cpu_temp > 107. or bat_temp >= 63. or (has_relay and (started_ts is None) and max_cpu_temp > 70.0):
+    is_offroad_for_5_min = (started_ts is None) and ((not started_seen) or (off_ts is None) or (sec_since_boot() - off_ts > 60 * 5))
+    if max_cpu_temp > 107. or bat_temp >= 63. or (has_relay and is_offroad_for_5_min and max_cpu_temp > 70.0):
       # onroad not allowed
       thermal_status = ThermalStatus.danger
     elif max_comp_temp > 96.0 or bat_temp > 60.:

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: extract-word: Check for early bail out before inspecting separators

It's a pretty small optimization but doesn't hurt...

Tested with test-extract-word.
Code Diff: @@ -39,13 +39,13 @@ int extract_first_word(const char **p, char **ret, const char *separators, Extra
         assert(p);
         assert(ret);
 
-        if (!separators)
-                separators = WHITESPACE;
-
         /* Bail early if called after last value or with no input */
         if (!*p)
                 goto finish_force_terminate;
 
+        if (!separators)
+                separators = WHITESPACE;
+
         /* Parses the first word of a string, and returns it in
          * *ret. Removes all quotes in the process. When parsing fails
          * (because of an uneven number of quotes or similar), leaves

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: python: prefer cv::Mat over cv::UMat in python binding
Code Diff: @@ -854,7 +854,22 @@ class FuncInfo(object):
 
         all_code_variants = []
 
+        # See https://github.com/opencv/opencv/issues/25928
+        # Conversion to UMat is expensive more than conversion to Mat.
+        # To reduce this cost, conversion to Mat is prefer than to UMat.
+        variants = []
+        variants_umat = []
         for v in self.variants:
+            hasUMat = False
+            for a in v.args:
+                hasUMat = hasUMat or "UMat" in a.tp
+            if hasUMat :
+                variants_umat.append(v)
+            else:
+                variants.append(v)
+        variants.extend(variants_umat)
+
+        for v in variants:
             code_decl = ""
             code_ret = ""
             code_cvt_list = []

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: device: optimize nm_manager_get_connection_iface()
Code Diff: @@ -987,6 +987,20 @@ nm_manager_get_connection_iface (NMManager *self,
 		return NULL;
 	}
 
+	if (   !out_parent
+	    && !NM_DEVICE_FACTORY_GET_INTERFACE (factory)->get_connection_iface) {
+		/* optimization. Shortcut lookup of the partent device. */
+		iface = g_strdup (nm_connection_get_interface_name (connection));
+		if (!iface) {
+			g_set_error (error,
+			             NM_MANAGER_ERROR,
+			             NM_MANAGER_ERROR_FAILED,
+			             "failed to determine interface name: error determine name for %s",
+			             nm_connection_get_connection_type (connection));
+		}
+		return iface;
+	}
+
 	parent = find_parent_device_for_connection (self, connection, factory);
 	iface = nm_device_factory_get_connection_iface (factory,
 	                                                connection,

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: make statistics and timing info print even if the JIT'd program calls exit instead of returning from main.  llvm-svn: 32414
Code Diff: @@ -57,7 +57,7 @@ namespace {
 // main Driver function
 //
 int main(int argc, char **argv, char * const *envp) {
-  llvm_shutdown_obj X;  // Call llvm_shutdown() on exit.
+  atexit(llvm_shutdown);  // Call llvm_shutdown() on exit.
   try {
     cl::ParseCommandLineOptions(argc, argv,
                                 " llvm interpreter & dynamic compiler\n");

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: #5644 - fix issue editing contact on mobile app
Code Diff: @@ -48,7 +48,9 @@ public abstract class JurisdictionValidator<T> {
 			final List<T> jurisdictionTypes = new ArrayList<>();
 			jurisdictionTypes.add(isInJurisdiction());
 			for (JurisdictionValidator<T> jurisdictionValidator : associatedJurisdictionValidators) {
-				jurisdictionTypes.add(jurisdictionValidator.isInJurisdiction());
+				if (jurisdictionValidator != null) {
+					jurisdictionTypes.add(jurisdictionValidator.isInJurisdiction());
+				}
 			}
 			return or(jurisdictionTypes);
 		} else {

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: branch: use write_file_buf instead of write_file

If we already have a strbuf, then using write_file_buf is a
little nicer to read (no wondering whether "%s" will eat
your NULs), and it's more efficient (no extra formatting
step).

We don't care about the newline magic of write_file(), as we
have our own multi-line content.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -618,7 +618,7 @@ static int edit_branch_description(const char *branch_name)
 		    "  %s\n"
 		    "Lines starting with '%c' will be stripped.\n",
 		    branch_name, comment_line_char);
-	write_file(git_path(edit_description), "%s", buf.buf);
+	write_file_buf(git_path(edit_description), buf.buf, buf.len);
 	strbuf_reset(&buf);
 	if (launch_editor(git_path(edit_description), &buf, NULL)) {
 		strbuf_release(&buf);

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: search.py: use 'number' type for ID column
Code Diff: @@ -349,7 +349,7 @@ class Search(UserInterface):
         color_col = 17
         self.cols = cols = initialise_columns(
             self.frame, "file_search", self.ResultsList,
-            ["id", _("ID"), 50, "text", color_col],
+            ["id", _("ID"), 50, "number", color_col],
             ["user", _("User"), 200, "text", color_col],
             ["country", _("Country"), 25, "icon", None],
             ["speed", _("Speed"), 100, "number", color_col],

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: fix: activate optuna for lgbm_array iff horizon < 10
Code Diff: @@ -49,7 +49,7 @@ class LightGBMArray(BaseMixer):
                                 dtype_dict,
                                 input_cols,
                                 False,  # fit_on_dev,
-                                True,  # use_optuna
+                                True if tss.horizon < 10 else False,  # use_optuna
                                 target_encoder)
                        for _, target_col in zip(range(self.horizon), [target] + self.offset_pred_cols)]
         self.ts_analysis = ts_analysis

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Don't put addresses into queue

- attempt to fix #1598
- seems to work
- addresses won't be uploaded/announced anymore other than after connecting,
  Later I need to find out how to announce them without causing problems, but
  for the time disabling this seems an acceptable drawback
Code Diff: @@ -31,7 +31,7 @@ from network.dandelion import Dandelion
 from network.proxy import ProxyError
 from node import Node, Peer
 from objectracker import ObjectTracker, missingObjects
-from queues import addrQueue, invQueue, objectProcessorQueue, portCheckerQueue
+from queues import invQueue, objectProcessorQueue, portCheckerQueue
 from randomtrackingdict import RandomTrackingDict
 
 logger = logging.getLogger('default')
@@ -466,8 +466,9 @@ class BMProto(AdvancedDispatcher, ObjectTracker):
                             }
                     # since we don't track peers outside of knownnodes,
                     # only spread if in knownnodes to prevent flood
-                    addrQueue.put((stream, peer, seenTime,
-                                   self.destination))
+                    # DISABLED TO WORKAROUND FLOOD/LEAK
+                    # addrQueue.put((stream, peer, seenTime,
+                    #               self.destination))
         return True
 
     def bm_command_portcheck(self):

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Switch to using logger instead of a print statement
Code Diff: @@ -16,6 +16,7 @@ from astropy._erfa.core import ErfaWarning
 from astropy.constants import c as speed_of_light
 
 from sunpy.time import parse_time
+from sunpy import log
 
 from .frames import HeliographicStonyhurst as HGS
 from .transformations import _SUN_DETILT_MATRIX
@@ -37,7 +38,7 @@ def get_body_heliographic_stonyhurst(body, time='now', observer=None):
     time : various
         Time to use as `~astropy.time.Time` or in a parse_time-compatible format
     observer : `~astropy.coordinates.SkyCoord`
-        If not None, the returned coordinate is the apparent location (i.e., factors in light
+        If not None, the returned coordinate is the apparent location (i.e., accounts for light
         travel time)
 
     Returns
@@ -63,7 +64,8 @@ def get_body_heliographic_stonyhurst(body, time='now', observer=None):
             light_travel_time = distance / speed_of_light
             emitted_time = obstime - light_travel_time
 
-        print('Apparent location factors in {} seconds of light travel time'.format(light_travel_time.to('s').value))
+        log.info(f"Apparent body location accounts for {light_travel_time.to('s').value:.2f}"
+                  " seconds of light travel time")
 
     body_hgs = ICRS(body_icrs).transform_to(HGS(obstime=obstime))
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: shortlog: optimize "--summary" mode

If the user asked us only to show counts for each author,
rather than the individual summary lines, then there is no
point in us generating the summaries only to throw them
away. With this patch, I measured the following speedup for
"git shortlog -ns HEAD" on linux.git (best-of-five):

  [before]
  real    0m5.644s
  user    0m5.472s
  sys     0m0.176s

  [after]
  real    0m5.257s
  user    0m5.104s
  sys     0m0.156s

That's only ~7%, but it's so easy to do, there's no good
reason not to. We don't have to touch any downstream code,
since we already fill in the magic string "<none>" to handle
commits without a message.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -132,10 +132,12 @@ void shortlog_add_commit(struct shortlog *log, struct commit *commit)
 		goto out;
 	}
 
-	if (log->user_format)
-		pretty_print_commit(&ctx, commit, &oneline);
-	else
-		format_commit_message(commit, "%s", &oneline, &ctx);
+	if (!log->summary) {
+		if (log->user_format)
+			pretty_print_commit(&ctx, commit, &oneline);
+		else
+			format_commit_message(commit, "%s", &oneline, &ctx);
+	}
 
 	insert_one_record(log, author.buf, oneline.len ? oneline.buf : "<none>");
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: k/topic_utils: do not return an error when waiting for leaders failed

Recently introduced change (waiting for leaders before returning from
create topics) change the behavior of `CreateTopicsRequest` handler.
Previously handler was waiting for topic partitions to be created but
even if that timed out it returned success to the client. Waiting for
leaders threw an exception when timeout was trigger which caused client
connection to be dropped.

Fixed an error by going back to previous behavior i.e. ignoring waiting
timeouts. The timeout does not indicate that topic creation failed
actually when waiting for creation topic already exists.

Fixes: #7942

Signed-off-by: Michal Maslanka <michal@redpanda.com>
Code Diff: @@ -79,7 +79,11 @@ ss::future<> wait_for_topics(
                    })
             .then([&md_cache, &results, timeout]() {
                 return wait_for_leaders(md_cache, results, timeout)
-                  .discard_result();
+                  .discard_result()
+                  .handle_exception_type([](const ss::timed_out_error&) {
+                      // discard timed out exception, even tho waiting failed
+                      // the topic is created
+                  });
             });
       });
 }

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Replaced pow with a multiply
Code Diff: @@ -43,7 +43,7 @@ void compute_sigma_clipped_bounds(double data_buffer[], int count, int use_media
 
       std = 0;
       for (i = 0; i < count; i++) {
-        std += pow(mean - data_buffer[i], 2);
+        std += (data_buffer[i] - mean) * (data_buffer[i] - mean);
       }
       std = sqrt(std / count);
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Use io.BytesIO rather than io.StringIO since we are working with bytearrays now.
Code Diff: @@ -578,8 +578,8 @@ class Packets(list):
     @staticmethod
     def fromstring(string):
         """Load all the packets in a string buffer."""
-        from io import StringIO
-        return fromfile(StringIO(string))
+        from io import BytesIO
+        return fromfile(BytesIO(string))
 
     @staticmethod
     def fromfile(fileHandle):

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Fix burning CPU with udev disabled on Flatpak

Fixes #67355.
Code Diff: @@ -218,8 +218,8 @@ void JoypadLinux::monitor_joypads() {
 			}
 		}
 		closedir(input_directory);
+		usleep(1000000); // 1s
 	}
-	usleep(1000000); // 1s
 }
 
 void JoypadLinux::close_joypads() {

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: feat: Add 5 minute time limit to tasks
Code Diff: @@ -156,6 +156,10 @@ def create_app(_read_config=True, **config):
     app.config['CELERY_SEND_EVENTS'] = False
     app.config['CELERY_TASK_RESULT_EXPIRES'] = 1
     app.config['CELERY_TASK_SERIALIZER'] = 'zeus_json'
+    # dont let any task run longer than 5 minutes
+    app.config['CELERY_TASK_SOFT_TIME_LIMIT'] = 300
+    # hard kill tasks after 6 minutes
+    app.config['CELERY_TASK_TIME_LIMIT'] = 360
     app.config['CELERYD_PREFETCH_MULTIPLIER'] = 1
     app.config['CELERYD_MAX_TASKS_PER_CHILD'] = 10000
     app.config['CELERYBEAT_SCHEDULE_FILE'] = os.path.join(

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: util: optimize free_and_strdup() if NOP

Under the assumption that strcmp() is cheaper than memory allocation,
let's avoid the allocation, if the new value is identical to the old.
Code Diff: @@ -5682,6 +5682,9 @@ int free_and_strdup(char **p, const char *s) {
         /* Replaces a string pointer with an strdup()ed new string,
          * possibly freeing the old one. */
 
+        if (streq_ptr(*p, s))
+                return 0;
+
         if (s) {
                 t = strdup(s);
                 if (!t)
@@ -5692,7 +5695,7 @@ int free_and_strdup(char **p, const char *s) {
         free(*p);
         *p = t;
 
-        return 0;
+        return 1;
 }
 
 int sethostname_idempotent(const char *s) {

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: cgroup-util: check unified_cache before invoking streq()

Just a minor optimization.
Code Diff: @@ -2340,10 +2340,13 @@ bool cg_unified(const char *controller) {
 
         assert(cg_update_unified() >= 0);
 
-        if (streq_ptr(controller, SYSTEMD_CGROUP_CONTROLLER))
-                return unified_cache >= CGROUP_UNIFIED_SYSTEMD;
-        else
-                return unified_cache >= CGROUP_UNIFIED_ALL;
+        if (unified_cache == CGROUP_UNIFIED_NONE)
+                return false;
+
+        if (unified_cache >= CGROUP_UNIFIED_ALL)
+                return true;
+
+        return streq_ptr(controller, SYSTEMD_CGROUP_CONTROLLER);
 }
 
 bool cg_all_unified(void) {

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Update NodePaths only in built-in resources
Code Diff: @@ -1812,8 +1812,6 @@ bool SceneTreeDock::_check_node_path_recursive(Node *p_root_node, Variant &r_var
 			}
 		} break;
 
-// FIXME: This approach causes a significant performance regression, see GH-84910.
-#if 0
 		case Variant::OBJECT: {
 			Resource *resource = Object::cast_to<Resource>(r_variant);
 			if (!resource) {
@@ -1825,6 +1823,11 @@ bool SceneTreeDock::_check_node_path_recursive(Node *p_root_node, Variant &r_var
 				break;
 			}
 
+			if (!resource->is_built_in()) {
+				// For performance reasons, assume that scene paths are no concern for external resources.
+				break;
+			}
+
 			List<PropertyInfo> properties;
 			resource->get_property_list(&properties);
 
@@ -1841,9 +1844,7 @@ bool SceneTreeDock::_check_node_path_recursive(Node *p_root_node, Variant &r_var
 					undo_redo->add_undo_property(resource, propertyname, old_variant);
 				}
 			}
-			break;
-		};
-#endif
+		} break;
 
 		default: {
 		}

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: libnm-util: optimize nm_utils_hwaddr_ntoa_len()

Signed-off-by: Thomas Haller <thaller@redhat.com>
Code Diff: @@ -2154,18 +2154,26 @@ char *
 nm_utils_hwaddr_ntoa_len (gconstpointer addr, gsize length)
 {
 	const guint8 *in = addr;
-	GString *out;
+	char *out, *result;
+	const char *LOOKUP = "0123456789ABCDEF";
 
-	g_return_val_if_fail (addr && length, g_strdup (""));
-
-	out = g_string_new (NULL);
-	while (length--) {
-		if (out->len)
-			g_string_append_c (out, ':');
-		g_string_append_printf (out, "%02X", *in++);
+	if (!addr || !length) {
+		g_return_val_if_reached (g_strdup (""));
+		return g_strdup ("");
 	}
 
-	return g_string_free (out, FALSE);
+	result = out = g_malloc (length * 3);
+	for (;;) {
+		guint8 v = *in++;
+
+		*out++ = LOOKUP[v >> 4];
+		*out++ = LOOKUP[v & 0x0F];
+		if (--length == 0) {
+			*out = 0;
+			return result;
+		}
+		*out++ = ':';
+	}
 }
 
 /**

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: allowing as many frames as wanted, no 200 lock
Code Diff: @@ -161,8 +161,10 @@ def generate(args, anim_args, root, frame = 0, return_sample=False):
     blendFactor = .075
     colorCorrectionFactor = .075
     jsonImages = json.loads(args.init_image)
-    framesToTweenOn = list(jsonImages.keys())[1:]
-    frameToChoose = (frame >= int(framesToTweenOn[0])) + (frame >= int(framesToTweenOn[1])) + (frame >= int(framesToTweenOn[2])) + (frame >= int(framesToTweenOn[3]))
+    framesToImageSwapOn = list(jsonImages.keys())[1:]
+    frameToChoose = 0
+    for swappingFrame in framesToImageSwapOn:
+        frameToChoose += (frame >= int(swappingFrame))# + (frame >= int(framesToTweenOn[1])) + (frame >= int(framesToTweenOn[2])) + (frame >= int(framesToTweenOn[3]))
     
     if frame % 50 <= tweeningFrames: # number of tweening frames
         blendFactor = .35 - .25*math.cos((frame % tweeningFrames) / (tweeningFrames / 2))

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: hashmap: optimize set_put_strdup() a bit

Hashing should be quicker than allocating, hence let's first check if the
string already exists and only then allocate a new copy for it.
Code Diff: @@ -1773,20 +1773,18 @@ int set_consume(Set *s, void *value) {
 
 int set_put_strdup(Set *s, const char *p) {
         char *c;
-        int r;
 
         assert(s);
         assert(p);
 
+        if (set_contains(s, (char*) p))
+                return 0;
+
         c = strdup(p);
         if (!c)
                 return -ENOMEM;
 
-        r = set_consume(s, c);
-        if (r == -EEXIST)
-                return 0;
-
-        return r;
+        return set_consume(s, c);
 }
 
 int set_put_strdupv(Set *s, char **l) {

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Replace try-import-catch with a call to is_module
Code Diff: @@ -8,13 +8,9 @@ import betse.pathtree as pathtree
 import betse.util.io.log.logs as logs
 from betse.exceptions import BetseFunctionException
 from betse.repl.environment import repl_env
+from betse.util.py import modules
 
-# Attempt to import the ptpython module
-try:
-    from ptpython.repl import embed
-    __has_ptpython = True
-except ImportError:
-    __has_ptpython = False
+__has_ptpython = modules.is_module('ptpython')
 
 def start_repl(repl_type : str = None):
     '''
@@ -66,6 +62,7 @@ def start_ptpython_repl():
     '''
     Start a REPL built around the `ptpython` module
     '''
+    from ptpython.repl import embed
     try:
         embed(globals=None, locals=repl_env,
             history_filename=pathtree.REPL_HISTORY_FILENAME)

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: chore: warning only in debug mode  仅仅在debug时打印警告日志  Log: Influence: log
Code Diff: @@ -50,6 +50,8 @@ int dtkVersion()
 
 const char *dtkVersionString()
 {
+#ifdef QT_DEBUG
     qWarning() << "Use DTK_VERSION_STR instead.";
+#endif
     return "";//DTK_VERSION_STR;
 }

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: #12256 - [Users] Loop of loading when updating the user role of a specific user
Code Diff: @@ -923,7 +923,9 @@ public class UserFacadeEjb implements UserFacade {
 		Set<User> possibleUsersForAvailableFacilities = new HashSet<>();
 
 		possibleFacilities.forEach(facility -> {
-			if (!FacilityDto.NONE_FACILITY_UUID.equals(facility.getUuid()) && !FacilityDto.OTHER_FACILITY_UUID.equals(facility.getUuid())) {
+			if (facility != null
+				&& !FacilityDto.NONE_FACILITY_UUID.equals(facility.getUuid())
+				&& !FacilityDto.OTHER_FACILITY_UUID.equals(facility.getUuid())) {
 				possibleUsersForAvailableFacilities.addAll(userService.getFacilityUsersOfHospital(facility));
 			}
 		});

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: rptest/scale_tests: limit producer rate in test
Code Diff: @@ -40,6 +40,12 @@ class ManyClientsTest(RedpandaTest):
             # Enable segment size jitter as this is a stress test and does not
             # rely on exact segment counts.
             'log_segment_size_jitter_percent': 5,
+            # This limit caps the produce throughput to a sustainable rate for a RP
+            # cluster that has 384MB of memory per shard. It is set here to
+            # since our current backpressure mechanisms will allow producers to
+            # produce at a much higher rate and cause RP to run out of memory.
+            'target_quota_byte_rate':
+            31460000,  # 30MiB/s of throughput per shard
         }
         super().__init__(*args, **kwargs)
 

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Extend time after which the version checking will happen on startup
Code Diff: @@ -577,7 +577,7 @@ class DMX(PropertyGroup):
         self.ensure_application_uuid()
         self.check_python_version()
         self.check_blender_version()
-        Timer(1, bpy.ops.dmx.check_version, ()).start()
+        Timer(5, bpy.ops.dmx.check_version, ()).start()
         self.logging_level = "ERROR" # setting default logging level
 
     # Unlink Add-on from file

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: [tls] only load default locations if they are defined
Code Diff: @@ -277,12 +277,15 @@ def verify_certificate(
         lib.X509_STORE_set_default_paths(store), "X509_STORE_set_default_paths"
     )
     paths = ssl.get_default_verify_paths()
-    openssl_assert(
-        lib.X509_STORE_load_locations(
-            store, openssl_encode_path(paths.cafile), openssl_encode_path(paths.capath)
-        ),
-        "X509_STORE_load_locations",
-    )
+    if paths.cafile is not None or paths.capath is not None:
+        openssl_assert(
+            lib.X509_STORE_load_locations(
+                store,
+                openssl_encode_path(paths.cafile),
+                openssl_encode_path(paths.capath),
+            ),
+            "X509_STORE_load_locations",
+        )
 
     # load extra CAs
     if cadata is not None:

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: fileio: try to read one byte too much in read_full_stream()

Let's read one byte more than the file size we read from stat() on the
first fread() invocation. That way, the first read() will already be
short and indicate eof to fread().

This is a minor optimization, and replaces #3908.
Code Diff: @@ -270,11 +270,11 @@ int read_full_stream(FILE *f, char **contents, size_t *size) {
                 if (st.st_size > READ_FULL_BYTES_MAX)
                         return -E2BIG;
 
-                /* Start with the right file size, but be prepared for
-                 * files from /proc which generally report a file size
-                 * of 0 */
+                /* Start with the right file size, but be prepared for files from /proc which generally report a file
+                 * size of 0. Note that we increase the size to read here by one, so that the first read attempt
+                 * already makes us notice the EOF. */
                 if (st.st_size > 0)
-                        n = st.st_size;
+                        n = st.st_size + 1;
         }
 
         l = 0;

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: [AST] hasAttr followed by getAttr isn't efficient

Just use getAttr because we are interested in the attribute's contents.

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@237336 91177308-0d34-0410-b5e6-96231b3b80d8
Code Diff: @@ -1915,10 +1915,13 @@ VarDecl::isThisDeclarationADefinition(ASTContext &C) const {
   if (hasInit())
     return Definition;
 
-  if (hasAttr<AliasAttr>() ||
-      (hasAttr<SelectAnyAttr>() && !getAttr<SelectAnyAttr>()->isInherited()))
+  if (hasAttr<AliasAttr>())
     return Definition;
 
+  if (const auto *SAA = getAttr<SelectAnyAttr>())
+    if (!SAA->isInherited())
+      return Definition;
+
   // A variable template specialization (other than a static data member
   // template or an explicit specialization) is a declaration until we
   // instantiate its initializer.

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: truncateSpectrum function improved  Now works for very small slices and/or small arrays
Code Diff: @@ -11,13 +11,10 @@ import h5py
 import numpy as np
 import os
 import matplotlib.pyplot as plt
-from scipy import sparse
-import scipy.sparse.linalg as splu
 from scipy.signal import butter, filtfilt
 from lmfit.models import GaussianModel
 import time
 from random import randint
-import scipy.optimize as spo
 import re
 
 if __name__ == '__main__':
@@ -239,6 +236,17 @@ def truncateSpectrum(x, y, startWl = 450, finishWl = 900):
 
     xTrunc = np.array(x[startIndex:finishIndex])
     yTrunc = np.array(y[startIndex:finishIndex])
+
+    if xTrunc.size <= 10 and x.size <= 100:
+
+        if startWl > finishWl:
+            wl1 = finishWl
+            wl2 = startWl
+            startWl = wl1
+            finishWl = wl2
+
+        xTrunc, yTrunc = np.transpose(np.array([[i, y[n]] for n, i in enumerate(x) if startWl < i < finishWl]))
+
     return np.array([xTrunc, yTrunc])
 
 def plotStackedMap(x, yData, imgName = 'Stack', plotTitle = 'Stack', closeFigures = False, init = False, vmin = 0, vmax = 6):

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: wait three seconds between canteens in a list
Code Diff: @@ -5,6 +5,7 @@ import canteens.cafenero
 import canteens.singh
 import canteens.personalkantine
 import canteens.studierendenwerk
+import time
 
 logger = get_task_logger(__name__)
 
@@ -14,6 +15,7 @@ def update_canteens(canteens):
         logger.info('[Update] %s' % canteen.name)
         menu = canteen.update(url=canteen.url)
         cache.set(canteen.id_, menu, ex=cache_interval*2)
+        time.sleep(3)
 
 
 @app.task

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Optimizing gmpe_table._get_mean
Code Diff: @@ -50,11 +50,8 @@ def _get_mean_(kind, data, dists, table_dists):
     :return:
         The mean intensity measure level from the tables.
     """
-    # For values outside of the interpolation range use -999. to ensure
     # value is identifiable and outside of potential real values
-    interpolator_mean = interp1d(
-        table_dists, data, bounds_error=False, fill_value=-999.)
-    mean = interpolator_mean(dists)
+    mean = numpy.interp(dists, table_dists, data)
     # For those distances less than or equal to the shortest distance
     # extrapolate the shortest distance value
     mean[dists < (table_dists[0] + 1.0E-3)] = data[0]

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: use LogNorm from mpl instead of astropys LogStretch (#186)
Code Diff: @@ -1,9 +1,11 @@
 from __future__ import division, print_function
+import sys
 
 from astropy.visualization import (PercentileInterval, ImageNormalize,
-                                   SqrtStretch, LogStretch, LinearStretch)
+                                   SqrtStretch, LinearStretch)
 from astropy.time import Time
 import matplotlib.pyplot as plt
+from matplotlib.colors import LogNorm
 import numpy as np
 
 
@@ -305,7 +307,10 @@ def plot_image(image, ax=None, scale='linear', origin='lower',
         elif scale == 'sqrt':
             norm = ImageNormalize(vmin=vmin, vmax=vmax, stretch=SqrtStretch())
         elif scale == 'log':
-            norm = ImageNormalize(vmin=vmin, vmax=vmax, stretch=LogStretch())
+            # To use log scale we need to guarantee that vmin > 0, so that
+            # we avoid division by zero and/or negative values.
+            norm = LogNorm(vmin=max(vmin, sys.float_info.epsilon), vmax=vmax,
+                           clip=True)
         else:
             raise ValueError("scale {} is not available.".format(scale))
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: remove +1 from size that was cutting off first char of copied files when a recursive dir
Code Diff: @@ -97,7 +97,7 @@ class ActionModule(ActionBase):
         if os.path.isdir(source):
             # Get the amount of spaces to remove to get the relative path.
             if source_trailing_slash:
-                sz = len(source) + 1
+                sz = len(source)
             else:
                 sz = len(source.rsplit('/', 1)[0]) + 1
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: auth-manager: emit signal by ID

It's more efficient, as it saves a lookup by name. Also,
it's more idiomatic to do it this way. I didn't find where
the signal gets emitted at first, because usually we don't emit
by name.
Code Diff: @@ -353,7 +353,7 @@ static void
 _emit_changed_signal (NMAuthManager *self)
 {
 	_LOGD ("emit changed signal");
-	g_signal_emit_by_name (self, NM_AUTH_MANAGER_SIGNAL_CHANGED);
+	g_signal_emit (self, signals[CHANGED_SIGNAL], 0);
 }
 
 static void

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: optimize: save inspection of already-inspected data

this is just a small improvement, but let's get the benefit ;)
Code Diff: @@ -382,7 +382,9 @@ SanitizeMsg(msg_t *pMsg)
 		FINALIZE;
 	}
 
-	/* now copy over the message and sanitize it */
+	/* now copy over the message and sanitize it. Note that up to iSrc-1 there was
+	 * obviously no need to sanitize, so we can go over that quickly...
+	 */
 	iMaxLine = glbl.GetMaxLine();
 	maxDest = lenMsg * 4; /* message can grow at most four-fold */
 	if(maxDest > iMaxLine)
@@ -391,7 +393,11 @@ SanitizeMsg(msg_t *pMsg)
 		pDst = szSanBuf;
 	else 
 		CHKmalloc(pDst = MALLOC(sizeof(uchar) * (iMaxLine + 1)));
-	iSrc = iDst = 0;
+	if(iSrc > 0) {
+		iSrc--; /* go back to where everything is OK */
+		memcpy(pDst, pszMsg, iSrc); /* fast copy known good */
+	}
+	iDst = iSrc;
 	while(iSrc < lenMsg && iDst < maxDest - 3) { /* leave some space if last char must be escaped */
 		if((pszMsg[iSrc] < 32) && (pszMsg[iSrc] != '\t' || bEscapeTab)) {
 			/* note: \0 must always be escaped, the rest of the code currently

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: perf(core): make sympify faster for Basic subclasses.

The behaviour of sympify was changed in

  https://github.com/sympy/sympy/pull/20128

so that sympifying a Basic subclass would be an error when strict=True.
That change made the codepath for calling e.g. _sympify(Basic) slower as
more checks would be done before returning. This commit adds an early
raise for the case of calling _sympify(a) where a is a Basic subclass.
Code Diff: @@ -344,8 +344,13 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,
     #
     # https://github.com/sympy/sympy/issues/20124
     is_sympy = getattr(a, '__sympy__', None)
-    if is_sympy is True or (is_sympy is not None and not strict):
+    if is_sympy is True:
         return a
+    elif is_sympy is not None:
+        if not strict:
+            return a
+        else:
+            raise SympifyError(a)
 
     if isinstance(a, CantSympify):
         raise SympifyError(a)

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: optimize: iscntrl() seems to be surprisingly slow

at least so tells the profiler...
Code Diff: @@ -362,11 +362,10 @@ SanitizeMsg(msg_t *pMsg)
 	 */
 	int bNeedSanitize = 0;
 	for(iSrc = 0 ; iSrc < lenMsg ; iSrc++) {
-		if(iscntrl(pszMsg[iSrc])) {
+		if(pszMsg[iSrc] < 32) {
 			if(bSpaceLFOnRcv && pszMsg[iSrc] == '\n')
 				pszMsg[iSrc] = ' ';
-			else
-			if(pszMsg[iSrc] == '\0' || bEscapeCCOnRcv) {
+			else if(pszMsg[iSrc] == '\0' || bEscapeCCOnRcv) {
 				bNeedSanitize = 1;
 				if (!bSpaceLFOnRcv)
 					break;
@@ -394,7 +393,7 @@ SanitizeMsg(msg_t *pMsg)
 		CHKmalloc(pDst = MALLOC(sizeof(uchar) * (iMaxLine + 1)));
 	iSrc = iDst = 0;
 	while(iSrc < lenMsg && iDst < maxDest - 3) { /* leave some space if last char must be escaped */
-		if(iscntrl((int) pszMsg[iSrc]) && (pszMsg[iSrc] != '\t' || bEscapeTab)) {
+		if((pszMsg[iSrc] < 32) && (pszMsg[iSrc] != '\t' || bEscapeTab)) {
 			/* note: \0 must always be escaped, the rest of the code currently
 			 * can not handle it! -- rgerhards, 2009-08-26
 			 */

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Corrected urban features logging when elapsed time > 24hrs
Code Diff: @@ -159,7 +159,8 @@ def compute_full_urban_features(city_ref, df_osm_built=None, df_osm_pois=None, g
 	# Save to GeoJSON file (no projection conserved, then use EPSG 4326)
 	ox.project_gdf(df_insee_urban_features, to_latlong=True).to_file( get_population_urban_features_filename(city_ref, data_source), driver='GeoJSON' )
 
-	log("Done: Urban features calculation. Elapsed time (H:M:S): " + time.strftime("%H:%M:%S", time.gmtime(time.time()-start)) )
+	elapsed_time = time.time() - start
+	log("Done: Urban features calculation. Elapsed time (H:M:S): " + '{:02d}:{:02d}:{:02d}'.format(elapsed_time // 3600, (elapsed_time % 3600 // 60), elapsed_time % 60) )
 	
 	return df_insee_urban_features
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: search results fix for user id (second)
Code Diff: @@ -29,10 +29,11 @@ def search(request):
     if form.is_valid():
         query = form.cleaned_data['query']
         searchresults = User.objects.filter(Q(first_name__icontains=query) | Q(last_name__icontains=query))
-        for i in range(len(searchresults)):
-            searchresults[i] = searchresults[i].get_profile()
+        sr = []
+        for r in searchresults:
+            sr.append(r.get_profile())
         return render_to_response('search_results.html',
-                                  {'searchresults': searchresults},
+                                  {'searchresults': sr},
                                   context_instance=RequestContext(request))
 
     return render_to_response('site_base.html', context_instance=RequestContext(request))

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Stop UDPSocket on socket.error 101 (Network is unreachable)
Code Diff: @@ -146,6 +146,9 @@ class UDPSocket(BMProto):  # pylint: disable=too-many-instance-attributes
             retval = self.socket.sendto(
                 self.write_buf, ('<broadcast>', self.port))
         except socket.error as e:
-            logger.error("socket error on sendato: %s", e)
+            logger.error("socket error on sendto: %s", e)
+            if e.errno == 101:
+                self.announcing = False
+                self.socket.close()
             retval = 0
         self.slice_write_buf(retval)

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: optimize: use built-in str comparison, as this is optimized in assembly

do only when possible. However, the profiler only shows as *very* minimal
effect.
Code Diff: @@ -870,13 +870,7 @@ int rsCStrSzStrCmp(cstr_t *pCS1, uchar *psz, size_t iLenSz)
 			 * length, so we need to actually check if they
 			 * are equal.
 			 */
-			register size_t i;
-			for(i = 0 ; i < iLenSz ; ++i) {
-				if(pCS1->pBuf[i] != psz[i])
-					return pCS1->pBuf[i] - psz[i];
-			}
-			/* if we arrive here, the strings are equal */
-			return 0;
+			return strncmp((char*)pCS1->pBuf, (char*)psz, iLenSz);
 		}
 	else
 		return pCS1->iStrLen - iLenSz;

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: log: do not free parents when walking reflog

When we're doing a reflog walk (instead of walking the
actual parent pointers), we may see commits multiple times.
For this reason, we hold on to the commit buffer for each
commit rather than freeing it after we've showed the commit.

We should do the same for the parent list. Right now this is
just a minor optimization. But once we refactor how reflog
walks are performed, keeping the parents will avoid
confusing us the second time we see the commit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -377,9 +377,9 @@ static int cmd_log_walk(struct rev_info *rev)
 			 * walking the reflogs.
 			 */
 			free_commit_buffer(commit);
+			free_commit_list(commit->parents);
+			commit->parents = NULL;
 		}
-		free_commit_list(commit->parents);
-		commit->parents = NULL;
 		if (saved_nrl < rev->diffopt.needed_rename_limit)
 			saved_nrl = rev->diffopt.needed_rename_limit;
 		if (rev->diffopt.degraded_cc_to_c)

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Correctly connect 'continue' and 'break' statements in Objective-C fast enumeration for blocks to the appropriate basic blocks.  llvm-svn: 59226
Code Diff: @@ -839,7 +839,14 @@ CFGBlock* CFGBuilder::VisitObjCForCollectionStmt(ObjCForCollectionStmt* S) {
   ConditionBlock->setTerminator(S); // No need to call FinishBlock; 1 stmt
   
   // Now create the true branch.
+  // Save the current values for the continue and break targets
+  SaveAndRestore<CFGBlock*> save_continue(ContinueTargetBlock),
+                            save_break(BreakTargetBlock); 
+  
+  BreakTargetBlock = LoopSuccessor;
+  ContinueTargetBlock = ConditionBlock;  
   Succ = ConditionBlock;
+  
   CFGBlock* BodyBlock = Visit(S->getBody());
   FinishBlock(BodyBlock);
   

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Bug 1237714.  Make nsContentUtils::IsCustomElementName faster in the common case of a non-custom-element name.  r=smaug
Code Diff: @@ -2773,11 +2773,14 @@ nsContentUtils::IsCustomElementName(nsIAtom* aName)
 {
   // The custom element name identifies a custom element and is a sequence of
   // alphanumeric ASCII characters that must match the NCName production and
-  // contain a U+002D HYPHEN-MINUS character.
+  // contain a U+002D HYPHEN-MINUS character.  We check for the HYPHEN-MINUS
+  // first, since that will typically not be present, which will allow us to
+  // return before doing the more expensive (and generally passing) CheckQName
+  // check.
   nsDependentAtomString str(aName);
   const char16_t* colon;
-  if (NS_FAILED(nsContentUtils::CheckQName(str, false, &colon)) || colon ||
-      str.FindChar('-') == -1) {
+  if (str.FindChar('-') == -1 ||
+      NS_FAILED(nsContentUtils::CheckQName(str, false, &colon)) || colon) {
     return false;
   }
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Increase UNIX socket backlog for performance under heavy load
Code Diff: @@ -441,7 +441,7 @@ static rsRetVal startupUXSrv(ptcpsrv_t *pSrv) {
 		ABORT_FINALIZE(RS_RET_ERR_CRE_AFUX);
 	}
 
-	if (listen(sock, 5) < 0) {
+	if (listen(sock, 511) < 0) {
 		errmsg.LogError(errno, RS_RET_ERR_CRE_AFUX, "imptcp: unix socket listen error");
 		ABORT_FINALIZE(RS_RET_ERR_CRE_AFUX);
 	}

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: avoid putting un-needed vars on chain stack and place them on nochain stack to reduce chain calls
Code Diff: @@ -43,7 +43,9 @@ void gradient(const F& f, const Eigen::Matrix<double, Eigen::Dynamic, 1>& x,
               double& fx, Eigen::Matrix<double, Eigen::Dynamic, 1>& grad_fx) {
   start_nested();
   try {
-    Eigen::Matrix<var, Eigen::Dynamic, 1> x_var(x);
+    Eigen::Matrix<var, Eigen::Dynamic, 1> x_var(x.size());
+    for (int i = 0; i < x.size(); ++i)
+      x_var(i) = var(new vari(x(i), false));
     var fx_var = f(x_var);
     fx = fx_var.val();
     grad_fx.resize(x.size());

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Remove extra vision transform that is no longer needed
Code Diff: @@ -147,7 +147,6 @@ protected void paintComponent(Graphics g) {
             pitVblTree);
 
     final var obstructedVision = new Area(unobstructedVision);
-    obstructedVision.transform(AffineTransform.getTranslateInstance(point.getX(), point.getY()));
 
     g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, .5f));
     if (vision != null) {

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Ignore tile URL sharding

The source returns sharded tile URLs, but sharding doesn’t buy us anything on native platforms, so always grab the first.

ref mapbox/mapbox-gl-native#2007
Code Diff: @@ -98,7 +98,7 @@ void SourceInfo::parseTileJSONProperties(const rapidjson::Value& value) {
 }
 
 std::string SourceInfo::tileURL(const TileID& id, float pixelRatio) const {
-    std::string result = tiles.at((id.x + id.y) % tiles.size());
+    std::string result = tiles.at(0);
     result = util::mapbox::normalizeTileURL(result, url, type);
     result = util::replaceTokens(result, [&](const std::string &token) -> std::string {
         if (token == "z") return util::toString(std::min(id.z, static_cast<int8_t>(max_zoom)));

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Show silent mode toast immediately, and for 3.5 seconds instead of 2.
Code Diff: @@ -255,18 +255,18 @@ class LockScreen extends LinearLayout implements KeyguardScreen, KeyguardUpdateM
                 textView.setCompoundDrawablePadding(4);
             }
         };
-        textView.postDelayed(mPendingR1, 400);
+        textView.postDelayed(mPendingR1, 0);
         mPendingR2 = new Runnable() {
             public void run() {
                 textView.setText("");
                 textView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
             }
         };
-        textView.postDelayed(mPendingR2, 2000);
+        textView.postDelayed(mPendingR2, 3500);
     }
     private Runnable mPendingR1;
     private Runnable mPendingR2;
-    
+
 
     private void refreshAlarmDisplay() {
         mNextAlarm = mLockPatternUtils.getNextAlarm();

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: libnm: optimize nm_simple_connection_new_clone() to not needlessly set the path

Server never sets the path, so this is entirely unused server-side.
Also NMConnection is a glib interface and stores it's private date
in the GObject's data. It's less efficient to look it up. Just
avoid it.
Code Diff: @@ -113,11 +113,16 @@ NMConnection *
 nm_simple_connection_new_clone (NMConnection *connection)
 {
 	NMConnection *clone;
+	const char *path;
 
 	g_return_val_if_fail (NM_IS_CONNECTION (connection), NULL);
 
 	clone = nm_simple_connection_new ();
-	nm_connection_set_path (clone, nm_connection_get_path (connection));
+
+	path = nm_connection_get_path (connection);
+	if (path)
+		nm_connection_set_path (clone, path);
+
 	nm_connection_replace_settings_from_connection (clone, connection);
 
 	return clone;

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: avoid divide by 0 in normalisation of zero length array
Code Diff: @@ -740,7 +740,8 @@ public class ArrayUtils {
 	}
 
 	/**
-	 * Normalise length of array to 1.0. Writes over array
+	 * Normalise length of array to 1.0. Writes over array. If the array is all
+	 * zeros, it will be unchanged.
 	 * 
 	 * @param array
 	 *            the array
@@ -751,6 +752,9 @@ public class ArrayUtils {
 		for (int i = 0; i < array.length; i++)
 			sumsq += array[i] * array[i];
 
+		if (sumsq == 0)
+			return array;
+
 		final double weight = 1.0f / Math.sqrt(sumsq);
 		for (int i = 0; i < array.length; i++)
 			array[i] *= weight;

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: add elapsed time to parse the OSM file
Code Diff: @@ -20,6 +20,8 @@
  *                                                                         *
  ***************************************************************************/
 """
+import logging
+import time
 from os.path import dirname, abspath, join, isfile
 
 from QuickOSM.core.api.connexion_oapi import ConnexionOAPI
@@ -34,6 +36,8 @@ from qgis.PyQt.QtWidgets import QApplication
 from qgis.core import (
     QgsVectorLayer, QgsVectorFileWriter, QgsAction, QgsProject, QgsWkbTypes)
 
+LOGGER = logging.getLogger('QuickOSM')
+
 
 def open_file(
         dialog=None,
@@ -69,7 +73,12 @@ def open_file(
 
     osm_parser.signalText.connect(dialog.set_progress_text)
     osm_parser.signalPercentage.connect(dialog.set_progress_percentage)
+
+    start_time = time.time()
     layers = osm_parser.parse()
+    elapsed_time = time.time() - start_time
+    parser_time = time.strftime("%Hh %Mm %Ss", time.gmtime(elapsed_time))
+    LOGGER.info('The OSM parser took: {}'.format(parser_time))
 
     # Finishing the process with geojson or memory layer
     num_layers = 0

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: dvc: optmize PathInfo.isin()

Should help with #2203
Code Diff: @@ -19,6 +19,10 @@ if is_py2:
 
 
 class PathInfo(pathlib.PurePath):
+    # Use __slots__ in PathInfo objects following PurePath implementation.
+    # This makes objects smaller and speeds up attribute access.
+    # We don't add any fields so it's empty.
+    __slots__ = ()
     scheme = "local"
 
     def __new__(cls, *args):
@@ -57,7 +61,9 @@ class PathInfo(pathlib.PurePath):
             other = self.__class__(other)
         elif self.__class__ != other.__class__:
             return False
-        return any(p == other for p in self.parents)
+        # Use cached casefolded parts to compare paths
+        n = len(other._cparts)
+        return len(self._cparts) > n and self._cparts[:n] == other._cparts
 
     # pathlib2 uses bytes internally in Python 2, and we use unicode everywhere
     # for paths in both pythons, thus we need this glue.

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: cleanup: || instead of |

More efficient with same result here.
Code Diff: @@ -502,13 +502,13 @@ static int _ignore_suspended_snapshot_component(struct device *dev)
 				log_error("Incorrect snapshot table found");
 				goto_out;
 			}
-			r = r | _device_is_suspended(major1, minor1) | _device_is_suspended(major2, minor2);
+			r = r || _device_is_suspended(major1, minor1) || _device_is_suspended(major2, minor2);
 		} else if (!strcmp(target_type, "snapshot-origin")) {
 			if (sscanf(params, "%d:%d", &major1, &minor1) != 2) {
 				log_error("Incorrect snapshot-origin table found");
 				goto_out;
 			}
-			r = r | _device_is_suspended(major1, minor1);
+			r = r || _device_is_suspended(major1, minor1);
 		}
 	} while (next);
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Fix for #1056
Code Diff: @@ -260,7 +260,11 @@ public interface Seq<T> extends ImmutableList<T>,
         return Cons.cons(value,this);
     }
     default Seq<T> prependAll(Iterable<? extends T> it){
-      return (Seq<T>)ImmutableList.super.prependAll(it);
+        Seq<T> res = this;
+        for(T next : it){
+            res = res.prepend(next);
+        }
+      return res;
     }
 
     default Seq<T> take(final long num) {

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Bug 1119089. Switch from the ineffecient x = x.sub(x, y) to x.subout(y);

The recently added move assignment operators make the existing pattern more
efficient, but using SubOut() is cleaner and even more efficient.

--HG--
extra : rebase_source : 14ba52bfde0a4a591ca39b92d86632206bbe13eb
Code Diff: @@ -1282,8 +1282,8 @@ ClientTiledLayerBuffer::ValidateTile(TileClient aTile,
     nsIntRect(aTileOrigin.x, aTileOrigin.y,
               GetScaledTileSize().width, GetScaledTileSize().height);
   // Intersect this area with the portion that's invalid.
-  tileRegion = tileRegion.Sub(tileRegion, GetValidRegion());
-  tileRegion = tileRegion.Sub(tileRegion, aDirtyRegion); // Has now been validated
+  tileRegion.SubOut(GetValidRegion());
+  tileRegion.SubOut(aDirtyRegion); // Has now been validated
 
   backBuffer->SetWaste(tileRegion.Area() * mResolution * mResolution);
   backBuffer->Unlock();

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Add exactly 1 second to blpop timeout. #565
Code Diff: @@ -511,15 +511,14 @@ public class CommandAsyncService implements CommandAsyncExecutor {
 
         int timeoutTime = connectionManager.getConfig().getTimeout();
         if (QueueCommand.TIMEOUTLESS_COMMANDS.contains(details.getCommand().getName())) {
-            // add 1.5 second due to issue https://github.com/antirez/redis/issues/874
-            timeoutTime += Math.max(0, 1500 - timeoutTime);
-
             Integer popTimeout = Integer.valueOf(details.getParams()[details.getParams().length - 1].toString());
             handleBlockingOperations(details, connection, popTimeout);
             if (popTimeout == 0) {
                 return;
             }
             timeoutTime += popTimeout*1000;
+            // add 1 second due to issue https://github.com/antirez/redis/issues/874
+            timeoutTime += 1000;
         }
 
         final int timeoutAmount = timeoutTime;

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Change timer to return elapsed in milliseconds
Code Diff: @@ -36,7 +36,7 @@ public:
 
 	// time in seconds
 	inline double elapsed() {
-		return (double)((clock() - start_time)/CLOCKS_PER_SEC);
+		return (double)((clock() - start_time) / (CLOCKS_PER_SEC / 1000));
 	}
 
 	inline bool is_expired() {

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: improve json variable performance

We use libfastjson's alternative hash function, which has been
proven to be much faster than the default one (which stems
back to libjson-c). This should bring an overall performance
improvement for all operations involving variable processing.

closes https://github.com/rsyslog/rsyslog/issues/848
Code Diff: @@ -1636,6 +1636,8 @@ deinitAll(void)
 int
 main(int argc, char **argv)
 {
+	/* use faster hash function inside json lib */
+	json_global_set_string_hash(JSON_C_STR_HASH_PERLLIKE);
 	dbgClassInit();
 	initAll(argc, argv);
 	sd_notify(0, "READY=1");

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: optimize: re-use already computed value!
Code Diff: @@ -401,12 +401,12 @@ evalPROPFILT(struct cnfstmt *stmt, msg_t *pMsg)
 		break;
 	case FIOP_ISEQUAL:
 		if(rsCStrSzStrCmp(stmt->d.s_propfilt.pCSCompValue,
-				  pszPropVal, ustrlen(pszPropVal)) == 0)
+				  pszPropVal, propLen) == 0)
 			bRet = 1; /* process message! */
 		break;
 	case FIOP_STARTSWITH:
 		if(rsCStrSzStrStartsWithCStr(stmt->d.s_propfilt.pCSCompValue,
-				  pszPropVal, ustrlen(pszPropVal)) == 0)
+				  pszPropVal, propLen) == 0)
 			bRet = 1; /* process message! */
 		break;
 	case FIOP_REGEX:

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: SCons: Disable misbehaving MSVC incremental linking

Fixes #77968.
Code Diff: @@ -355,6 +355,9 @@ def configure_msvc(env, vcvars_msvc_config):
         else:
             env.AppendUnique(CCFLAGS=["/MD"])
 
+    # MSVC incremental linking is broken and _increases_ link time (GH-77968).
+    env.Append(LINKFLAGS=["/INCREMENTAL:NO"])
+
     if env["arch"] == "x86_32":
         env["x86_libtheora_opt_vc"] = True
 

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: delay 5ms after noticing the user has a queued message before returning it in case other messages arrive immediately thereafter
Code Diff: @@ -74,6 +74,12 @@ public class LongPollServlet extends CahServlet {
       }
     }
     if (user.hasQueuedMessages()) {
+      try {
+        // Delay for a short while in case there will be other messages queued to be delivered.
+        Thread.sleep(5);
+      } catch (final InterruptedException ie) {
+        // pass
+      }
       final Collection<QueuedMessage> msgs = user.getNextQueuedMessages(MAX_MESSAGES_PER_POLL);
       // just in case...
       if (msgs.size() > 0) {

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: fsmonitor: force index write after full scan

fsmonitor currently only flags the index as dirty if the extension is being
added or removed. This is a performance optimization that recognizes you can
stat() a lot of files in less time than it takes to write out an updated index.

This patch makes a small enhancement and flags the index dirty if we end up
having to stat() all files and scan the entire working directory.  The assumption
being that must be expensive or you would not have turned on the feature.

Signed-off-by: Ben Peart <benpeart@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -185,6 +185,9 @@ void refresh_fsmonitor(struct index_state *istate)
 		for (i = 0; i < istate->cache_nr; i++)
 			istate->cache[i]->ce_flags &= ~CE_FSMONITOR_VALID;
 
+		/* If we're going to check every file, ensure we save the results */
+		istate->cache_changed |= FSMONITOR_CHANGED;
+
 		if (istate->untracked)
 			istate->untracked->use_fsmonitor = 0;
 	}

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Hash mechanism for search filenames in cache (#40)
Code Diff: @@ -1,6 +1,7 @@
 import os
 import sys
 import xml.etree.ElementTree as ET
+import hashlib
 
 from scopus.utils import download, ns
 from scopus.scopus_api import ScopusAbstract
@@ -55,10 +56,7 @@ class ScopusSearch(object):
         The EIDs are stored as a property named EIDS.
         """
 
-        qfile = os.path.join(SCOPUS_SEARCH_DIR,
-                             # We need to remove / in a DOI here so we can save
-                             # it as a file.
-                             query.replace('/', '_slash_'))
+        qfile = os.path.join(SCOPUS_SEARCH_DIR, hashlib.md5(query).hexdigest())
 
         if os.path.exists(qfile) and not refresh:
             with open(qfile) as f:

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: fix hashjoin debug code condition
Code Diff: @@ -495,7 +495,7 @@ size_t HashJoin::getTotalByteCount() const
     if (!data)
         return 0;
 
-#ifdef NDEBUG
+#ifndef NDEBUG
     size_t debug_blocks_allocated_size = 0;
     for (const auto & block : data->blocks)
         debug_blocks_allocated_size += block.allocatedBytes();

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: dmeventd: time scaling for status retry

In normal case it's too slow to wait 1 second for default.
So rather start with short time and increase sleep between status
retesting.
Code Diff: @@ -1649,7 +1649,7 @@ int monitor_dev_for_events(struct cmd_context *cmd, const struct logical_volume
 
 		/* Check [un]monitor results */
 		/* Try a couple times if pending, but not forever... */
-		for (i = 0; i < 10; i++) {
+		for (i = 0; i < 40; i++) {
 			pending = 0;
 			monitored = seg->segtype->ops->target_monitored(seg, &pending);
 			if (pending ||
@@ -1659,7 +1659,7 @@ int monitor_dev_for_events(struct cmd_context *cmd, const struct logical_volume
 						 lv->vg->name, lv->name, monitor ? "" : "un");
 			else
 				break;
-			sleep(1);
+			usleep(10000 * i);
 		}
 
 		if (r)

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Limit scale amount for button bar  -- this helps with low res screens
Code Diff: @@ -98,17 +98,11 @@ class ImageBar extends Composite implements IImageBar {
 				axis = cursize.y;
 				size = cursize.x;
 			}
-			/*
-			size = Math.max(minsize, maxsize);
-			if (size < 16)
-				size = 16;
-			else if (size > 128)
-				size = 128;
-			*/
 			//System.out.println(axis+","+whint+","+hhint);
 			if (smoothResize) {
 				axis = axis * 7 / 8;
 				size = axis / num;
+				size = Math.min(48, size);
 				if (isHorizontal) {
 					w = axis;
 					h = size;
@@ -132,7 +126,6 @@ class ImageBar extends Composite implements IImageBar {
 				}
 			}
 			
-			
 			return new Point(w, h);
 		}
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: device: optimize hashtable usage for shared_ips

No point ins storing "TRUE" as value in the @shared_ips hash
table. That forces glib to allocate a separate storage for the
value. Just use g_hash_table_add() instead.
Code Diff: @@ -4672,10 +4672,7 @@ reserve_shared_ip (NMDevice *self, NMSettingIPConfig *s_ip4, NMPlatformIP4Addres
 			}
 		}
 		nm_platform_ip4_address_set_addr (address, start + count, 24);
-
-		g_hash_table_insert (shared_ips,
-		                     GUINT_TO_POINTER (address->address),
-		                     GUINT_TO_POINTER (TRUE));
+		g_hash_table_add (shared_ips, GUINT_TO_POINTER (address->address));
 	}
 
 	return TRUE;

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Issue: 1415 Fixed file uploads > 128k
Code Diff: @@ -20,6 +20,7 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 // ZAP: 2012/03/15 Changed to use byte[] instead of StringBuffer.
+// ZAP: 2014/11/26 Issue: 1415 Fixed file uploads > 128k
 
 package org.parosproxy.paros.network;
 
@@ -114,15 +115,12 @@ public abstract class HttpBody {
 		}
 		
 		if (pos + len > body.length) {
-			byte[] newBody = new byte[body.length+len];
-			System.arraycopy(body, 0, newBody, 0, body.length);
-			System.arraycopy(buf, 0, newBody, body.length, len);
+			byte[] newBody = new byte[pos + len];
+			System.arraycopy(body, 0, newBody, 0, pos);
 			body = newBody;
-			pos = body.length;
-		} else {
-			System.arraycopy(buf, 0, body, pos, len);
-			pos += len;
 		}
+		System.arraycopy(buf, 0, body, pos, len);
+		pos += len;
 		
         cachedString = null;
 	}

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Avoid quadratic behavior when accumulating stickies.

When plotting 10000 lines, this gives a ~10% improvement in performance.
Code Diff: @@ -2405,12 +2405,12 @@ class _AxesBase(martist.Artist):
 
         if self.use_sticky_edges and (self._xmargin or self._ymargin):
             stickies = [artist.sticky_edges for artist in self.get_children()]
-            x_stickies = sum([sticky.x for sticky in stickies], [])
-            y_stickies = sum([sticky.y for sticky in stickies], [])
+            x_stickies = np.array([x for sticky in stickies for x in sticky.x])
+            y_stickies = np.array([y for sticky in stickies for y in sticky.y])
             if self.get_xscale().lower() == 'log':
-                x_stickies = [xs for xs in x_stickies if xs > 0]
+                x_stickies = x_stickies[x_stickies > 0]
             if self.get_yscale().lower() == 'log':
-                y_stickies = [ys for ys in y_stickies if ys > 0]
+                y_stickies = y_stickies[y_stickies > 0]
         else:  # Small optimization.
             x_stickies, y_stickies = [], []
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Updated threshold for adjusting resolution from 1000 to 100000
Code Diff: @@ -464,7 +464,7 @@ def cluster(
     cluster_func = globals()[algo]
 
     cluster_func(**kwargs) # clustering
-    if data.shape[0] < 1000 and data.obs[class_label].value_counts().min() == 1:
+    if data.shape[0] < 100000 and data.obs[class_label].value_counts().min() == 1:
         new_resol = resolution
         while new_resol > 0.0:
             new_resol -= 0.1

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: CORS: cache OPT requests

#3474
Code Diff: @@ -203,10 +203,9 @@ public class Main {
     private void enableCORS() {
 
         options("/*", (req, res) -> {
-
             handleCORSHeader(req, res, "Access-Control-Request-Headers", "Access-Control-Allow-Headers");
             handleCORSHeader(req, res, "Access-Control-Request-Method", "Access-Control-Allow-Methods");
-
+            res.header("Access-Control-Max-Age", "600");
             return "OK";
         });
 

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Bug 1289165 - Apply the optimizations in moveDenseElements to unboxed objects; r=sfink
Code Diff: @@ -568,10 +568,12 @@ MoveBoxedOrUnboxedDenseElements(JSContext* cx, JSObject* obj, uint32_t dstStart,
         uint8_t* data = obj->as<UnboxedArrayObject>().elements();
         size_t elementSize = UnboxedTypeSize(Type);
 
-        if (UnboxedTypeNeedsPreBarrier(Type)) {
+        if (UnboxedTypeNeedsPreBarrier(Type) &&
+            JS::shadow::Zone::asShadowZone(obj->zone())->needsIncrementalBarrier())
+        {
             // Trigger pre barriers on any elements we are overwriting. See
-            // moveDenseElements::moveDenseElements. No post barrier is needed
-            // as only whole cell post barriers are used with unboxed objects.
+            // NativeObject::moveDenseElements. No post barrier is needed as
+            // only whole cell post barriers are used with unboxed objects.
             for (size_t i = 0; i < length; i++)
                 obj->as<UnboxedArrayObject>().triggerPreBarrier<Type>(dstStart + i);
         }

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: FunctionAttrs: Skip it if the effective SCC (ignoring optnone functions) is empty

Minor optimization but mostly simplifies my debugging so I'm not dealing
with empty SCCNodeSets while investigating issues in this optimization.

git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@304597 91177308-0d34-0410-b5e6-96231b3b80d8
Code Diff: @@ -1188,6 +1188,10 @@ static bool runImpl(CallGraphSCC &SCC, AARGetterT AARGetter) {
     SCCNodes.insert(F);
   }
 
+  // Skip it if the SCC only contains optnone functions.
+  if (SCCNodes.empty())
+    return Changed;
+
   Changed |= addArgumentReturnedAttrs(SCCNodes);
   Changed |= addReadAttrs(SCCNodes, AARGetter);
   Changed |= addArgumentAttrs(SCCNodes);

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: sd-ipv4ll: speed up bind() in the same way as for dhcp
Code Diff: @@ -38,7 +38,7 @@ int arp_network_bind_raw_socket(int index, union sockaddr_union *link) {
         assert(index > 0);
         assert(link);
 
-        s = socket(PF_PACKET, SOCK_DGRAM | SOCK_CLOEXEC | SOCK_NONBLOCK, htons(ETH_P_ARP));
+        s = socket(PF_PACKET, SOCK_DGRAM | SOCK_CLOEXEC | SOCK_NONBLOCK, 0);
         if (s < 0)
                 return -errno;
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: avoid charset problem in MySQL by sidestepping
Code Diff: @@ -69,11 +69,11 @@ class CASBackend(object):
     def authenticate(self, ticket, service):
         """Verifies CAS ticket and gets or creates User object"""
 
-        username = _verify(ticket, service)
+        username = _verify(ticket, service).lower()
         if not username:
             return None
         try:
-            user = User.objects.get(username__iexact=username)
+            user = User.objects.get(username=username)
         except User.DoesNotExist:
             # user will have an "unusable" password
             user = User.objects.create_user(username, '')

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Fix unnecessary break when calculating the height of visible lines

This break causes the minsize to be smaller than expected, and then
the size keeps increasing by one line to cover all visible lines.
This can cause performance issues when there are many visible lines.
Code Diff: @@ -290,9 +290,6 @@ void Label::_update_visible() {
 	int last_line = MIN(lines_rid.size(), lines_visible + lines_skipped);
 	for (int64_t i = lines_skipped; i < last_line; i++) {
 		minsize.height += TS->shaped_text_get_size(lines_rid[i]).y + line_spacing;
-		if (minsize.height > (get_size().height - style->get_minimum_size().height + line_spacing)) {
-			break;
-		}
 	}
 }
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: it has just been one of those nights!
Code Diff: @@ -486,7 +486,7 @@ def create_self_signed_cert(
     _write_cert_to_database(tls_dir, cert)
 
     ret = "Created Private Key: {0}/{1}/certs/{2}.key\n".format(
-        _cert_base_path,
+        _cert_base_path(),
         tls_dir,
         CN)
     ret.join('Created Certificate: {0}/{1}/certs/{2}.crt"'.format(

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Make the split function use StringRef::split.  llvm-svn: 208723
Code Diff: @@ -54,25 +54,9 @@ static inline bool isEnabled(const StringRef Feature) {
 /// Split - Splits a string of comma separated items in to a vector of strings.
 ///
 static void Split(std::vector<std::string> &V, const StringRef S) {
-  if (S.empty())
-    return;
-
-  // Start at beginning of string.
-  size_t Pos = 0;
-  while (true) {
-    // Find the next comma
-    size_t Comma = S.find(',', Pos);
-    // If no comma found then the rest of the string is used
-    if (Comma == std::string::npos) {
-      // Add string to vector
-      V.push_back(S.substr(Pos));
-      break;
-    }
-    // Otherwise add substring to vector
-    V.push_back(S.substr(Pos, Comma - Pos));
-    // Advance to next item
-    Pos = Comma + 1;
-  }
+  SmallVector<StringRef, 2> Tmp;
+  S.split(Tmp, ",", -1, false /* KeepEmpty */);
+  V.assign(Tmp.begin(), Tmp.end());
 }
 
 /// Join a vector of strings to a string with a comma separating each element.

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: perf(Scheduling): add jitter to job scheduling

Addresses #19007
Code Diff: @@ -2,7 +2,8 @@
 # License: MIT. See LICENSE
 
 import json
-from datetime import datetime
+from datetime import datetime, timedelta
+from random import randint
 
 import click
 from croniter import croniter
@@ -110,7 +111,12 @@ class ScheduledJobType(Document):
 		# immediately, even when it's meant to be daily.
 		# A dynamic fallback like current time might miss the scheduler interval and job will never start.
 		last_execution = get_datetime(self.last_execution or self.creation)
-		return croniter(self.cron_format, last_execution).get_next(datetime)
+		next_execution = croniter(self.cron_format, last_execution).get_next(datetime)
+
+		jitter = 0
+		if self.frequency in ("Hourly Long", "Daily Long"):
+			jitter = randint(1, 600)
+		return next_execution + timedelta(seconds=jitter)
 
 	def execute(self):
 		self.scheduler_log = None

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: slightly optimize very short queries with LowCardinality
Code Diff: @@ -43,11 +43,13 @@ MergeTreeReaderStream::MergeTreeReaderStream(
         /// If the end of range is inside the block, we will need to read it too.
         if (right_mark < marks_count && marks_loader.getMark(right_mark).offset_in_decompressed_block > 0)
         {
-            while (right_mark < marks_count
-                && marks_loader.getMark(right_mark).offset_in_compressed_file == marks_loader.getMark(mark_range.end).offset_in_compressed_file)
+            auto indices = ext::range(right_mark, marks_count);
+            auto it = std::upper_bound(indices.begin(), indices.end(), right_mark, [this](size_t i, size_t j)
             {
-                ++right_mark;
-            }
+                return marks_loader.getMark(i).offset_in_compressed_file < marks_loader.getMark(j).offset_in_compressed_file;
+            });
+
+            right_mark = (it == indices.end() ? marks_count : *it);
         }
 
         size_t mark_range_bytes;

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Disable a prohibitively slow code branch when reparenting nodes
Code Diff: @@ -1762,6 +1762,8 @@ bool SceneTreeDock::_check_node_path_recursive(Node *p_root_node, Variant &r_var
 			}
 		} break;
 
+// FIXME: This approach causes a significant performance regression, see GH-84910.
+#if 0
 		case Variant::OBJECT: {
 			Resource *resource = Object::cast_to<Resource>(r_variant);
 			if (!resource) {
@@ -1792,6 +1794,7 @@ bool SceneTreeDock::_check_node_path_recursive(Node *p_root_node, Variant &r_var
 			}
 			break;
 		};
+#endif
 
 		default: {
 		}

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: [objc-gnustep2] Use isalnum instead of a less efficient and nonportable equivalent.

Patch by Hans Wennborg!

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@332964 91177308-0d34-0410-b5e6-96231b3b80d8
Code Diff: @@ -1054,7 +1054,7 @@ class CGObjCGNUstep2 : public CGObjCGNUstep {
       StringName = ".objc_str_";
       for (int i=0,e=Str.size() ; i<e ; ++i) {
         char c = Str[i];
-        if (isalpha(c) || isnumber(c))
+        if (isalnum(c))
           StringName += c;
         else if (c == ' ')
           StringName += '_';

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Multiblock corrupted pointer fix

OpenSSL 1.0.2 introduced the "multiblock" performance improvement. This
feature only applies on 64 bit x86 architecture platforms that support AES
NI instructions. A defect in the implementation of "multiblock" can cause
OpenSSL's internal write buffer to become incorrectly set to NULL when
using non-blocking IO. Typically, when the user application is using a
socket BIO for writing, this will only result in a failed connection.
However if some other BIO is used then it is likely that a segmentation
fault will be triggered, thus enabling a potential DoS attack.

CVE-2015-0290

Reviewed-by: Richard Levitte <levitte@openssl.org>
Reviewed-by: Andy Polyakov <appro@openssl.org>
Code Diff: @@ -804,7 +804,7 @@ int ssl3_write_bytes(SSL *s, int type, const void *buf_, int len)
 
             i = ssl3_write_pending(s, type, &buf[tot], nw);
             if (i <= 0) {
-                if (i < 0) {
+                if (i < 0 && (!s->wbio || !BIO_should_retry(s->wbio))) {
                     OPENSSL_free(wb->buf);
                     wb->buf = NULL;
                 }

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: [cv::transform] Enable CV_SIMD for the 16U case on AArch64.
Code Diff: @@ -1537,7 +1537,7 @@ transform_8u( const uchar* src, uchar* dst, const float* m, int len, int scn, in
 static void
 transform_16u( const ushort* src, ushort* dst, const float* m, int len, int scn, int dcn )
 {
-#if CV_SIMD && !defined(__aarch64__) && !defined(_M_ARM64)
+#if CV_SIMD
     if( scn == 3 && dcn == 3 )
     {
         int x = 0;

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Removed dead variable "hadError" in ParseReturnStmt.  llvm-svn: 41079
Code Diff: @@ -324,8 +324,7 @@ Sema::ParseReturnStmt(SourceLocation ReturnLoc, ExprTy *rex) {
   // function return.  
   AssignmentCheckResult result = CheckSingleAssignmentConstraints(lhsType, 
                                                                   RetValExp);
-  bool hadError = false;
-  
+
   // decode the result (notice that extensions still return a type).
   switch (result) {
   case Compatible:
@@ -334,7 +333,6 @@ Sema::ParseReturnStmt(SourceLocation ReturnLoc, ExprTy *rex) {
     Diag(ReturnLoc, diag::err_typecheck_return_incompatible, 
          lhsType.getAsString(), rhsType.getAsString(),
          RetValExp->getSourceRange());
-    hadError = true;
     break;
   case PointerFromInt:
     // check for null pointer constant (C99 6.3.2.3p3)

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: LivePhysRegs: Follow-up to r303937  We may have situations in which a superregister is reserved and not added to liveins, so we have to add the subregisters.  llvm-svn: 303949
Code Diff: @@ -230,7 +230,7 @@ void llvm::computeLiveIns(LivePhysRegs &LiveRegs,
     // Skip the register if we are about to add one of its super registers.
     bool ContainsSuperReg = false;
     for (MCSuperRegIterator SReg(Reg, &TRI); SReg.isValid(); ++SReg) {
-      if (LiveRegs.contains(*SReg)) {
+      if (LiveRegs.contains(*SReg) && !MRI.isReserved(*SReg)) {
         ContainsSuperReg = true;
         break;
       }

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Log forecast.io API calls / response time
Code Diff: @@ -92,6 +92,9 @@ public class ForecastIO {
             if (code != HttpsURLConnection.HTTP_OK)
                 throw new IOException("HTTP error " + urlConnection.getResponseCode());
 
+            Log.i(TAG, "API calls=" + urlConnection.getHeaderField("X-Forecast-API-Calls") +
+                    " reponse time=" + urlConnection.getHeaderField("X-Response-Time"));
+
             // Get response
             BufferedReader br = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
             StringBuilder json = new StringBuilder();

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Minor optimization to r177367 to treat a module with missing dependencies as out-of-date rather than missing.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@177369 91177308-0d34-0410-b5e6-96231b3b80d8
Code Diff: @@ -1789,7 +1789,7 @@ ASTReader::ReadControlBlock(ModuleFile &F,
                            ClientLoadCapabilities)) {
         case Failure: return Failure;
           // If we have to ignore the dependency, we'll have to ignore this too.
-        case Missing: return Missing;
+        case Missing:
         case OutOfDate: return OutOfDate;
         case VersionMismatch: return VersionMismatch;
         case ConfigurationMismatch: return ConfigurationMismatch;

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: #12256 - [Users] Loop of loading when updating the user role of a specific user
Code Diff: @@ -923,7 +923,7 @@ public class UserFacadeEjb implements UserFacade {
 		Set<User> possibleUsersForAvailableFacilities = new HashSet<>();
 
 		possibleFacilities.forEach(facility -> {
-			if (!facility.getUuid().equals(FacilityDto.NONE_FACILITY_UUID) && !facility.getUuid().equals(FacilityDto.OTHER_FACILITY_UUID)) {
+			if (!FacilityDto.NONE_FACILITY_UUID.equals(facility.getUuid()) && !FacilityDto.OTHER_FACILITY_UUID.equals(facility.getUuid())) {
 				possibleUsersForAvailableFacilities.addAll(userService.getFacilityUsersOfHospital(facility));
 			}
 		});

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: 100 epoch resnet training run repetitions [3, 3, 3, 3] initial_filters 96
Code Diff: @@ -75,10 +75,11 @@ def grasp_model_resnet(clear_view_image_op,
     model = ResNet(input_shape=combined_input_shape,
                    classes=1,
                    block='bottleneck',
-                   repetitions=[3, 4, 6, 3],
+                   repetitions=[3, 3, 3, 3],
                    include_top=include_top,
                    input_tensor=combined_input_data,
                    activation='sigmoid',
+                   initial_filters=96,
                    dropout=dropout_rate)
     return model
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Fix volumetric fog memory leak on resize
Code Diff: @@ -4011,6 +4011,9 @@ void RendererSceneRenderRD::_volumetric_fog_erase(RenderBuffers *rb) {
 	RD::get_singleton()->free(rb->volumetric_fog->prev_light_density_map);
 	RD::get_singleton()->free(rb->volumetric_fog->light_density_map);
 	RD::get_singleton()->free(rb->volumetric_fog->fog_map);
+	RD::get_singleton()->free(rb->volumetric_fog->density_map);
+	RD::get_singleton()->free(rb->volumetric_fog->light_map);
+	RD::get_singleton()->free(rb->volumetric_fog->emissive_map);
 
 	if (rb->volumetric_fog->fog_uniform_set.is_valid() && RD::get_singleton()->uniform_set_is_valid(rb->volumetric_fog->fog_uniform_set)) {
 		RD::get_singleton()->free(rb->volumetric_fog->fog_uniform_set);

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Replace use of SmallVector::back + pop_back with pop_back_val

I ran across an instance where the value was being loaded
out via back, then immediately popped.  Since pop_back_val
is more efficient at this (it moves out), replace this 
instance.


git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@316015 91177308-0d34-0410-b5e6-96231b3b80d8
Code Diff: @@ -361,8 +361,7 @@ static bool hasThrowOutNonThrowingFunc(SourceLocation &OpLoc, CFG *BodyCFG) {
   SmallVector<CFGBlock *, 16> Stack;
   Stack.push_back(&BodyCFG->getEntry());
   while (!Stack.empty()) {
-    CFGBlock *CurBlock = Stack.back();
-    Stack.pop_back();
+    CFGBlock *CurBlock = Stack.pop_back_val();
 
     unsigned ID = CurBlock->getBlockID();
     ThrowState CurState = States[ID];

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: MINOR: minor performance and readability improvement for logging
Code Diff: @@ -69,7 +69,7 @@ public class CosmosDBSinkTask extends SinkTask {
                 logger.debug("Writing record, value type: {}", record.value().getClass().getName());
                 logger.debug("Key Schema: {}", record.keySchema());
                 logger.debug("Value schema: {}", record.valueSchema());
-                logger.trace("Value.toString(): {}", record.value() != null ? record.value().toString() : "<null>");
+                logger.trace("Value.toString(): {}", record.value());
 
                 Object recordValue;
                 if (record.value() instanceof Struct) {

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: refs: use skip_prefix() in ref_is_hidden()

This is shorter, makes the logic a bit easier to follow, and is
perhaps a bit faster too.

The logic is to make the final decision only when "subject" is there,
its early part matches "match", and the match is at the slash
boundary (or the whole thing).

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -1066,7 +1066,7 @@ int ref_is_hidden(const char *refname, const char *refname_full)
 		const char *match = hide_refs->items[i].string;
 		const char *subject;
 		int neg = 0;
-		int len;
+		const char *p;
 
 		if (*match == '!') {
 			neg = 1;
@@ -1081,10 +1081,9 @@ int ref_is_hidden(const char *refname, const char *refname_full)
 		}
 
 		/* refname can be NULL when namespaces are used. */
-		if (!subject || !starts_with(subject, match))
-			continue;
-		len = strlen(match);
-		if (!subject[len] || subject[len] == '/')
+		if (subject &&
+		    skip_prefix(subject, match, &p) &&
+		    (!*p || *p == '/'))
 			return !neg;
 	}
 	return 0;

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: openssl enc: Don't unbuffer stdin

 - unbuffer causes single-byte reads from stdin and poor performance

Fixes #3281
CLA: trivial

Reviewed-by: Rich Salz <rsalz@openssl.org>
Reviewed-by: Richard Levitte <levitte@openssl.org>
(Merged from https://github.com/openssl/openssl/pull/3299)
Code Diff: @@ -291,7 +291,6 @@ int enc_main(int argc, char **argv)
     buff = app_malloc(EVP_ENCODE_LENGTH(bsize), "evp buffer");
 
     if (infile == NULL) {
-        unbuffer(stdin);
         in = dup_bio_in(informat);
     } else
         in = bio_open_default(infile, 'r', informat);

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: use the Python ternary operator for lulc_time. see #BITBUCKET-3798
Code Diff: @@ -451,11 +451,7 @@ def execute(args):
             if lulc_key not in lulc_path_dict:
                 continue
             lulc_path = lulc_path_dict[lulc_key]
-
-            if lulc_key == '_c':
-                lulc_time = 'current'
-            else:
-                lulc_time = 'future'
+            lulc_time = 'current' if lulc_key == '_c' else 'future'
 
             # get the area of a cur/fut pixel
             lulc_pixel_size = pygeoprocessing.get_raster_info(

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Better message when test_states fails due to slow autoreload
Code Diff: @@ -267,7 +267,9 @@ class ServerStateTests(helper.CPWebCase):
             cherrypy._cpserver.wait_for_occupied_port(host, port)
 
             self.getPage("/start")
-            self.assert_(float(self.body) > start)
+            if not (float(self.body) > start):
+                raise AssertionError("start time %s not greater than %s" %
+                                     (float(self.body), start))
         finally:
             # Shut down the spawned process
             self.getPage("/exit")

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Special case degree-1 Bezier curves.

This greatly speeds up extent computation for the common case of
polylines.  (We were previously only special-casing the degree-0 case.)
Code Diff: @@ -287,10 +287,10 @@ class BezierSegment:
             0`
         """
         n = self.degree
+        if n <= 1:
+            return np.array([]), np.array([])
         Cj = self.polynomial_coefficients
         dCj = np.arange(1, n+1)[:, None] * Cj[1:]
-        if len(dCj) == 0:
-            return np.array([]), np.array([])
         dims = []
         roots = []
         for i, pi in enumerate(dCj.T):

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Add a simpler version of is_regular_file.  llvm-svn: 184764
Code Diff: @@ -448,6 +448,15 @@ bool is_regular_file(file_status status);
 ///          platform specific error_code.
 error_code is_regular_file(const Twine &path, bool &result);
 
+/// @brief Simpler version of is_regular_file for clients that don't need to
+///        differentiate between an error and false.
+inline bool is_regular_file(const Twine &Path) {
+  bool Result;
+  if (is_regular_file(Path, Result))
+    return false;
+  return Result;
+}
+
 /// @brief Does this status represent something that exists but is not a
 ///        directory, regular file, or symlink?
 ///

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: fs-util: add shortcut for chase_symlinks() when it is called like open(O_PATH)

Let's optimize things, and let the kernel chase the paths if none of the
features chase_symlinks() offers are actually used.
Code Diff: @@ -634,6 +634,16 @@ int chase_symlinks(const char *path, const char *original_root, unsigned flags,
         if (noop_root(original_root))
                 original_root = NULL;
 
+        if (!original_root && !ret && (flags & (CHASE_NONEXISTENT|CHASE_NO_AUTOFS|CHASE_SAFE|CHASE_OPEN)) == CHASE_OPEN) {
+                /* Shortcut the CHASE_OPEN case if the caller isn't interested in the actual path and has no root set
+                 * and doesn't care about any of the other special features we provide either. */
+                r = open(path, O_PATH|O_CLOEXEC);
+                if (r < 0)
+                        return -errno;
+
+                return r;
+        }
+
         if (original_root) {
                 r = path_make_absolute_cwd(original_root, &root);
                 if (r < 0)

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: dir.c: avoid stat() in valid_cached_dir()

stat() may follow a symlink and return stat data of the link's target
instead of the link itself. We are concerned about the link itself.

It's kind of hard to demonstrate the bug. I think when path->buf is a
symlink, we most likely find that its target's stat data does not
match our cached one, which means we ignore the cache and fall back to
slow path.

This is performance issue, not correctness (though we could still
catch it by verifying test-dump-untracked-cache. The less unlikely
case is, link target stat data matches the cached version and we
incorrectly go fast path, ignoring real data on disk. A test for this
may involve manipulating stat data, which may be not portable.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -1739,7 +1739,7 @@ static int valid_cached_dir(struct dir_struct *dir,
 	 */
 	refresh_fsmonitor(istate);
 	if (!(dir->untracked->use_fsmonitor && untracked->valid)) {
-		if (stat(path->len ? path->buf : ".", &st)) {
+		if (lstat(path->len ? path->buf : ".", &st)) {
 			invalidate_directory(dir->untracked, untracked);
 			memset(&untracked->stat_data, 0, sizeof(untracked->stat_data));
 			return 0;

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: fix: last uploaded for components over time (#511)
Code Diff: @@ -116,5 +116,5 @@ class ComponentMeasurements:
 
     @cached_property
     def last_uploaded(self):
-        if len(self.raw_measurements) > 1:
+        if len(self.raw_measurements) > 0:
             return self.raw_measurements[-1]["timestamp_bin"]

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: teachers with ASC category have 1.5 credits for 1 hour.
Code Diff: @@ -100,7 +100,8 @@ public class TeacherService extends TeacherService_Base {
                 Teacher teacher = degreeTeachingService.getProfessorship().getTeacher();                
                 Category teacherCategory = teacher.getCategoryForCreditsByPeriod(executionPeriod);
                 if (teacherCategory != null 
-                        && teacherCategory.getCode().equals("AST") && teacherCategory.getLongName().equals("ASSISTENTE")
+                        && ((teacherCategory.getCode().equals("AST") && teacherCategory.getLongName().equals("ASSISTENTE")) ||
+                                (teacherCategory.getCode().equals("ASC") && teacherCategory.getLongName().equals("ASSISTENTE CONVIDADO")))
                         && degreeTeachingService.getShift().getTipo().equals(ShiftType.TEORICA)) {                    
                     double hours = degreeTeachingService.getShift().hours();
                     credits += (hours * (degreeTeachingService.getPercentage().doubleValue() / 100)) * 1.5;                    

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Added YUV conversion fix

Fixed OpenCV issue #18878
Code Diff: @@ -104,6 +104,7 @@ inline int dstChannels(int code)
             return 4;
 
         case COLOR_BGRA2BGR: case COLOR_RGBA2BGR: case COLOR_RGB2BGR:
+        case COLOR_YUV2RGB: case COLOR_YUV2BGR: case COLOR_RGB2YUV: case COLOR_BGR2YUV:
         case COLOR_BGR5652BGR: case COLOR_BGR5552BGR: case COLOR_BGR5652RGB: case COLOR_BGR5552RGB:
         case COLOR_GRAY2BGR:
         case COLOR_YUV2BGR_NV21: case COLOR_YUV2RGB_NV21: case COLOR_YUV2BGR_NV12: case COLOR_YUV2RGB_NV12:

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: HBASE-19445 PerformanceEvaluation NPE processing split policy option
Code Diff: @@ -406,7 +406,7 @@ public class PerformanceEvaluation extends Configured implements Tool {
     if (opts.replicas != DEFAULT_OPTS.replicas) {
       desc.setRegionReplication(opts.replicas);
     }
-    if (opts.splitPolicy != DEFAULT_OPTS.splitPolicy) {
+    if (opts.splitPolicy != null && !opts.splitPolicy.equals(DEFAULT_OPTS.splitPolicy)) {
       desc.setRegionSplitPolicyClassName(opts.splitPolicy);
     }
     return desc;

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: less status log spam in cqhttp bot
Code Diff: @@ -51,10 +51,9 @@ class CQBot(websocket.WebSocketApp):
 			if chatClient is None:
 				return
 			data = json.loads(message)
-			if 'status' in data:
-				self.logger.info('CoolQ return status {}'.format(data['status']))
-			elif data['post_type'] == 'message' and data['message_type'] == 'group':
+			if data['post_type'] == 'message' and data['message_type'] == 'group':
 				if data['anonymous'] is None and data['group_id'] == self.config.react_group_id:
+					self.logger.info('QQ chat message: {}'.format(data))
 					args = data['raw_message'].split(' ')
 
 					if len(args) == 1 and args[0] == '!!help':

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: rev-list: disable object/refname ambiguity check with --stdin

This is the "rev-list" analogue to 25fba78 (cat-file:
disable object/refname ambiguity check for batch mode,
2013-07-12).  Like cat-file, "rev-list --stdin" may read a
large number of sha1 object names, and the warning check
introduces a significant slow-down.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Code Diff: @@ -1541,6 +1541,10 @@ static void read_revisions_from_stdin(struct rev_info *revs,
 {
 	struct strbuf sb;
 	int seen_dashdash = 0;
+	int save_warning;
+
+	save_warning = warn_on_object_refname_ambiguity;
+	warn_on_object_refname_ambiguity = 0;
 
 	strbuf_init(&sb, 1000);
 	while (strbuf_getwholeline(&sb, stdin, '\n') != EOF) {
@@ -1562,7 +1566,9 @@ static void read_revisions_from_stdin(struct rev_info *revs,
 	}
 	if (seen_dashdash)
 		read_pathspec_from_stdin(revs, &sb, prune);
+
 	strbuf_release(&sb);
+	warn_on_object_refname_ambiguity = save_warning;
 }
 
 static void add_grep(struct rev_info *revs, const char *ptn, enum grep_pat_token what)

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: resolved: Recover from slow DNS responses

When DNS is unreliable temporarily, the current implementation will
never improve resend behavior again and switch DNS servers only late
(current maximum timeout is 5 seconds).

We can improve this by biasing the resend_timeout back to the current
RTT when a successful response was received. Next time, a timeout is hit
on this server, it will switch to the next server faster.

Fixes: #5953
Code Diff: @@ -304,7 +304,10 @@ void dns_server_packet_received(DnsServer *s, int protocol, DnsServerFeatureLeve
         if (s->max_rtt < rtt) {
                 s->max_rtt = rtt;
                 s->resend_timeout = CLAMP(s->max_rtt * 2, DNS_TIMEOUT_MIN_USEC, DNS_TIMEOUT_MAX_USEC);
-        }
+        } else if (s->resend_timeout > rtt)
+                /* If we received the packet faster than the resend_timeout, bias
+                 * the resend_timeout back to the rtt. */
+                s->resend_timeout = CLAMP((2 * s->resend_timeout + rtt) / 3, DNS_TIMEOUT_MIN_USEC, DNS_TIMEOUT_MAX_USEC);
 }
 
 void dns_server_packet_lost(DnsServer *s, int protocol, DnsServerFeatureLevel level, usec_t usec) {

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: #6204 - reduce non needed complexity for all queries that use event user filter with health facility user
Code Diff: @@ -396,6 +396,7 @@ public class EventService extends AbstractCoreAdoService<Event> {
 				filter = CriteriaBuilderHelper
 					.or(cb, filter, cb.equal(eventJoins.getLocation().get(Location.DISTRICT), currentUser.getHealthFacility().getDistrict()));
 			}
+			break;
 		case LABORATORY:
 			final Subquery<Long> sampleSubQuery = cq.subquery(Long.class);
 			final Root<Sample> sampleRoot = sampleSubQuery.from(Sample.class);

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Corrected time computation (-1 time step) for ANNarchy interfaces
Code Diff: @@ -92,13 +92,14 @@ class ANNarchyOutputInterface(ANNarchyInterface):
 
     def get_proxy_data(self):
         data = self.proxy()
+        # Only for ANNarchy, we start from time = dt instead for time = 0
         if len(data[0]) == 2:
             # This will work for multimeters:
-            self.times = np.array([np.round(data[0][0] / self.dt),  # start_time_step
-                                   np.round(data[0][1] / self.dt)]).astype("i")
+            self.times = np.array([np.round(data[0][0] / self.dt) - 1,  # start_time_step
+                                   np.round(data[0][1] / self.dt) - 1]).astype("i")
         else:
             # This will work for spike recorders:
-            time = np.int(np.round(self.time/self.dt))
+            time = np.int(np.round(self.time/self.dt)) - 1
             times = self.times.copy()
             if time > times[1]:
                 times[0] = times[1] + 1

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Small optimization: once the size is know, we don't have to call fillCurWord.

git-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@221891 91177308-0d34-0410-b5e6-96231b3b80d8
Code Diff: @@ -227,8 +227,8 @@ public:
   bool AtEndOfStream() {
     if (BitsInCurWord != 0)
       return false;
-    if (Size != 0 && Size == NextChar)
-      return true;
+    if (Size != 0)
+      return Size == NextChar;
     fillCurWord();
     return BitsInCurWord == 0;
   }

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: process-util: trivial optimization
Code Diff: @@ -181,10 +181,10 @@ int is_kernel_thread(pid_t pid) {
         bool eof;
         FILE *f;
 
-        if (pid == 0)
+        if (pid == 0 || pid == 1) /* pid 1, and we ourselves certainly aren't a kernel thread */
                 return 0;
 
-        assert(pid > 0);
+        assert(pid > 1);
 
         p = procfs_file_alloca(pid, "cmdline");
         f = fopen(p, "re");

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Circular range query of point k-D trees
Code Diff: @@ -1,7 +1,7 @@
 """
 k-D trees, Part 2b.
 
-Circular range query of k-D trees
+Circular range query of point k-D trees
 
 Contact:
 Ningchuan Xiao
@@ -18,7 +18,7 @@ def range_query_circular(t, p, r, found, depth=0):
     Circular range search for points within a radius of r around p
 
     Input
-      t: node of a k-D tree
+      t: node of a point k-D tree
       p: a Point object around which query is performed
       found: a list to hold points found, declared outside
       depth: the current depth on the k-D tree, mainly used internally

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Avoid using regular expressions for string replacement
Code Diff: @@ -173,7 +173,7 @@ public class LdapAuthenticator
 
     private static String replaceUser(String pattern, String user)
     {
-        return pattern.replaceAll("\\$\\{USER}", user);
+        return pattern.replace("${USER}", user);
     }
 
     private static void closeContext(DirContext context)

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: optimize: another round of removing isdigit()
Code Diff: @@ -362,7 +362,7 @@ processDataRcvd(tcps_sess_t *pThis, char c, struct syslogTime *stTime, time_t tt
 	ISOBJ_TYPE_assert(pThis, tcps_sess);
 
 	if(pThis->inputState == eAtStrtFram) {
-		if(pThis->bSuppOctetFram && isdigit((int) c)) {
+		if(pThis->bSuppOctetFram && c >= '0' && c <= '9') {
 			pThis->inputState = eInOctetCnt;
 			pThis->iOctetsRemain = 0;
 			pThis->eFraming = TCP_FRAMING_OCTET_COUNTING;
@@ -373,7 +373,7 @@ processDataRcvd(tcps_sess_t *pThis, char c, struct syslogTime *stTime, time_t tt
 	}
 
 	if(pThis->inputState == eInOctetCnt) {
-		if(isdigit(c)) {
+		if(c >= '0' && c <= '9') { /* isdigit() the faster way */
 			pThis->iOctetsRemain = pThis->iOctetsRemain * 10 + c - '0';
 		} else { /* done with the octet count, so this must be the SP terminator */
 			DBGPRINTF("TCP Message with octet-counter, size %d.\n", pThis->iOctetsRemain);

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: #9054 added missing null check
Code Diff: @@ -175,17 +175,20 @@ public abstract class AbstractView extends VerticalLayout implements View {
 			newState = newState.substring(0, paramsIndex);
 		}
 
-		String urlParams = Arrays.stream(criteriaList)
-				.filter(Objects::nonNull)
-				.map(BaseCriteria::toUrlParams)
-				.filter(params -> !DataHelper.isNullOrEmpty(params))
-				.collect(Collectors.joining("&"));
-
-		if (urlParams.length() > 0) {
-			if (newState.charAt(newState.length() - 1) != '/') {
-				newState += "/";
+		if (criteriaList != null)
+		{
+			String urlParams = Arrays.stream(criteriaList)
+					.filter(Objects::nonNull)
+					.map(BaseCriteria::toUrlParams)
+					.filter(params -> !DataHelper.isNullOrEmpty(params))
+					.collect(Collectors.joining("&"));
+
+			if (urlParams.length() > 0) {
+				if (newState.charAt(newState.length() - 1) != '/') {
+					newState += "/";
+				}
+				newState += "?" + urlParams;
 			}
-			newState += "?" + urlParams;
 		}
 
 		return newState;

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: bugfix: imudp could do 0-size calloc if no listeners are active at late stage

This was found by clang static analyzer and is extremely unlikely to
happen in practice, due to checks in earlier stages. But we did not
investigate that in detail but rather add checks to be on the safe
side. Note that this is not performance critical as it happens just
on startup.
Code Diff: @@ -4,7 +4,7 @@
  * NOTE: read comments in module-template.h to understand how this file
  *       works!
  *
- * Copyright 2007-2014 Rainer Gerhards and Adiscon GmbH.
+ * Copyright 2007-2015 Rainer Gerhards and Adiscon GmbH.
  *
  * This file is part of rsyslog.
  *
@@ -747,6 +747,13 @@ rsRetVal rcvMainLoop(struct wrkrInfo_s *pWrkr)
 	nLstn = 0;
 	for(lstn = lcnfRoot ; lstn != NULL ; lstn = lstn->next)
 		++nLstn;
+
+	if(nLstn == 0) {
+		errmsg.LogError(errno, RS_RET_ERR,
+			"imudp error: we have 0 listeners, terminating"
+			"worker thread");
+		ABORT_FINALIZE(RS_RET_ERR);
+	}
 	CHKmalloc(udpEPollEvt = calloc(nLstn, sizeof(struct epoll_event)));
 
 #if defined(EPOLL_CLOEXEC) && defined(HAVE_EPOLL_CREATE1)

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Remove unnecessary vector copy

Temporary matrices being used in `find_path` method are attempted
to be copied into ObiWarp's class matrices at the end. But these
matrices themselves are not being used anywhere else. The copy
operation was causing a crash due to attempts to free unallocated
memory. The copy operations have been removed to prevent this
crash.

Issue: #859
Code Diff: @@ -1301,10 +1301,5 @@ void DynProg::find_path(MatF& smat, VecF &gap_penalty, int minimize, float diag_
     _traceback(tmp_tb, smat, optimal_m, optimal_n, tmp_tbpath, _mCoords, _nCoords, _sCoords); 
     int _equivLastInd = _mCoords.dim()-1;
     _bestScore = tmp_asmat(_mCoords[_equivLastInd],_nCoords[_equivLastInd]);
-
-    _asmat.take(tmp_asmat);
-    _tb.take(tmp_tb);
-    _tbpath.take(tmp_tbpath);
-    _gapmat.take(tmp_gapmat);
 }
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Remove a useless debug message in filetransfer.cc

Remove the `verify TLS: Nix CA file = 'blah'` message that Nix used to print when fetching anything as it's both useless (`libcurl` prints the same info in its logs) and misleading (gives the impression that a new TLS connection is being established which might not be the case because of multiplexing. See #7011 )
Code Diff: @@ -322,7 +322,6 @@ struct curlFileTransfer : public FileTransfer
             }
 
             if (request.verifyTLS) {
-                debug("verify TLS: Nix CA file = '%s'", settings.caFile);
                 if (settings.caFile != "")
                     curl_easy_setopt(req, CURLOPT_CAINFO, settings.caFile.c_str());
             } else {

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: emcee: vectorize sampling since all ln_pdfs accept numpy arrays
Code Diff: @@ -86,7 +86,7 @@ class RNG:
             self.random.rand(nwalkers).reshape((nwalkers, 1)) * sample_around
         )
         # initialize the sampler
-        sampler = mc.EnsembleSampler(nwalkers, 1, ln_pdf)
+        sampler = mc.EnsembleSampler(nwalkers, 1, ln_pdf, vectorize=True)
         # burn in phase with saving of last position
         initial_state = State(init_guess, copy=True)
         initial_state.random_state = self.random.get_state()

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: [Editor] Prevent unnecessary editor theme regeneration on unrelated system setting update.
Code Diff: @@ -670,7 +670,10 @@ void EditorNode::_notification(int p_what) {
 
 			callable_mp(this, &EditorNode::_begin_first_scan).call_deferred();
 
-			DisplayServer::get_singleton()->set_system_theme_change_callback(callable_mp(this, &EditorNode::_update_theme).bind(false));
+			last_dark_mode_state = DisplayServer::get_singleton()->is_dark_mode();
+			last_system_accent_color = DisplayServer::get_singleton()->get_accent_color();
+			last_system_base_color = DisplayServer::get_singleton()->get_base_color();
+			DisplayServer::get_singleton()->set_system_theme_change_callback(callable_mp(this, &EditorNode::_check_system_theme_changed));
 
 			/* DO NOT LOAD SCENES HERE, WAIT FOR FILE SCANNING AND REIMPORT TO COMPLETE */
 		} break;

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Fix 3D sky update performance regression
Code Diff: @@ -1172,7 +1172,7 @@ void RendererSceneSkyRD::setup(RendererSceneEnvironmentRD *p_env, RID p_render_b
 				}
 			}
 			// Check whether the directional_light_buffer changes
-			bool light_data_dirty = true;
+			bool light_data_dirty = false;
 
 			// Light buffer is dirty if we have fewer or more lights
 			// If we have fewer lights, make sure that old lights are disabled

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Fixed misprint making counting the ruptures ultra-slow in event_based
Code Diff: @@ -403,7 +403,7 @@ class EventBasedCalculator(base.HazardCalculator):
         with self.monitor('counting ruptures', measuremem=True):
             nrups = parallel.Starmap( # weighting the heavy sources
                 count_ruptures, [(src,) for src in sources
-                                 if src.code == b'AMSC'],
+                                 if src.code in b'AMSC'],
                 progress=logging.debug).reduce()
             # NB: multifault sources must be considered light to avoid a large
             # data transfer, even if .count_ruptures can be slow

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: _gcry_burn_stack: use memset for clearing memory

* src/misc.c (__gcry_burn_stack) [HAVE_VLA]: Use 'memset' for clearing
stack.
--

Patch switches stacking burning to use faster memset instead of
wipememory. Memset is accessed through volatile function pointer,
so that compiler will not optimize away the call.

Signed-off-by: Jussi Kivilinna <jussi.kivilinna@iki.fi>
Code Diff: @@ -501,11 +501,12 @@ void
 __gcry_burn_stack (unsigned int bytes)
 {
 #ifdef HAVE_VLA
+    static void *(*volatile memset_ptr)(void *, int, size_t) = (void *)memset;
     /* (bytes == 0 ? 1 : bytes) == (!bytes + bytes) */
     unsigned int buflen = ((!bytes + bytes) + 63) & ~63;
-    volatile char buf[buflen];
+    char buf[buflen];
 
-    wipememory (buf, sizeof buf);
+    memset_ptr (buf, 0, sizeof buf);
 #else
     volatile char buf[64];
 

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Modify wrapper for doubling time to return the doubling coordinates as an astropy.Time instead of an astropy.units.Quanity
Code Diff: @@ -439,10 +439,12 @@ def compute_lightcurve_doublingtime(lightcurve, flux_quantity="flux"):
             energies[1:],
             doubling_dict["doubling"],
             doubling_dict["doubling_err"],
-            doubling_dict["doubling_coord"],
+            lightcurve.geom.axes["time"].reference_time
+            + doubling_dict["doubling_coord"],
             doubling_dict["halving"],
             doubling_dict["halving_err"],
-            doubling_dict["halving_coord"],
+            lightcurve.geom.axes["time"].reference_time
+            + doubling_dict["halving_coord"],
         ],
         names=(
             "min_energy",

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: bus-proxyd: optimize replies if they're not requested

If a caller does not request a reply, dont send it. This skips message
creation and speeds up NO_REPLY_EXPECTED cases. Note that sd-bus still
handles this case internally, but if we handle it in bus-proxyd, we can
skip the whole message creation step.
Code Diff: @@ -405,6 +405,9 @@ static int synthetic_reply_return_strv(sd_bus_message *call, char **l) {
 
         assert(call);
 
+        if (call->header->flags & BUS_MESSAGE_NO_REPLY_EXPECTED)
+                return 0;
+
         r = sd_bus_message_new_method_return(call, &m);
         if (r < 0)
                 return synthetic_reply_method_errno(call, r, NULL);

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Turn off physics and 3d navigation servers in the Project Manager.

Copying the editor behaviour of deactivating these servers we're not
using, to reduce CPU load.
Code Diff: @@ -52,6 +52,7 @@
 #include "scene/gui/texture_rect.h"
 #include "scene/main/window.h"
 #include "servers/display_server.h"
+#include "servers/navigation_server_3d.h"
 
 static inline String get_project_key_from_path(const String &dir) {
 	return dir.replace("/", "::");
@@ -2387,6 +2388,11 @@ ProjectManager::ProjectManager() {
 		EditorSettings::create();
 	}
 
+	// Turn off some servers we aren't going to be using in the Project Manager.
+	NavigationServer3D::get_singleton()->set_active(false);
+	PhysicsServer3D::get_singleton()->set_active(false);
+	PhysicsServer2D::get_singleton()->set_active(false);
+
 	EditorSettings::get_singleton()->set_optimize_save(false); //just write settings as they came
 
 	{

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: Disable sticky edge accumulation if no autoscaling.

If there's no margin to be added, we don't need sticky edges, but if
autoscaling is off, we _also_ don't need the sticky edges. This saves a
lot of time when plotting many artists, like in #12542.
Code Diff: @@ -2403,7 +2403,9 @@ class _AxesBase(martist.Artist):
         if tight is not None:
             self._tight = bool(tight)
 
-        if self.use_sticky_edges and (self._xmargin or self._ymargin):
+        if self.use_sticky_edges and (
+                (self._xmargin and scalex and self._autoscaleXon) or
+                (self._ymargin and scaley and self._autoscaleYon)):
             stickies = [artist.sticky_edges for artist in self.get_children()]
             x_stickies = sum([sticky.x for sticky in stickies], [])
             y_stickies = sum([sticky.y for sticky in stickies], [])

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: [bunkr] use 'media-files' servers for m4v and mov files (#2925)
Code Diff: @@ -81,7 +81,7 @@ class BunkrAlbumExtractor(LolisafeAlbumExtractor):
         for file in files:
             name = file["name"]
             cdn = file["cdn"]
-            if name.endswith(".mp4"):
+            if name.endswith((".mp4", ".m4v", ".mov")):
                 cdn = cdn.replace("//cdn", "//media-files")
             file["file"] = cdn + "/" + name
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: cancel merges before acquiring lock for truncate
Code Diff: @@ -35,6 +35,10 @@ namespace ErrorCodes
     extern const int TABLE_IS_READ_ONLY;
 }
 
+namespace ActionLocks
+{
+    extern const StorageActionBlockType PartsMerge;
+}
 
 static DatabasePtr tryGetDatabase(const String & database_name, bool if_exists)
 {
@@ -202,7 +206,15 @@ BlockIO InterpreterDropQuery::executeToTableImpl(ContextPtr context_, ASTDropQue
 
             table->checkTableCanBeDropped();
 
-            auto table_lock = table->lockExclusively(context_->getCurrentQueryId(), context_->getSettingsRef().lock_acquire_timeout);
+            TableExclusiveLockHolder table_lock;
+            /// We don't need this lock for ReplicatedMergeTree
+            if (!table->supportsReplication())
+            {
+                /// And for simple MergeTree we can stop merges before acquiring the lock
+                auto merges_blocker = table->getActionLock(ActionLocks::PartsMerge);
+                auto table_lock = table->lockExclusively(context_->getCurrentQueryId(), context_->getSettingsRef().lock_acquire_timeout);
+            }
+
             auto metadata_snapshot = table->getInMemoryMetadataPtr();
             /// Drop table data, don't touch metadata
             table->truncate(query_ptr, metadata_snapshot, context_, table_lock);

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: Bug 925088 - SpiderMonkey: Micro-optimize x64's testStringTruthy. r=mjrosen
Code Diff: @@ -1057,14 +1057,11 @@ class MacroAssemblerX64 : public MacroAssemblerX86Shared
         testl(operand.valueReg(), operand.valueReg());
         j(truthy ? NonZero : Zero, label);
     }
-    // This returns the tag in ScratchReg.
     Condition testStringTruthy(bool truthy, const ValueOperand &value) {
         unboxString(value, ScratchReg);
 
         Operand lengthAndFlags(ScratchReg, JSString::offsetOfLengthAndFlags());
-        movq(lengthAndFlags, ScratchReg);
-        shrq(Imm32(JSString::LENGTH_SHIFT), ScratchReg);
-        testq(ScratchReg, ScratchReg);
+        testq(lengthAndFlags, Imm32(-1 << JSString::LENGTH_SHIFT));
         return truthy ? Assembler::NonZero : Assembler::Zero;
     }
 

Target: 1
Predicted: 0
--------------------------------------------------
Commit Message: kafka: Disable use of separate fetch scheduling group

This partially reverts 9a93a9c22238e145dfa9d7fe297eb494d7c5f0bf

While the original motiviation isn't invalidated we have now found a
counter example where the extra fetch groups makes things worse overall.

`ManyPartitionTest` fails on ARM with the extra group but passes
without. With the group in use CPU util hits 100% and grinds everything
to halt.

Fetch seems to be a lot slower on ARM. Hence, with the guaranteed share
of the extra group the whole system gets affected and hits CPU limits.

Because this is incredibly hard to reason about and it wasn't the core
fetch optimization we decided to revert back to keeping it disabled by
default.

We still keep the option around as it might be useful potentially in
corner cases.

Fixes https://github.com/redpanda-data/redpanda/issues/10507
Code Diff: @@ -516,7 +516,7 @@ configuration::configuration()
       "use_fetch_scheduler_group",
       "Use a separate scheduler group for fetch processing",
       {.needs_restart = needs_restart::no, .visibility = visibility::tunable},
-      true)
+      false)
   , metadata_status_wait_timeout_ms(
       *this,
       "metadata_status_wait_timeout_ms",

Target: 1
Predicted: 1
--------------------------------------------------
Commit Message: use Ruby runtime's STDOUT instead of Java System.err
Code Diff: @@ -871,7 +871,7 @@ public class ASN1 {
 
             // TODO throw an exception here too?
             if ( isDebug(context.runtime) ) {
-                System.err.println("object with tag: " + tag + " and value: " + val + " and val.class: " + val.getClass().getName() + " and impl: " + imp.getName());
+                context.runtime.getOut().println("object with tag: " + tag + " and value: " + val + " and val.class: " + val.getClass().getName() + " and impl: " + imp.getName());
             }
             warn(context, "WARNING: unimplemented method called: asn1data#toASN1");
             return null;

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Add a special handling case for untyped CopyFromReg node in GetCostForDef() of ScheduleDAGRRList  llvm-svn: 173833
Code Diff: @@ -21,6 +21,7 @@
 #include "llvm/ADT/STLExtras.h"
 #include "llvm/ADT/SmallSet.h"
 #include "llvm/ADT/Statistic.h"
+#include "llvm/CodeGen/MachineRegisterInfo.h"
 #include "llvm/CodeGen/ScheduleHazardRecognizer.h"
 #include "llvm/CodeGen/SelectionDAGISel.h"
 #include "llvm/IR/DataLayout.h"
@@ -274,8 +275,17 @@ static void GetCostForDef(const ScheduleDAGSDNodes::RegDefIter &RegDefPos,
   // the expansion of custom DAG-to-DAG patterns.
   if (VT == MVT::Untyped) {
     const SDNode *Node = RegDefPos.GetNode();
-    unsigned Opcode = Node->getMachineOpcode();
 
+    // Special handling for CopyFromReg of untyped values.
+    if (!Node->isMachineOpcode() && Node->getOpcode() == ISD::CopyFromReg) {
+      unsigned Reg = cast<RegisterSDNode>(Node->getOperand(1))->getReg();
+      const TargetRegisterClass *RC = MF.getRegInfo().getRegClass(Reg);
+      RegClass = RC->getID();
+      Cost = 1;
+      return;
+    }
+
+    unsigned Opcode = Node->getMachineOpcode();
     if (Opcode == TargetOpcode::REG_SEQUENCE) {
       unsigned DstRCIdx = cast<ConstantSDNode>(Node->getOperand(0))->getZExtValue();
       const TargetRegisterClass *RC = TRI->getRegClass(DstRCIdx);

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Removed a usage of Mob::DistNoRoot and used ComparativeDistance instead
Code Diff: @@ -1284,7 +1284,7 @@ void Group::BalanceMana(int32 penalty, float range, Mob* caster, int32 limit)
 	for(; gi < MAX_GROUP_MEMBERS; gi++)
 	{
 		if(members[gi] && (members[gi]->GetMaxMana() > 0)){
-			distance = caster->DistNoRoot(*members[gi]);
+			distance = ComparativeDistance(caster->GetPosition(), members[gi]->GetPosition());
 			if(distance <= range2){
 
 				manataken_tmp = members[gi]->GetMaxMana() - members[gi]->GetMana();

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Make the lifetime of the DICompileUnit we're constructing from the MDNode more clear as just for a single argument.  llvm-svn: 189294
Code Diff: @@ -2686,14 +2686,13 @@ void DwarfDebug::emitDebugInlineInfo() {
 // DW_AT_ranges_base, DW_AT_addr_base. If DW_AT_ranges is present,
 // DW_AT_low_pc and DW_AT_high_pc are not used, and vice versa.
 CompileUnit *DwarfDebug::constructSkeletonCU(const CompileUnit *CU) {
-  DICompileUnit DIUnit(CU->getNode());
 
   DIE *Die = new DIE(dwarf::DW_TAG_compile_unit);
   CompileUnit *NewCU = new CompileUnit(CU->getUniqueID(), Die, CU->getNode(),
                                        Asm, this, &SkeletonHolder);
 
   NewCU->addLocalString(Die, dwarf::DW_AT_GNU_dwo_name,
-                        DIUnit.getSplitDebugFilename());
+                        DICompileUnit(CU->getNode()).getSplitDebugFilename());
 
   // Relocate to the beginning of the addr_base section, else 0 for the
   // beginning of the one for this compile unit.

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: complicated the uid masking a little, avoiding to create a const larger than word size. This is relevant for generating interp-level. Well, maybe this could be avoided by generating long object calls instead of refusing.
Code Diff: @@ -8,10 +8,14 @@ def coerce(left, right):
 obj_setattr = object.__setattr__
 obj_getattribute = object.__getattribute__
 
-MASK = sys.maxint * 2 + 2
+MASK = sys.maxint * 2 + 1
 
 def uid(o):
-    return (MASK + id(o)) & (MASK-1)
+    v = id(o)
+    if v < 0:
+        v += MASK
+        v += 1
+    return v & MASK
 
 def type_err(arg, expected, v):
    return TypeError("argument %s must be %s, not %s" % (arg, expected, type(v).__name__))

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Use longer text for burgerking menu to workaround the culling of too short menus
Code Diff: @@ -16,7 +16,7 @@ def getMenu(today):
     day = today.weekday()
     IMG_SIZE = "181621"
     if content_size_match(IMG_URL, IMG_SIZE) and day < 5:
-        menu = burgerking_menu[day]
+        menu = f"Akciós napi menü: {burgerking_menu[day]}"
     else:
         menu = ''
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Correct delay time from 6 to 60 seconds
Code Diff: @@ -23,7 +23,7 @@ class TokenAuthentication(authentication.TokenAuthentication):
             raise exceptions.AuthenticationFailed("Invalid token")
 
         # Update last used, but only once a minute. This reduces the write load on the db
-        if not token.last_used or (timezone.now() - token.last_used).total_seconds() > 6:
+        if not token.last_used or (timezone.now() - token.last_used).total_seconds() > 60:
             # If maintenance mode is enabled, assume the database is read-only, and disable updating the token's
             # last_used time upon authentication.
             if get_config().MAINTENANCE_MODE:

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: [storage] cache bugfix  - dbapi2 requires microsecond on timestamp, datetime.now() trims microsecond if exact to the second. - resolve by adding 1 microsecond to timestamp if timestamp has no microseconds
Code Diff: @@ -128,6 +128,8 @@ class Storage(object):
 
         self._open()
         now = datetime.datetime.now()
+        if not now.microsecond:  # now is to the second
+            now += datetime.timedelta(microseconds=1)  # add 1 microsecond, required for dbapi2
         query = 'REPLACE INTO %s (key,time,value) VALUES(?,?,?)' % self._table_name
         self._execute(True, query, values=[item_id, now, _encode(item)])
         self._optimize_item_count()

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: added transmission duration approximation (manchester encoding, uart-extra-bit, 19.2kbps)
Code Diff: @@ -26,7 +26,7 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  *
- * $Id: ContikiRadio.java,v 1.3 2006/10/02 15:18:55 fros4943 Exp $
+ * $Id: ContikiRadio.java,v 1.4 2006/10/02 15:38:44 fros4943 Exp $
  */
 
 package se.sics.cooja.contikimote.interfaces;
@@ -307,7 +307,12 @@ public class ContikiRadio extends Radio implements ContikiMoteInterface {
       transmitting = true;
       int size = myMoteMemory.getIntValueOf("simOutSize");
       packetFromMote = myMoteMemory.getByteArray("simOutDataBuffer", size);
-      transmissionEndTime = myMote.getSimulation().getSimulationTime() + 100; // TODO What's the duration?
+
+      // Assuming sending at 19.2 kbps, with manchester-encoding (x2) and 1
+      // bit/byte UART overhead (x9 instead of x8)
+      int duration = (int) ((2 * size * 9) / 19.2); // ms
+      transmissionEndTime = myMote.getSimulation().getSimulationTime()
+          + Math.max(1, duration);
       
       lastEventTime = myMote.getSimulation().getSimulationTime();
       lastEvent = RadioEvent.TRANSMISSION_STARTED;

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: hiero: fix - skip audio in collect effects
Code Diff: @@ -16,6 +16,9 @@ class CollectClipEffects(pyblish.api.InstancePlugin):
         review_track_index = instance.context.data.get("reviewTrackIndex")
         item = instance.data["item"]
 
+        if "audio" in instance.data["family"]:
+            return
+
         # frame range
         self.handle_start = instance.data["handleStart"]
         self.handle_end = instance.data["handleEnd"]

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Increase progressively the task retry duration up to 1 hour  issue11209 review385991002
Code Diff: @@ -138,9 +138,12 @@ def run_task(pool, task_id):
                     logger.critical('%s failed', name, exc_info=True)
                     return
                 task = Queue(task_id)
-                scheduled_at = dt.datetime.now()
-                scheduled_at += dt.timedelta(
-                    seconds=random.randint(0, 2 * retry))
+                if task.scheduled_at and task.enqueued_at < task.scheduled_at:
+                    duration = (task.scheduled_at - task.enqueued_at) * 2
+                else:
+                    duration = dt.timedelta(seconds=2 * retry)
+                duration = max(duration, dt.timedelta(hours=1))
+                scheduled_at = dt.datetime.now() + duration * random.random()
                 Queue.push(task.name, task.data, scheduled_at=scheduled_at)
         except Exception:
             logger.critical(

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: benchdnn: rnn: add skip case for non-lstm
Code Diff: @@ -596,6 +596,15 @@ void check_known_skipped_case(const prb_t &p, res_t *r) {
     check_known_skipped_case_common({p.cfg[SRC_LAYER].dt}, dir, r);
     if (r->state == SKIPPED) return;
 
+    // Only LSTM supports peephole and projection layer
+    bool is_lstm_peephole = IMPLICATION(p.with_peephole, p.alg == VANILLA_LSTM);
+    bool is_lstm_projection
+            = IMPLICATION(p.with_projection, p.alg == VANILLA_LSTM);
+    if (!is_lstm_peephole || !is_lstm_projection) {
+        r->state = SKIPPED, r->reason = CASE_NOT_SUPPORTED;
+        return;
+    }
+
     // int8 weights reorder does not support non trivial strides;
     // only LSTM cell kind supports int8 so far;
     if (p.is_int8() && (!p.trivial_strides || p.alg != VANILLA_LSTM)) {

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Increased NTP update frequency to 1024 seconds
Code Diff: @@ -80,7 +80,6 @@ static int32_t reconnectWiFi()
     }
 
 #ifndef DISABLE_NTP
-    // if (*wifiName) {
     if (WiFi.isConnected()) {
         DEBUG_MSG("Updating NTP time\n");
         if (timeClient.update()) {
@@ -98,7 +97,7 @@ static int32_t reconnectWiFi()
     }
 #endif
 
-    return 30 * 1000; // every 30 seconds
+    return 1024 * 1000; // every 1024 seconds
 }
 
 static Periodic *wifiReconnect;

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: use element_identifier if possible  for collection input
Code Diff: @@ -2959,7 +2959,7 @@ class BuildListCollectionTool(DatabaseOperationTool):
                 if incoming_repeat["id_cond"]["id_select"] == 'idx':
                     identifier = str(i)
                 elif incoming_repeat["id_cond"]["id_select"] == 'identifier':
-                    identifier = incoming_repeat["input"].element_identifier
+                    identifier = getattr(incoming_repeat["input"], 'element_identifier', incoming_repeat["input"].name)
                 elif incoming_repeat["id_cond"]["id_select"] == 'manual':
                     identifier = incoming_repeat["id_cond"]["identifier"]
                 new_elements[identifier] = incoming_repeat["input"].copy(copy_tags=incoming_repeat["input"].tags)

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Do run ComputeLiveOutVRegInfo with -fast.  llvm-svn: 52975
Code Diff: @@ -5347,7 +5347,7 @@ void SelectionDAGISel::CodeGenAndEmitDAG(SelectionDAG &DAG) {
 
   if (ViewISelDAGs) DAG.viewGraph();
   
-  if (EnableValueProp)  // FIXME: Only do this if !fast.
+  if (!FastISel && EnableValueProp)
     ComputeLiveOutVRegInfo(DAG);
 
   // Third, instruction select all of the operations to machine code, adding the

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: HSEARCH-3774 Pass the remaining time to ES request
Code Diff: @@ -79,30 +79,6 @@ public boolean defined() {
 	}
 
 	public String timeoutString() {
-		StringBuilder builder = new StringBuilder( timeoutValue.toString() );
-		switch ( timeoutUnit ) {
-			case DAYS:
-				builder.append( "d" );
-				break;
-			case HOURS:
-				builder.append( "h" );
-				break;
-			case MINUTES:
-				builder.append( "m" );
-				break;
-			case SECONDS:
-				builder.append( "s" );
-				break;
-			case MILLISECONDS:
-				builder.append( "ms" );
-				break;
-			case MICROSECONDS:
-				builder.append( "micros" );
-				break;
-			case NANOSECONDS:
-				builder.append( "nanos" );
-				break;
-		}
-		return builder.toString();
+		return checkTimeLeftInMilliseconds() + "ms";
 	}
 }

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: uses ENDS WITH for TR postprocess with subgroups
Code Diff: @@ -819,7 +819,7 @@ public class TextRank {
             query += "k.numTerms > 1\n"
                     + "with k, k.value as ks_orig\n"
                     + "match (k2:" + keywordLabel.name() + ")\n"
-                    + "where k2.value STARTS WITH (ks_orig + ' ')\n"
+                    + "where k2.value ENDS WITH (ks_orig + ' ')\n"
                     + "merge (k)-[r:HAS_SUBGROUP]->(k2)";
     
             try (Transaction tx = database.beginTx();) {

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Increase mxs431 timeouts  The first timeouts don't appear to relate to the actual test but to preparing it. Due to this, they can be increased by a great amount.
Code Diff: @@ -13,11 +13,11 @@ int main(int argc, char *argv[])
     char str[256];
     int iterations = 100;
     test.repl->execute_query_all_nodes((char *) "set global max_connections = 600;");
-    test.set_timeout(30);
+    test.set_timeout(200);
     test.repl->stop_slaves();
-    test.set_timeout(30);
+    test.set_timeout(200);
     test.restart_maxscale();
-    test.set_timeout(30);
+    test.set_timeout(200);
     test.repl->connect();
     test.stop_timeout();
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Use subprocess instead of distro to check for Ubuntu presence (#56)
Code Diff: @@ -44,7 +44,7 @@ def ensure_session_manager_plugin():
         target_path = os.path.join(session_manager_dir, "session-manager-plugin")
         if platform.system() == "Darwin":
             download_session_manager_plugin_macos(target_path=target_path)
-        elif platform.linux_distribution()[0] == "Ubuntu":  # type: ignore
+        elif "Ubuntu" in subprocess.run(["uname", "-a"], capture_output=True).stdout.decode():  # type: ignore
             download_session_manager_plugin_linux(target_path=target_path)
         else:
             download_session_manager_plugin_linux(target_path=target_path, pkg_format="rpm")

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: upgrade max model difference to 2e-2 (for transfo-xl adaptive softmax + inputs)
Code Diff: @@ -95,7 +95,7 @@ def convert_pt_checkpoint_to_tf(model_type, pytorch_checkpoint_path, config_file
         np_tf = tfo[0].numpy()
         diff = np.amax(np.abs(np_pt - np_tf))
         print("Max absolute difference between models outputs {}".format(diff))
-        assert diff <= 1e-3, "Error, model absolute difference is >1e-3"
+        assert diff <= 2e-2, "Error, model absolute difference is >2e-2"
 
     # Save pytorch-model
     print("Save TensorFlow model to {}".format(tf_dump_path))

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: [INDY-1165] Try to decrease testing time (#552)  * [INDY-1165] Added check, that proofs already received    * [INDY-1165] Remove retry timeout changing
Code Diff: @@ -91,11 +91,14 @@ class LedgerManager(HasActionQueue):
         if ledgerInfo.consistencyProofsTimer is None:
             return
 
+        proofs = ledgerInfo.recvdConsistencyProofs
+        # there is no any received ConsistencyProofs
+        if not proofs:
+            return
         logger.debug("{} requesting consistency "
                      "proofs after timeout".format(self))
 
         quorum = Quorums(self.owner.totalNodes)
-        proofs = ledgerInfo.recvdConsistencyProofs
         groupedProofs, null_proofs_count = self._groupConsistencyProofs(proofs)
         if quorum.same_consistency_proof.is_reached(null_proofs_count):
             return

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: don't save system time on s390 (#867856)
Code Diff: @@ -96,6 +96,9 @@ def save_hw_clock(timezone):
 
     """
 
+    if iutil.isS390():
+        return
+
     cmd = "hwclock"
     args = ["--systohc"]
     if timezone.isUtc:

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Change the threshold to use 3rd SDP
Code Diff: @@ -1244,7 +1244,7 @@ RefinedAlignmentbtwnAnchors(int & cur, int & next, int & str, int & chromIndex,
 	if (curGenomeEnd <= nextGenomeStart) {
 		long read_dist = nextReadStart - curReadEnd;
 		long genome_dist = nextGenomeStart - curGenomeEnd;
-		if (tinyOpts.RefineBySDP == true and min(read_dist, genome_dist) >= 500) {
+		if (tinyOpts.RefineBySDP == true and min(read_dist, genome_dist) >= 300) {
 			GenomePairs BtwnPairs;
 			vector<unsigned int> BtwnChain;
 			tinyOpts.refineSpaceDiag = 30;

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: [analyzer] Add a comment that FunctionCodeRegions may also need canonicalization  llvm-svn: 353592
Code Diff: @@ -1009,6 +1009,7 @@ MemRegionManager::getElementRegion(QualType elementType, NonLoc Idx,
 
 const FunctionCodeRegion *
 MemRegionManager::getFunctionCodeRegion(const NamedDecl *FD) {
+  // To think: should we canonicalize the declaration here?
   return getSubRegion<FunctionCodeRegion>(FD, getCodeRegion());
 }
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Swipe refresh trigger distance increased to 100dp.
Code Diff: @@ -368,7 +368,7 @@ public class AppFragment extends Fragment {
         recyclerView.setAdapter(mAdapter);
         ((SwipyRefreshLayout)rootView.findViewById(R.id.refresh)).setProgressBackgroundColor(R.color.dx_night_940);
         ((SwipyRefreshLayout)rootView.findViewById(R.id.refresh)).setColorSchemeResources(R.color.dx_white);
-        ((SwipyRefreshLayout)rootView.findViewById(R.id.refresh)).setDistanceToTriggerSync(20);
+        ((SwipyRefreshLayout)rootView.findViewById(R.id.refresh)).setDistanceToTriggerSync(100);
         ((SwipyRefreshLayout)rootView.findViewById(R.id.refresh)).setOnRefreshListener(
                 (direction) -> {
                     checkConnectivity();

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Use default schedule for end of time condition
Code Diff: @@ -351,10 +351,7 @@ public class EntityRule {
             JSONObject jcondition = new JSONObject(condition);
             JSONObject jschedule = jcondition.optJSONObject("schedule");
 
-            if (jschedule == null)
-                throw new IllegalArgumentException("Rule snooze schedule not found");
-
-            int end = jschedule.optInt("end", 0);
+            int end = (jschedule == null ? 0 : jschedule.optInt("end", 0));
             Calendar cal = getRelativeCalendar(end, message.received);
             wakeup = cal.getTimeInMillis() + duration * 3600 * 1000L;
         } else

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: 1. Update the dependencies for fast N-1/2 CA.
Code Diff: @@ -17,6 +17,7 @@ import datetime
 import signal
 
 import numpy as np
+from numpy.linalg import multi_dot, det, solve, inv
 import pandas as pd
 from scipy.sparse import csr_matrix
 import networkx as nx
@@ -842,7 +843,7 @@ class SAW(object):
         if np.any((df['MVAMax'] > df['LineLimMVA'])):
             raise(Error("The current operational states has violations. Please fix and try again."))
 
-        if not self.lodf:
+        if self.lodf is None:
             self.lodf = self.get_lodf_matrix()
 
         lim = df['LineLimMVA'].to_numpy().flatten()

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: pivos: [amcodec-hack] pvr can reopen too fast, slow us down a little
Code Diff: @@ -1734,6 +1734,10 @@ void CAMLCodec::CloseDecoder()
   SysfsUtils::SetInt("/sys/class/tsync/enable", 1);
 
   ShowMainVideo(false);
+
+  // add a little delay after closing in case
+  // we are reopened too fast.
+  usleep(500 * 1000);
 }
 
 void CAMLCodec::Reset()

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Use the right cast kind when comparing null to member pointers.  llvm-svn: 79927
Code Diff: @@ -4292,13 +4292,13 @@ QualType Sema::CheckCompareOperands(Expr *&lex, Expr *&rex, SourceLocation Loc,
     if (RHSIsNull && 
         (lType->isPointerType() ||
          (!isRelational && lType->isMemberPointerType()))) {
-      ImpCastExprToType(rex, lType);
+      ImpCastExprToType(rex, lType, CastExpr::CK_NullToMemberPointer);
       return ResultTy;
     }
     if (LHSIsNull &&
         (rType->isPointerType() ||
          (!isRelational && rType->isMemberPointerType()))) {
-      ImpCastExprToType(lex, rType);
+      ImpCastExprToType(lex, rType, CastExpr::CK_NullToMemberPointer);
       return ResultTy;
     }
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: [clangd] Always remove dots before converting paths to URIs in symbol collector.  llvm-svn: 335458
Code Diff: @@ -75,9 +75,10 @@ llvm::Optional<std::string> toURI(const SourceManager &SM, StringRef Path,
     }
   } else if (!Opts.FallbackDir.empty()) {
     llvm::sys::fs::make_absolute(Opts.FallbackDir, AbsolutePath);
-    llvm::sys::path::remove_dots(AbsolutePath, /*remove_dot_dot=*/true);
   }
 
+  llvm::sys::path::remove_dots(AbsolutePath, /*remove_dot_dot=*/true);
+
   std::string ErrMsg;
   for (const auto &Scheme : Opts.URISchemes) {
     auto U = URI::create(AbsolutePath, Scheme);

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: exec valgrind watcher to save a process
Code Diff: @@ -458,7 +458,7 @@ def add_constants_to_source_code(src, options):
 
 def add_embedded_tarfile_handling_to_source_code(src, options):
     tar_n_bytes, tar_source = source_for_embedded_tarfile(options)
-    watcher = rf"python3 -E -c \"import io,os,sys,tarfile,tempfile\n\
+    watcher = rf"exec python3 -E -c \"import io,os,sys,tarfile,tempfile\n\
 with tempfile.TemporaryDirectory() as temp_dir:\n\
  buffer = io.BytesIO(sys.stdin.buffer.raw.read({tar_n_bytes}))\n\
  if len(buffer.getbuffer()) == {tar_n_bytes}:\n\

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: pybeam.beam_file: use open() instead of removed file()
Code Diff: @@ -24,7 +24,7 @@ from pybeam.beam_construct import beam
 
 class BeamFile(object):
 	def __init__(self, filename):
-		self._tree = beam.parse(file(filename,"r").read())
+		self._tree = beam.parse(open(filename,"rb").read())
 
 	def selectChunkByName(self, name):
 		for c in self._tree.chunk:

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Use NBTIngredient for the potion in generated tipped arrow recipes (#2666)
Code Diff: @@ -9,6 +9,7 @@ import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.item.crafting.CraftingRecipe;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.crafting.ShapedRecipe;
+import net.minecraftforge.common.crafting.NBTIngredient;
 import net.minecraftforge.registries.ForgeRegistries;
 
 import java.util.stream.Stream;
@@ -22,7 +23,8 @@ public final class TippedArrowRecipeMaker {
 				ItemStack arrowStack = new ItemStack(Items.ARROW);
 				ItemStack lingeringPotion = PotionUtils.setPotion(new ItemStack(Items.LINGERING_POTION), potion);
 				Ingredient arrowIngredient = Ingredient.of(arrowStack);
-				Ingredient potionIngredient = Ingredient.of(lingeringPotion);
+				Ingredient potionIngredient = new NBTIngredient(lingeringPotion) {
+				};
 				NonNullList<Ingredient> inputs = NonNullList.of(Ingredient.EMPTY,
 					arrowIngredient, arrowIngredient, arrowIngredient,
 					arrowIngredient, potionIngredient, arrowIngredient,

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Lots of mobs in one area can cause players to move to fast in water.
Code Diff: @@ -211,7 +211,7 @@ public class PlayerListener implements Listener {
                         if(!player.hasPermission("anticheat.waterwalk"))
                         {                    
                             //Otherwise check for normal walking speeds, making sure they aren't using 'jesus' hacks
-                            if(!player.isSprinting() && !player.isFlying())
+                            if(!player.isSprinting() && !player.isFlying() && player.getNearbyEntities(1, 1, 1).isEmpty())
                             {
                                 tracker.increaseLevel(player,2);
                                 plugin.log(player.getName()+" is walking too fast in water! XSpeed="+xd+" ZSpeed="+zd);

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Use smallint for BIT instead of byte to avoid conversion problems.
Code Diff: @@ -35,7 +35,7 @@ public class InformixDialect extends org.hibernate.dialect.InformixDialect
         super();
         registerColumnType(Types.BIGINT, "integer");
         registerColumnType(Types.BINARY, "byte");
-        registerColumnType(Types.BIT, "byte");
+        registerColumnType(Types.BIT, "smallint");
         registerColumnType(Types.BLOB, "byte");
         registerColumnType(Types.BOOLEAN, "smallint");
         registerColumnType(Types.CHAR, 32511, "char($l)");

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Improved time formatting  Better time formatting when converting seconds into mm:ss
Code Diff: @@ -82,9 +82,9 @@ public final class Converter
 		StringBuilder sb = new StringBuilder();
 		int minutes = duration / 60;
 		int seconds = duration % 60;
-		sb.append(minutes);
+		sb.append(String.format("%02d", minutes));
 		sb.append("m");
-		sb.append(seconds);
+		sb.append(String.format("%02d", seconds));
 		return sb.toString();
 	}
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Fixes incorrect number of milliseconds in 10 minutes
Code Diff: @@ -136,7 +136,7 @@ public class PreferencesActivity extends MyActivity {
         }));
         // Logging interval
         final Button log_interval_button = new Button(mContext);
-        final int[] ms_options = new int[]{0, 1000, 10000, 60000, 60000};
+        final int[] ms_options = new int[]{0, 1000, 10000, 60000, 600000};
         final ArrayList<String> option_list = new ArrayList<>(
                 Arrays.asList("No wait", "1s", "10s", "1min", "10min"));
         int i=0;

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: - Increased bin count for TDR for possible increased accuracy.
Code Diff: @@ -1467,9 +1467,9 @@ class TDRWindow(QtWidgets.QWidget):
 
         windowed_s11 = window * s11
 
-        self.td = np.abs(np.fft.ifft(windowed_s11, 2**14))
+        self.td = np.abs(np.fft.ifft(windowed_s11, 2**16))
 
-        time_axis = np.linspace(0, 1/step_size, 2**14)
+        time_axis = np.linspace(0, 1/step_size, 2**16)
         self.distance_axis = time_axis * v * c
 
         # peak = np.max(td)  # We should check that this is an actual *peak*, and not just a vague maximum

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: A minor simplication in the generated code.  llvm-svn: 40479
Code Diff: @@ -2875,7 +2875,7 @@ public:
         std::string NodeName;
         if (!isRoot) {
           NodeName = "Tmp" + utostr(ResNo);
-          Code2 = "SDOperand " + NodeName + " = SDOperand(";
+          Code2 = "SDOperand " + NodeName + "(";
         } else {
           NodeName = "ResNode";
           if (!ResNodeDecled) {
@@ -2991,7 +2991,7 @@ public:
         bool NeedReplace = false;
         if (NodeHasOutFlag) {
           if (!InFlagDecled) {
-            emitCode("SDOperand InFlag = SDOperand(ResNode, " + 
+            emitCode("SDOperand InFlag(ResNode, " + 
                      utostr(NumResults + (unsigned)NodeHasChain) + ");");
             InFlagDecled = true;
           } else

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Switching Stark F0 calc to TargetList instead of OpticalSystem
Code Diff: @@ -99,7 +99,7 @@ class Stark(ZodiacalLight):
         h = const.h                             # Planck constant
         c = const.c                             # speed of light in vacuum
         ephoton = h*c/lam/u.ph                  # energy of a photon
-        F0 = TL.OpticalSystem.F0(lam)           # zero-magnitude star (in ph/s/m2/nm)
+        F0 = TL.starF0(sInds, mode)             # zero-magnitude star (in ph/s/m2/nm)
         f_corr = f/ephoton/F0                   # color correction factor
         
         fZ = fbeta*f_corr.to('1/arcsec2')

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: shorten the action name if > 128 chars (bnc#675021)
Code Diff: @@ -116,6 +116,10 @@ public class Action extends BaseDomainHelper implements Serializable {
      * @param nameIn to set
     */
     public void setName(String nameIn) {
+        // Shorten the name to 128 chars if necessary
+        if (nameIn.length() > 128) {
+            nameIn = nameIn.substring(0, 128);
+        }
         this.name = nameIn;
     }
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Made fasterOptionInteractions off by default is it breaks Optifine
Code Diff: @@ -196,7 +196,7 @@ public class BugTorchConfig {
 		fasterEntityLivingBaseIsPotionActiveAndSetAir = config.getBoolean("fasterEntityLivingBaseIsPotionActiveAndSetAir", categoryPerformance, true, "isPotionActive returns immediately if there are no active potions.\nsetAir only updates its datawatcher when needed.");
 		fasterGetBlockByIdForAirBlocks = config.getBoolean("fasterGetBlockByIdForAirBlocks", categoryPerformance, true, "When something gets air blocks from ID it will return faster.");
 
-		fasterOptionInteractions = config.getBoolean("fasterOptionInteractions", categoryPerformance, true, "Makes several functions used by option buttons faster.");
+		fasterOptionInteractions = config.getBoolean("fasterOptionInteractions", categoryPerformance, false, "Makes several functions used by option buttons faster.");
 		fasterOptionLoading = config.getBoolean("fasterOptionLoading", categoryPerformance, false, "Makes the function that reads options.txt much faster.");
 
 		moreAccurateLayeredSnowFaceCulling = config.getBoolean("moreAccurateLayeredSnowFaceCulling", categoryPerformance, true, "The faces of layered snow get culled more accurately when chunk meshes are created.");

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Booflo Power Bar now drains faster when the Booflo is grounded
Code Diff: @@ -99,8 +99,8 @@ public class BoofloEntity extends EndimatedEntity {
 		return false;
 	};
 	private static final int BOOST_POWER_INCREMENT = 10;
-	private static final int BOOST_POWER_DECREMENT = 2;
 	private static final int MAX_BOOST_POWER = 182;
+	private static final int HALF_BOOST_POWER = 91;
 	private static final DataParameter<Optional<UUID>> OWNER_UNIQUE_ID = EntityDataManager.createKey(BoofloEntity.class, DataSerializers.OPTIONAL_UNIQUE_ID);
 	private static final DataParameter<Optional<UUID>> LAST_FED_UNIQUE_ID = EntityDataManager.createKey(BoofloEntity.class, DataSerializers.OPTIONAL_UNIQUE_ID);
 	private static final DataParameter<Boolean> ON_GROUND = EntityDataManager.createKey(BoofloEntity.class, DataSerializers.BOOLEAN);
@@ -231,7 +231,7 @@ public class BoofloEntity extends EndimatedEntity {
 
 			int power = this.getBoostPower();
 			if (power > 0 && !this.isBoostExpanding()) {
-				this.setBoostPower(Math.max(0, power - BOOST_POWER_DECREMENT));
+				this.setBoostPower(Math.max(0, power - (this.isOnGround() ? 3 : 2)));
 				if (this.getBoostPower() <= 0) {
 					this.setBoostLocked(false);
 				}

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: fixing rate of check for long runs
Code Diff: @@ -208,7 +208,7 @@ public class ScriptedNonThreadScheduler extends StageScheduler implements Runnab
         	}
         }
         
-        nextLongRunningCheck = System.nanoTime()+longRunningCheckFreqNS;
+        nextLongRunningCheck = System.nanoTime()+(longRunningCheckFreqNS/6);//first check is quicker.
         
     }
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: increase default prealloc to handle 2nd order hex by default
Code Diff: @@ -127,7 +127,7 @@ template <class scalar> void linearSystemPETSc<scalar>::preAllocateEntries()
   int blockSize = _getBlockSizeFromParameters();
   std::vector<int> nByRowDiag(_localSize), nByRowOffDiag(_localSize);
   if(_sparsity.getNbRows() == 0) {
-    PetscInt prealloc = 100;
+    PetscInt prealloc = 216; // 8*27 (8 2nd order hexas)
     PetscBool set;
     PetscOptionsGetInt(PETSC_NULL, "-petsc_prealloc", &prealloc, &set);
     prealloc = std::min(prealloc, _localSize);

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: wait only if there are some unfilnished subtasks
Code Diff: @@ -198,7 +198,7 @@ class Run(object):
 		for task in self.tasks:
 			if not os.path.exists(task + '.done'):
 				self.unfinished_tasks.append(task)
-		if len(self.unfinished_tasks) < 5: # Avoid delays in generating done files
+		if self.unfinished_tasks and len(self.unfinished_tasks) < 5: # Avoid delays in generating done files
 			time.sleep(5)
 			for task in list(self.unfinished_tasks):
 				if os.path.exists(task + '.done'):

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Add version of getMethodSummary() that can be used to query the summary for the method currently being analyzed.  llvm-svn: 70388
Code Diff: @@ -748,6 +748,20 @@ public:
                                  ME->getClassInfo().first,
                                  ME->getMethodDecl(), ME->getType());
   }
+
+  /// getMethodSummary - This version of getMethodSummary is used to query
+  ///  the summary for the current method being analyzed.
+  RetainSummary *getMethodSummary(ObjCMethodDecl *MD) {
+    Selector S = MD->getSelector();
+    ObjCInterfaceDecl *ID = MD->getClassInterface();
+    IdentifierInfo *ClsName = ID->getIdentifier();
+    QualType ResultTy = MD->getResultType();
+    
+    if (MD->isInstanceMethod())
+      return getInstanceMethodSummary(S, ClsName, ID, MD, ResultTy);
+    else
+      return getClassMethodSummary(S, ClsName, ID, MD, ResultTy);
+  }
   
   RetainSummary* getCommonMethodSummary(ObjCMethodDecl* MD, Selector S,
                                         QualType RetTy);

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Use localised string having gone to the bother of obtaining it.
Code Diff: @@ -804,7 +804,7 @@ class NoBodyOutputStream extends ServletOutputStream {
             // isn't this really an IllegalArgumentException?
             
             String msg = lStrings.getString("err.io.negativelength");
-            throw new IOException("negative length");
+            throw new IOException(msg);
         }
     }
 }

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Only enable the ObjCAtSyncChecker when the translation unit uses Objective-C.  llvm-svn: 118414
Code Diff: @@ -33,7 +33,9 @@ public:
 } // end anonymous namespace
 
 void clang::RegisterObjCAtSyncChecker(GRExprEngine &Eng) {
-  Eng.registerCheck(new ObjCAtSyncChecker());
+  // @synchronized is an Objective-C 2 feature.
+  if (Eng.getContext().getLangOptions().ObjC2)
+    Eng.registerCheck(new ObjCAtSyncChecker());
 }
 
 void ObjCAtSyncChecker::PreVisitObjCAtSynchronizedStmt(CheckerContext &C,

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Issue #245 - Set the connection and read timeout to 5min
Code Diff: @@ -21,6 +21,7 @@ import java.io.BufferedInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.net.URL;
+import java.net.URLConnection;
 import java.security.GeneralSecurityException;
 import java.security.MessageDigest;
 import java.text.DateFormat;
@@ -86,6 +87,7 @@ public class TaskServlet extends AbstractRestApiServlet {
 	private SurveyInstanceDAO siDao;
 	private final static String EMAIL_FROM_ADDRESS_KEY = "emailFromAddress";
 	private TreeMap<String, String> recepientList = null;
+	private static final int CONNECTION_TIMEOUT = 5 * 60 * 1000; // 5min
 
 	public TaskServlet() {
 		DEVICE_FILE_PATH = com.gallatinsystems.common.util.PropertyUtil
@@ -116,8 +118,13 @@ public class TaskServlet extends AbstractRestApiServlet {
 
 		try {
 			DeviceFilesDao dfDao = new DeviceFilesDao();
+
 			URL url = new URL(DEVICE_FILE_PATH + fileName);
-			BufferedInputStream bis = new BufferedInputStream(url.openStream());
+			URLConnection conn = url.openConnection();
+			conn.setConnectTimeout(CONNECTION_TIMEOUT);
+			conn.setReadTimeout(CONNECTION_TIMEOUT);
+
+			BufferedInputStream bis = new BufferedInputStream(conn.getInputStream());
 			ZipInputStream zis = new ZipInputStream(bis);
 			List<DeviceFiles> dfList = null;
 			DeviceFiles deviceFile = null;

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Changed seed-range for platec-seeds to use numpy constant.
Code Diff: @@ -408,7 +408,7 @@ def main():
         if not os.path.exists(args.FILE):
             usage("The specified world file does not exist")
 
-    maxseed = 65535  # there is a hard limit somewhere so seeds outside the uint16 range are considered unsafe
+    maxseed = numpy.iinfo(numpy.uint16).max  # there is a hard limit somewhere so seeds outside the uint16 range are considered unsafe
     if args.seed is not None:
         seed = int(args.seed)
         assert 0 <= seed <= maxseed, "Seed has to be in the range between 0 and %s, borders included." % maxseed

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: getting available balance from wallet instead of API call.
Code Diff: @@ -338,8 +338,8 @@ class FreqtradeBot(object):
             stake_amount = self.config['stake_amount']
 
         # TODO: should come from the wallet
-        avaliable_amount = self.exchange.get_balance(self.config['stake_currency'])
-        # avaliable_amount = self.wallets.wallets[self.config['stake_currency']].free
+        #avaliable_amount = self.exchange.get_balance(self.config['stake_currency'])
+        avaliable_amount = self.wallets.wallets[self.config['stake_currency']].free
 
         if stake_amount == constants.UNLIMITED_STAKE_AMOUNT:
             open_trades = len(Trade.query.filter(Trade.is_open.is_(True)).all())

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Search by `patch.name` instead of `patch.version` in `Patch.from_str
Code Diff: @@ -13,7 +13,7 @@ class Patch(object):
     @classmethod
     def from_str(cls, string):
         for patch in cls.__patches:
-            if string in patch.name:
+            if string in patch.patch:
                 return patch
         else:
             raise ValueError("Unknown patch name {}".format(string))

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Shorten server-side error messages if they exceed 200 chars
Code Diff: @@ -399,6 +399,11 @@ public class BackendClient {
                         errorMsg = "Connection problem";
                     }
 
+                    // TODO: Filter HTML
+                    if (errorMsg.length() > 200) {
+                        errorMsg = errorMsg.substring(0, 200);
+                    }
+
                     callback.onFail(statusCode, errorMsg);
                 }
             }

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: increased min delay closing tool tip window
Code Diff: @@ -2602,7 +2602,7 @@ public class UIUtil {
 								timer.stop();
 							}
 							long stopTime = System.currentTimeMillis()
-									+ ToolTipManager.sharedInstance().getInitialDelay() + 200;
+									+ ToolTipManager.sharedInstance().getInitialDelay() + 320;
 							timer = new Timer(10, ae -> {
 								if (System.currentTimeMillis() >= stopTime || isToolTipVisible()) {
 									reset.run();

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: [JumpThreading] When processing compares, explicitly check that the result type is not a vector rather than check for it being an integer.  Compares always return a scalar integer or vector of integers. isIntegerTy returns false for vectors, but that's not completely obvious. So using isVectorTy is less confusing.  llvm-svn: 302198
Code Diff: @@ -580,7 +580,7 @@ bool JumpThreadingPass::ComputeValueKnownInPredecessors(
 
     // If comparing a live-in value against a constant, see if we know the
     // live-in value on any predecessors.
-    if (isa<Constant>(Cmp->getOperand(1)) && Cmp->getType()->isIntegerTy()) {
+    if (isa<Constant>(Cmp->getOperand(1)) && !Cmp->getType()->isVectorTy()) {
       Constant *CmpConst = cast<Constant>(Cmp->getOperand(1));
 
       if (!isa<Instruction>(Cmp->getOperand(0)) ||

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Change the fromtime and untiltime to be datetime instead of epoch
Code Diff: @@ -1,4 +1,5 @@
 from datetime import datetime
+import time
 import os
 import whisper
 
@@ -58,14 +59,14 @@ class WhisperDatabase(object):
           This method fetch data from the database according to the period
           given
 
-          fetch(path,fromTime,untilTime=None)
+          fetch(path, fromTime, untilTime=None)
 
-          fromTime is an epoch time
-          untilTime is also an epoch time, but defaults to now.
+          fromTime is an datetime
+          untilTime is also an datetime, but defaults to now.
 
           Returns a tuple of (timeInfo, valueList)
           where timeInfo is itself a tuple of (fromTime, untilTime, step)
 
           Returns None if no data can be returned
           """
-          whisper.fetch(self.path, fromTime, untilTime)
+          whisper.fetch(self.path, time.ctime(fromTime), time.ctime(untilTime))

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: src: dump isolate stats when process exits  When process exits, dump v8 isolate's internal stats for performance evaluation and debugging. It fixed the incorrect profiling log output when running V8's builtin PGO profiling for node.js service type application,which exits by user pressing CTRL+C etc. keys.  PR-URL: https://github.com/nodejs/node/pull/44534
Code Diff: @@ -768,6 +768,7 @@ ThreadId AllocateEnvironmentThreadId() {
 void DefaultProcessExitHandler(Environment* env, int exit_code) {
   env->set_can_call_into_js(false);
   env->stop_sub_worker_contexts();
+  env->isolate()->DumpAndResetStats();
   DisposePlatform();
   uv_library_shutdown();
   exit(exit_code);

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: using urlForResourceNamed (otherwise we get file://... url)
Code Diff: @@ -37,7 +37,7 @@ public class ERXFlashMovie extends ERXStatelessComponent {
 		if(movieUrl == null) {
 			String name = stringValueForBinding("movieName");
 			String framework = stringValueForBinding("framework");
-			movieUrl = application().resourceManager().pathURLForResourceNamed(name, framework, context().request().browserLanguages()).toExternalForm();
+			movieUrl = application().resourceManager().urlForResourceNamed(name, framework, context().request().browserLanguages(), context().request());
 		}
 		return movieUrl;
 	}

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Use generic timeout in Frames test  This gives more time and should be enough for the HUD and the frames to fully load, reducing failures.  Part of #344 - Make functional tests more reliable
Code Diff: @@ -38,6 +38,7 @@ import org.openqa.selenium.support.ui.WebDriverWait;
 import org.zaproxy.zap.extension.hud.tutorial.pages.AlertsPage;
 import org.zaproxy.zap.extension.hud.tutorial.pages.FramesPage;
 import org.zaproxy.zap.extension.hud.tutorial.pages.WarningPage;
+import org.zaproxy.zap.extension.hud.ui.Constants;
 import org.zaproxy.zap.extension.hud.ui.firefox.FirefoxUnitTest;
 import org.zaproxy.zap.extension.hud.ui.generic.GenericUnitTest;
 import org.zaproxy.zap.extension.hud.ui.uimap.HUD;
@@ -124,7 +125,8 @@ public class FramesPageUnitTest extends FirefoxUnitTest {
     }
 
     private static void checkWithRetry(WebDriver driver, Function<WebDriver, Object> check) {
-        new WebDriverWait(driver, 10L).until(wd -> check.apply(driver));
+        new WebDriverWait(driver, Constants.GENERIC_TESTS_TIMEOUT_SECS)
+                .until(wd -> check.apply(driver));
     }
 
     private static void testSidePanesVisible(HUD hud) {

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Time: 48 ms (86.27%), Space: 13.9 MB (68.98%) - LeetHub
Code Diff: @@ -0,0 +1,6 @@
+class Solution:
+    def numOfPairs(self, nums: List[str], target: str) -> int:
+        ctr = Counter(nums)
+        return sum(ctr[prefix] * (ctr[suffix] - (prefix == suffix))
+                   for prefix in accumulate(target)
+                   for suffix in [target.removeprefix(prefix)])
\ No newline at end of file

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Make SlotIndex::getEntry() return unsigned to match IndexListEntry.  llvm-svn: 175600
Code Diff: @@ -112,7 +112,7 @@ namespace llvm {
       return lie.getPointer();
     }
 
-    int getIndex() const {
+    unsigned getIndex() const {
       return listEntry()->getIndex() | getSlot();
     }
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: if Xcore doesn't support TLS, it doesn't have to worry about thread local LLVM IR, it should be rejected by a front-end.  llvm-svn: 76665
Code Diff: @@ -72,7 +72,7 @@ unsigned XCoreTargetAsmInfo::
 SectionFlagsForGlobal(const GlobalValue *GV, const char* Name) const {
   unsigned Flags = ELFTargetAsmInfo::SectionFlagsForGlobal(GV, Name);
   // Mask out unsupported flags
-  Flags &= ~(SectionFlags::Small | SectionFlags::TLS);
+  Flags &= ~SectionFlags::Small;
 
   // Set CP / DP relative flags
   if (GV) {

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: use Individual ID = Sample ID instead of Participant ID for now
Code Diff: @@ -433,7 +433,7 @@ def _parse_merged_pedigree_sample_manifest_format(rows):
         MergedPedigreeSampleManifestConstants.MATERNAL_ID_COLUMN: JsonConstants.MATERNAL_ID_COLUMN,
         MergedPedigreeSampleManifestConstants.SEX_COLUMN: JsonConstants.SEX_COLUMN,
         MergedPedigreeSampleManifestConstants.AFFECTED_COLUMN: JsonConstants.AFFECTED_COLUMN,
-        MergedPedigreeSampleManifestConstants.COLLABORATOR_SAMPLE_ID_COLUMN: JsonConstants.SAMPLE_ID_COLUMN,
+        #MergedPedigreeSampleManifestConstants.COLLABORATOR_SAMPLE_ID_COLUMN: JsonConstants.SAMPLE_ID_COLUMN,
         MergedPedigreeSampleManifestConstants.NOTES_COLUMN: JsonConstants.NOTES_COLUMN,
         MergedPedigreeSampleManifestConstants.CODED_PHENOTYPE_COLUMN: JsonConstants.CODED_PHENOTYPE_COLUMN,
     }

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: [Sparc] Tweak r255668: Use llvm_unreachable.  llvm-svn: 255698
Code Diff: @@ -527,7 +527,7 @@ LowerFormalArguments_32(SDValue Chain,
                          "pass indirectly");
     } else {
       // We shouldn't see any other value types here.
-      assert(false && "Unexpected ValVT encountered in frame lowering.");
+      llvm_unreachable("Unexpected ValVT encountered in frame lowering.");
     }
     InVals.push_back(Load);
   }

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: CheriBSD tests: increase timeout for login prompt  Booting the purecap kernel with a purecap world is currently quite slow and we sometimes get timeouts in Jenkins.
Code Diff: @@ -815,7 +815,7 @@ def boot_and_login(child: CheriBSDSpawnMixin, *, starttime, kernel_init_only=Fal
             have_dhclient = True
             success("===> got DHCPACK")
             # we have a network, keep waiting for the login prompt
-            i = child.expect(boot_expect_strings + FATAL_ERROR_MESSAGES, timeout=5 * 60,
+            i = child.expect(boot_expect_strings + FATAL_ERROR_MESSAGES, timeout=15 * 60,
                              timeout_msg="timeout awaiting login prompt")
         if i == boot_expect_strings.index(LOGIN):
             success("===> got login prompt")

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: [NewGVN] Prefer auto over explicit type. NFCI.  llvm-svn: 291328
Code Diff: @@ -849,7 +849,7 @@ const Expression *NewGVN::performSymbolicPHIEvaluation(Instruction *I,
     // common value unless it dominates the phi block.
     if (HasUndef) {
       // Only have to check for instructions
-      if (Instruction *AllSameInst = dyn_cast<Instruction>(AllSameValue))
+      if (auto *AllSameInst = dyn_cast<Instruction>(AllSameValue))
         if (!DT->dominates(AllSameInst, I))
           return E;
     }

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: check the None case for input selection (#45)
Code Diff: @@ -364,7 +364,7 @@ class KoopmanSystem:
     def __init__(self, A, B, obs, names, dim=None):
         self._A = A
         self._B = B
-        self._has_input = not np.any(np.array(B.shape) == 0)
+        self._has_input = B is not None and not np.any(np.array(B.shape) == 0)
         self.obs = obs
         self.dim = A.shape[0] if dim is None else dim
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: remote: lower limit batch request size at integer levels
Code Diff: @@ -306,11 +306,13 @@ class Remote:
         i = j # reset
 
       except Remote.BatchException as ex:
-        if max_req > self.MIN_BATCH_REQUEST_SIZE:
-          max_req = max_req / 2
+        max_req = max_req // 2
+
+        if max_req >= self.MIN_BATCH_REQUEST_SIZE:
           i = j # reset
           print ("reducing batch request size to: %d" % max_req)
         else:
+          max_req = self.MIN_BATCH_REQUEST_SIZE
           raise Remote.BatchException ("cannot reduce request any further")
 
       except ConnectionError as ex:

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Output a very high-precision number  llvm-svn: 8856
Code Diff: @@ -80,7 +80,7 @@ static inline std::string itostr(int X) {
 
 static inline std::string ftostr(double V) {
   char Buffer[200];
-  snprintf(Buffer, 200, "%e", V);
+  snprintf(Buffer, 200, "%20.6e", V);
   return Buffer;
 }
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Handle functions with multiple exit blocks properly.  llvm-svn: 37539
Code Diff: @@ -526,6 +526,9 @@ bool GVNPRE::runOnFunction(Function &F) {
          df_begin(PDT.getRootNode()), E = df_end(PDT.getRootNode());
          PDI != E; ++PDI) {
       BasicBlock* BB = PDI->getBlock();
+      if (BB == 0)
+        continue;
+      
       DOUT << "Block: " << BB->getName() << "\n";
       DOUT << "TMP_GEN: ";
       dump(generatedTemporaries[BB]);
@@ -635,6 +638,9 @@ bool GVNPRE::runOnFunction(Function &F) {
          E = df_end(DT.getRootNode()); DI != E; ++DI) {
       BasicBlock* BB = DI->getBlock();
       
+      if (BB == 0)
+        continue;
+      
       std::set<Value*, ExprLT>& new_set = new_sets[BB];
       std::set<Value*, ExprLT>& availOut = availableOut[BB];
       std::set<Value*, ExprLT>& anticIn = anticipatedIn[BB];

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: use textwrap.fill() from stdlib to wrap long lines
Code Diff: @@ -30,7 +30,7 @@ import sys
 import re
 import platform
 import logging
-import codecs
+import textwrap
 
 import ffmulticonverter as ffmc
 from ffmulticonverter import utils
@@ -465,15 +465,7 @@ class MainWindow(QMainWindow):
     def about(self):
         """Call the about dialog with the appropriate values."""
         msg = self.tr('Convert among several file types to other extensions')
-        if len(msg) > 54:
-            # break line if msg is too long to fit the window
-            nmsg = ''
-            for n, w in enumerate(msg.split(' ')):
-                if len(nmsg) > 54:
-                    break
-                nmsg += w + ' '
-            nmsg += '<br>' + msg[len(nmsg):]
-            msg = nmsg
+        msg = textwrap.fill(msg, 54).replace('\n', '<br>')
         text = '''<b> FF Multi Converter {0} </b>
                  <p>{1}
                  <p><a href="{2}">FF Multi Converter - Home Page</a>

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: 33% chance for lich to jump on hit
Code Diff: @@ -199,7 +199,11 @@ public class Lich extends Boss {
                 return 0;
             }
         }
-        jump();
+
+        if (Random.Int(3) == 1){
+            jump();
+        }
+
         return damage;
     }
 

Target: 0
Predicted: 0
--------------------------------------------------
Commit Message: Note why logging a large variant takes long compile: std::visit
Code Diff: @@ -54,8 +54,9 @@ int main()
   BINLOG_INFO("nested: {}", nested);
   // Outputs: nested: true
 
-  // TODO(benedek) this works, but the log statement takes ages to compile
-  // and 5 time as long to run clang-tidy -- needs further investigation.
+  // This works, but the log statement takes ages to compile
+  // and 5 time as long to run clang-tidy -- because of the huge amount
+  // of code generated by std::visit.
   //// limits
   //const std::variant<
   //  int, int, int, int, int, int, int, int, int, int, // 10

Target: 0
Predicted: 0
--------------------------------------------------

Classification Report:
              precision    recall  f1-score   support

           0       0.74      1.00      0.85       138
           1       1.00      0.64      0.78       138

    accuracy                           0.82       276
   macro avg       0.87      0.82      0.82       276
weighted avg       0.87      0.82      0.82       276
