Project Name,Commit URL,Message
cub,https://github.com/NVIDIA/cub/commit/bda267a18aad4d00d78be2b1283a1ca8ad5ec226,"""- Update makefile for stricter floating point accuracy on host code (to
properly measure correctness
- Update performance for global histogram

Former-commit-id: 058b049b79fdcb8e9034ce8281aa9ed427842cbc"""
cub,https://github.com/NVIDIA/cub/commit/aa2a1f59bf59b2797630847aed063afcc979aeb2,"""Fix bug in occupancy calculator
Updated sm350 tune for faster sorting-based histo

Former-commit-id: 2db2cd19103869a734eb89a9e2cbc9741c411aa8"""
cub,https://github.com/NVIDIA/cub/commit/295b682444f473353198c7476a206341dcc826a2,"""more specialization breakout

Former-commit-id: 0534acfbb21d17b2a5bd01c5fa62f22b73ea696d"""
cub,https://github.com/NVIDIA/cub/commit/091436adf11e53d264a258ace7ab8f83bed6ed78,"""update perf tests

Former-commit-id: bf93fa133b0ca217359f6b53f6beb50ba5d6de0e"""
cub,https://github.com/NVIDIA/cub/commit/ee6ddd984144d989e52640c07f7a96a19749787e,"""Fix bugs with PTX13 code running runnign on SM20+
Faster SM13 device scan

Former-commit-id: 235ed60aaa8610d49b384a4dead6bc0e16c3728e"""
cub,https://github.com/NVIDIA/cub/commit/9b1febff4a0a77bdfa6e78b0a24af4e20b15a532,"""Fix for SM2x perf regression on deviceReduce

Former-commit-id: 907e4ef0162945a7c5fd2fdf92f7252787796259"""
cub,https://github.com/NVIDIA/cub/commit/12d0e91d430b873bba6920ca7decdb1283184684,"""- Add thrust comparison for reduce-by-key
- Optimize reduce-by-key for when we have an identity value

Former-commit-id: 7472157e1f2cdfc4894d5512fcab3dc88cfcc81a"""
cub,https://github.com/NVIDIA/cub/commit/8f76aaba8a95dcc7d34250cdcb06f41b8044c4d9,"""Faster scan lookback.
Needs optimization for smem scan (ld/st 64)

Former-commit-id: 306ae271e4bc453e1e3d38bb7eac8825c312cab0"""
cub,https://github.com/NVIDIA/cub/commit/72eabbb8e4f5b1b68541d1af74c98613c3528d62,"""- Better SM1.x reduce by key performance and correctness
- Passing SM1.x reduce 
- Still intermittent scan failure on SM10



Former-commit-id: 67fb5d9446020cd8b2ec50b5fe7719cc7dbbb916"""
cub,https://github.com/NVIDIA/cub/commit/d758066d277c4e8b970db2eb64e01cf2da88d476,"""Reduce register pressure in block scan (fix perf regression in device
radix sort)

Former-commit-id: 634e3dfd8c73292f3e6333021a72aaacad021966"""
cub,https://github.com/NVIDIA/cub/commit/14b2396183e1a783ea6e678a2a289dc60257ca47,"""Fix introduced bug for SMx device types
Update perf spreadsheet


Former-commit-id: 1a60cc30c1a3a22087913d63f6f849f852f2556a"""
cub,https://github.com/NVIDIA/cub/commit/975b2f142f3999bde3c6586a6bbd4354fe61bb46,"""Updated perf spreadsheet
Updated sm10 configs

Former-commit-id: efad2c5a1a71609aab85ac50d8253c03dc5a11ea"""
cub,https://github.com/NVIDIA/cub/commit/d0d9d7e1bca654b4e6d47e62af040205c48375cb,"""- add faster block-wide raking reduce algorithm (commutative only)
- Update chart axis titltes

Former-commit-id: 4ca2eb6c55e29e61738bacbb62bc0d3849194d44"""
cub,https://github.com/NVIDIA/cub/commit/4513f2efb20d331b272b668fa400e01a4ebfa7e0,"""Remove copy during thread store (which was causing compiler optimizations to get in the way of warp-synchronous reduction when the data type needed rematerialing through lmem)


Former-commit-id: 9fad4f37dba83c486c496a33c84a3eace9b24a10"""
cub,https://github.com/NVIDIA/cub/commit/02f2554e82111fe12bcbed812ec2927f60435f44,"""- Tweaks to warpscans and warpscan-based blockscan: add efficient
specialized PTX support for a few types (fp32, fp64, s64), remove code
that triggers (albeit safely) a WAW-identical smem write warning from
cuda-memcheck --tool racecheck

Former-commit-id: 5e7504db8b1d2e9f415aedaeca510a2f09ac1bbd"""
cub,https://github.com/NVIDIA/cub/commit/406f195a291c3e89ce5cca8727c0314abafebd39,"""- Add select-if and select-unique perf data
- Rewrite select-unique and select-if block sweep

Former-commit-id: c4fc7ebc08b568858c657a03c69218efe39abc94"""
cub,https://github.com/NVIDIA/cub/commit/229b06499e90e391b1b4d654c5a5e7134da96a4b,"""Update caching allocator test to include performance comparison

Former-commit-id: 7d471c9a654a2c1bcbe3e75dfbe8bbda1fa284c2"""
cub,https://github.com/NVIDIA/cub/commit/7ed80d83c3b5af3234f499432dacb9590e854292,"""Update perf test

Former-commit-id: 24b46a5589447189bff3d4836b50d6cbc7c6d425"""
cub,https://github.com/NVIDIA/cub/commit/109e0f7e565ed50f0a5a91133329a35cddf91db6,"""- Remove smem-mode optimizations because they can cause uintentional/
undesirable device-wide synchronization

Former-commit-id: 9a146453913b3e852991c2eecce31f67600ce0ed"""
cub,https://github.com/NVIDIA/cub/commit/1dd59cc6d355ab9b5322e58f0bdb5e4e65b986c9,"""Working device histo (improves 8b sample performance by computing 256
bin privatized histograms in the sweep phase and then resolving custom
bins in the aggregation phase)

Former-commit-id: 4f7fe618a5a3bebc4396bf6865c0877a889a1650"""
cub,https://github.com/NVIDIA/cub/commit/1499f2a3b65eef728fd4c3e11a27e0da3118161b,"""Working histo with performance tuning improvements

Former-commit-id: fcf989d244a29b90b6ceb5f1c7d79810bff769f5"""
cub,https://github.com/NVIDIA/cub/commit/0a39f3792b508a3762c9a727ac0a549fb92d0093,"""Faster block radix sort on uint64 keys
More spmv work

Former-commit-id: fc81ab13051ad706f69203d5b71ed17614ae56e4"""
cub,https://github.com/NVIDIA/cub/commit/87d1cc58e225f163e2abdbb48b090022f7b1eca5,"""Fix single-pass hang from CUDA 7.5 compiler loop optimization


Former-commit-id: 71865b6ae9c5a2a6ca5be5bedeae63231c549f56"""
cub,https://github.com/NVIDIA/cub/commit/6d4d86483807b58e275994f3c8684059f9ff31d3,"""scan perf updates


Former-commit-id: 5951fcd8cfdb3f6d879c2b680872f0aebc8437d8"""
cub,https://github.com/NVIDIA/cub/commit/37d51058b079c3612a8e7c9112f73e57d3f080ef,"""fix perf regression


Former-commit-id: 089ffee543e38a8d4219a53a7d88b050ea11089c"""
cub,https://github.com/NVIDIA/cub/commit/f80941b11008b3c5198a4a28905bab4300f2a484,"""Refactor guarded block-loads/stores to prevent excessive RF spillage
when subsequent loads/stores are made

Former-commit-id: 6a052741af71c4ba2cb2ba9a9d488627bb802feb"""
cub,https://github.com/NVIDIA/cub/commit/8e8fab0a10b5c5a5fcb95b732a8c613ce2ba598d,"""GP100 perf tune update


Former-commit-id: 4598ea5a8510afd86b1c5eeaba856e68521057f0"""
cub,https://github.com/NVIDIA/cub/commit/09b751fce51a90cf134f5273849379bf8e4d3d9f,"""Updates for quicker=1 compilation"""
cub,https://github.com/NVIDIA/cub/commit/9a4bde2bf5c8161706e26994ae55b52b99107b97,"""Add heuristics to reduce regpressure during key-value sorting"""
cub,https://github.com/NVIDIA/cub/commit/c794bb86734854f1e162c39ea9fa8f797a48dc22,"""Change initialization style from copy initialization to direct initialization
(which is more permissive) in `AgentReduce` to allow a wider range of types to
be used with it."""
cub,https://github.com/NVIDIA/cub/commit/11755ca32b58f48143549d02f7dc5562c6352ccc,"""Cache calls to `cudaFuncGetAttributes` and `cudaDeviceGetAttribute` within
`cub::PtxVersion` and `cub::SmVersion`. These CUDA APIs acquire locks to CUDA
driver/runtime mutex and perform poorly under contention.

Caching is only done in C++11 as we need a guarantee of thread-safe
initialization of statics. Caching is multi-device aware; a
`cub::SwitchDevice` RAII class and `cub::CurrentDevice` function have been
added to facilitate this.

Bug 2824145
Bug 2808654

Reviewed-by: Michał 'Griwes' Dominiak <griwes@griwes.info>"""
cub,https://github.com/NVIDIA/cub/commit/bac2060e991582063775d34eaeb40822810e4349,"""Lazily initialize the per-device attribute caches, because CUDA context
creation is expensive and adds up with large CUDA binaries on machines with
many GPUs. This was making PyTorch slow and consuming lots of memory.

To implement this, I added an atomic status flag to each entry in the cache.
Each entry is in one of three states, empty, initializing, and ready.
Progression between states happens linearly.

Also:
- Add `cub::DeviceCount` and `cub::DeviceCountUncached`, caching
  abstractions for `cudaGetDeviceCount`.
- Make `cub::SwitchDevice` avoid setting/resetting the device if the current
  device is the same as the target device.

Bug 2884640

Reviewed-by: Michał 'Griwes' Dominiak <griwes@griwes.info>"""
cub,https://github.com/NVIDIA/cub/commit/8e34faa226a74e084897450c62e33377c045004f,"""Fix bug introduced by warning patch.

Reverting the change in signedness of the `lane_id` variable fixes a
bug in optimized device code.

tl;dr:

It looks like the change in signedness of the `lane_id` introduced
a bug in a ReduceStep implementation, in which the expression

```
int offset = ...;
int last_lane = ...;
if (offset + lane_id <= last_lane) { /*... */ }
```

broke, because:

- `operator+(int, int)` returns `int`
- `operator+(int, uint32_t)` return `uint32_t`
- `last_lane` may be negative

My initial assumption that `last_lane` and `offset` would always
be positive was not correct.

In instances where `last_lane` is negative (which does happen
in the thrust.test.reduce TestReduceWithIndirectionDevice test),
this expression will always evaluate false, since an unsigned
value can't be <= a negative number.

So leave the ids as signed, since that seems necessary for this usecase."""
cub,https://github.com/NVIDIA/cub/commit/2442f44532ffcc53298c7e3a298feb5134563860,"""Three more replacements of assignment by placement new"""
cub,https://github.com/NVIDIA/cub/commit/9ff77e37c2f961fe9906866e1387b422ac87e7d9,"""Faster Least Significant Digit Radix Sort Implementation"""
cub,https://github.com/NVIDIA/cub/commit/ffd1601dc5771f5bf3ad1e315f34e1a52e868ba7,"""Fix radix sort perf regression.

The new tuning parameters for radix sort are causing a performance
regression (2MiB input, 16-bit keys, GV100, 21.62 -> 16.01 GiB/sec).
See referenced NVBug for details.

Bug 200676467"""
cub,https://github.com/NVIDIA/cub/commit/bc209e69313dbf05492835afd56fe8408c113a3e,"""Remove some problematic inline annotations.

These functions started producing invalid results in CUDA 11 under
certain circumstances (see issue NVIDIA/thrust#1371), and removing
these hints fixes the issue.

NVIDIA/cub#260 reported that other functions in this file were also
causing the same issue.

These methods are not perf critical -- they don't need to be inlined."""
cub,https://github.com/NVIDIA/cub/commit/f61bc4631b2f15bc7564416fd41c0c69952a5524,"""Replace deprecated `cudaThreadSynchronize()` calls."""
cub,https://github.com/NVIDIA/cub/commit/f2f707f113dd3b287be875613e14f6d75c5469a2,"""Use CUB iterators instead of Thrust iterators in tests."""
cub,https://github.com/NVIDIA/cub/commit/2e459727e7e798427e356daa0a8baa8e50bb0e50,"""Document RadixSort twiddling and its impact on bit-range truncation.

For both Device and Block algorithms. Note that these do not handle
twiddling during descending sort in the same way."""
cub,https://github.com/NVIDIA/cub/commit/9acf82a968e76c3342ff230ff65dc348c9f45694,"""Update deprecation mechanism (opt-out, cmake, c++14).

Opt-out for our internal builds, since we'll still need to maintain and
test any deprecated APIs."""
cub,https://github.com/NVIDIA/cub/commit/85a67983c396b8ce25818f6006da5f7ce096aaef,"""Make cub::DeviceSpmv robust against empty inputs."""
cub,https://github.com/NVIDIA/cub/commit/10ebcdda56595859835a635b6e2311c0899aa3b8,"""Prevent min/max macro substitution on MSVC."""
cub,https://github.com/NVIDIA/cub/commit/114fc65dbd64682ccf86875b34925c418c4c0ab7,"""Adds BlockRunLengthDecode algorithm and tests"""
cub,https://github.com/NVIDIA/cub/commit/672769895ee706671d212f45958de41c98463f36,"""Dropping algorithm specialisation template parameter"""
cub,https://github.com/NVIDIA/cub/commit/e6a73a13125fefc0aff02fdbc5cd53128779d84f,"""add interface to provide run offsets and binary search optimization"""
cub,https://github.com/NVIDIA/cub/commit/190dddf5e873c27722c6e5e785b4deb107b11a4b,"""reduced test complexity"""
cub,https://github.com/NVIDIA/cub/commit/3cda69e6ffdde13256da02e2a8aa3dd0a2f35f29,"""Speedup compilation time of segmented sort test"""
cub,https://github.com/NVIDIA/cub/commit/8a70d82b4c7ba940df5413c3c62bfa9610fca660,"""Speedup build time of block radix sort test"""
cub,https://github.com/NVIDIA/cub/commit/da950dc656fb28ca638713b28aa65c2449823025,"""Optimize compilation time for the common case"""
cub,https://github.com/NVIDIA/cub/commit/c770b8b12a8995473de9fff139a0c264fee31bef,"""Tell gcc this sizeof division is intended ( -Wsizeof-array-div )"""
cub,https://github.com/NVIDIA/cub/commit/10854c6eed3855e04d580238a386cce24444e174,"""Fix spurious uninitialized variable warning on gcc11.

Replace the type-punning with a UB-safe bit conversion. The
compiler will optimize the memcpy out and just convert the bits."""
cub,https://github.com/NVIDIA/cub/commit/235e2d9136488865acac0105b6f3cd7e34a4a3c3,"""Compute ranks only when sorting values."""
cub,https://github.com/NVIDIA/cub/commit/58ba232d8a2cc108f12f1a18c7d3e73efb45f242,"""Normalize flags in device select"""
cub,https://github.com/NVIDIA/cub/commit/fe9a3efbd1063be679833986e516c53cb0661a1c,"""Alternative approach to 64-bit indexing in adj diff"""
cub,https://github.com/NVIDIA/cub/commit/101a809a1f518bd1156bfc8b6e3e05c0d8f9560d,"""Wrap `AgentScanByKey::TempStorage` in `cub::Uninitialized`.

This fixes invalid memory accesses in two Thrust examples
(`scan_by_key` and `summed_area_table`) on optimized nvc++ builds."""
cub,https://github.com/NVIDIA/cub/commit/6751982445f4b6e8f101bf2fb01358dcd4efe7a2,"""In-place guarantees for scan algorithms"""
cub,https://github.com/NVIDIA/cub/commit/fd10729453ac4ddf4eee0a626e8f3dd6df04cadc,"""Document in-place guarantees for reduce"""
cub,https://github.com/NVIDIA/cub/commit/91963c8ad87ed28311c924850f2bfe7cb835e668,"""Forbid redux for nvc++"""
cub,https://github.com/NVIDIA/cub/commit/bf955edfb09cca34cd77e11151db7c0f2f8fae8e,"""P2322R6 accumulator types for scan by key"""
cub,https://github.com/NVIDIA/cub/commit/43a037634912db57af0f0d50e518029b73293e69,"""Refactor reduce by key"""
cub,https://github.com/NVIDIA/cub/commit/14a6cbefc142d4cbf43075ea56610e275f596055,"""P2322R6 accumulator types for reduce by key"""
cub,https://github.com/NVIDIA/cub/commit/3dbde5b5e31819e56dadc0a2ee895f1995eb2127,"""Address code-gen regression in case of placement new"""
cub,https://github.com/NVIDIA/cub/commit/2d578093bc2e0be5fdfd17b0c9027235dc4f0441,"""Sorting policy for H100."""
cub,https://github.com/NVIDIA/cub/commit/8b9f0b0b826c7a2bbcf8a712ffa23402c39b25bd,"""Support reduction for more than 2^31 items"""
cub,https://github.com/NVIDIA/cub/commit/a56aed9d0beec0d457772b451efae4fd35386a2a,"""WAR hanging for reduction with complex operator"""
cub,https://github.com/NVIDIA/cub/commit/01a238844e89164a3991a0a78a381b6934dcb97b,"""Use lowest instead of min for generator"""
cub,https://github.com/NVIDIA/cub/commit/250fd5c7041d237a45f94f17a409447e4a43f380,"""Optimize decoupled look-back"""
cub,https://github.com/NVIDIA/cub/commit/90269fdcdd1ced6b747b6bdaa5e79c2a88d58293,"""Simplify reduce_exists helper"""
cub,https://github.com/NVIDIA/cub/commit/658bab8502be182043077e447f4a1405913a451d,"""Test reduction with bf16 and fp16"""
cub,https://github.com/NVIDIA/cub/commit/350022a2565ae9392e0df68e85e0e587aaaddbd9,"""Reduce RAM usage by radix sort tests"""
cub,https://github.com/NVIDIA/cub/commit/835d0556f26d3877761e94f4895778d0a0fab54b,"""Optimize merge sort"""
cub,https://github.com/NVIDIA/cub/commit/4d65ee91cf3d8eb834b9c5fdeeffe5fdf5ba7d37,"""Allow TilePrefixCallbackOp to compute tile index"""
cub,https://github.com/NVIDIA/cub/commit/eb9731a1b521235d9857b4ca14798ab0ea000b3b,"""Fewer workloads for select and partition"""
cub,https://github.com/NVIDIA/cub/commit/24755a316c0522a29d5f3fc35410a557f65276ea,"""Introduce tuning parameter into reduce by key"""
cub,https://github.com/NVIDIA/cub/commit/17e6ea134c57644801c8eda48fa5afa92074d7a3,"""Generate power-law distributed offsets"""
cub,https://github.com/NVIDIA/cub/commit/9b9d4531ca792d889a9f85fb0cf1e5d16d3d17d2,"""Generate segmented workload for by-key algorithms"""
cub,https://github.com/NVIDIA/cub/commit/3bbf1fd91328089f43daf9d1a93d85d01ad23599,"""Use new generator in scan by key"""
cub,https://github.com/NVIDIA/cub/commit/4bbcb26fb29062b5a6b391c89e60c4346364999c,"""Uniform segment keys"""
cub,https://github.com/NVIDIA/cub/commit/06da67857e03442ece9f4c4f577ab76dcdaa2e6b,"""Tune reduce by key"""
cub,https://github.com/NVIDIA/cub/commit/edd00b299485dc16ba7815e6ac9e41f30130b35f,"""Simplify decoupled look-back tuning"""
cub,https://github.com/NVIDIA/cub/commit/b0ae4004fbb3870f13d2f1d925ba313220d45f09,"""Tune RLE for SM90"""
CUDA_Freshman,https://github.com/Tony-Tan/CUDA_Freshman/commit/9ab4ff6e841e62c75a7bd37a8d604ece0f07f629,"""reduce integer"""
CUDA_Freshman,https://github.com/Tony-Tan/CUDA_Freshman/commit/0056696cfed2362f3728e9abf9abf5756f869c59,"""reduceInteger"""
CUDA_Freshman,https://github.com/Tony-Tan/CUDA_Freshman/commit/97830dcc48e31ec2a09b9255020812f098c41cb5,"""reduceInteger"""
CUDA_Freshman,https://github.com/Tony-Tan/CUDA_Freshman/commit/d2738a8b82282f82ef7394381d5a062ec7b0a17a,"""reduce inter leaved"""
cugraph,https://github.com/rapidsai/cugraph/commit/be193c36a8c74870158696ff6b91c68510ce636b,"""WIP, added python bindings for modularity maximization clustering, balanced cut clustering, and clustering metric methods"""
cugraph,https://github.com/rapidsai/cugraph/commit/e05047565161947481d06d63133fe46ab728bca0,"""remove cudatoolkit dependency for weighted jaccard"""
cugraph,https://github.com/rapidsai/cugraph/commit/9669ec90554fcf5080cd9245b06eedc631cc38eb,"""WIP: Starting to add in function to get two hop neighbors"""
cugraph,https://github.com/rapidsai/cugraph/commit/b7a14aa8dcc9d0bf0acd81ec4d31d7b4d1244bfa,"""WIP on computing two hop neighbors"""
cugraph,https://github.com/rapidsai/cugraph/commit/c4c3784572d68f2a7a664950931942dc7a5982b9,"""Added an nvgraph light path for cugraph that speed up the build by 3x"""
cugraph,https://github.com/rapidsai/cugraph/commit/9a33860bcfb5ed0a490d7c0fd089a3b59fef56db,"""WIP starting to add c methods for computing overlap coefficient"""
cugraph,https://github.com/rapidsai/cugraph/commit/ef677e647fece4cbd124de1b2904c8b7566f95fd,"""Added overlap coefficient functionality in python layer"""
cugraph,https://github.com/rapidsai/cugraph/commit/11586335c63e69154a88f127915ed72729acc447,"""changed the allgather to be more stable"""
cugraph,https://github.com/rapidsai/cugraph/commit/57daf68486bb2547c05eb5d7226f69a0ad84c28f,"""removed tab space in algorithms.h"""
cugraph,https://github.com/rapidsai/cugraph/commit/efa0fcec8c82060e2c2db9c8afe18743e26086c0,"""Added a kernel to compute the markov transition matrix"""
cugraph,https://github.com/rapidsai/cugraph/commit/84870b4752e3a47919f5fc0cca6d01da7ad1b84c,"""power iteration checkpoint"""
cugraph,https://github.com/rapidsai/cugraph/commit/dfd2892435ebcf253c03a4e016490c9e0d6557c2,"""Adding cudadeviceSynchronize"""
cugraph,https://github.com/rapidsai/cugraph/commit/197831bc6cf5d34f9ae12c81dcde675debaa8f08,"""added check for edge_data != nullptr for graph algorithms requiring edge weights"""
cugraph,https://github.com/rapidsai/cugraph/commit/e9806b48f142533587f068fab2f957ae3ba9268e,"""Finished implementation of find matches operator"""
cugraph,https://github.com/rapidsai/cugraph/commit/be193c36a8c74870158696ff6b91c68510ce636b,"""WIP, added python bindings for modularity maximization clustering, balanced cut clustering, and clustering metric methods"""
cugraph,https://github.com/rapidsai/cugraph/commit/e05047565161947481d06d63133fe46ab728bca0,"""remove cudatoolkit dependency for weighted jaccard"""
cugraph,https://github.com/rapidsai/cugraph/commit/9669ec90554fcf5080cd9245b06eedc631cc38eb,"""WIP: Starting to add in function to get two hop neighbors"""
cugraph,https://github.com/rapidsai/cugraph/commit/b7a14aa8dcc9d0bf0acd81ec4d31d7b4d1244bfa,"""WIP on computing two hop neighbors"""
cugraph,https://github.com/rapidsai/cugraph/commit/c4c3784572d68f2a7a664950931942dc7a5982b9,"""Added an nvgraph light path for cugraph that speed up the build by 3x"""
cugraph,https://github.com/rapidsai/cugraph/commit/9a33860bcfb5ed0a490d7c0fd089a3b59fef56db,"""WIP starting to add c methods for computing overlap coefficient"""
cugraph,https://github.com/rapidsai/cugraph/commit/ef677e647fece4cbd124de1b2904c8b7566f95fd,"""Added overlap coefficient functionality in python layer"""
cugraph,https://github.com/rapidsai/cugraph/commit/11586335c63e69154a88f127915ed72729acc447,"""changed the allgather to be more stable"""
cugraph,https://github.com/rapidsai/cugraph/commit/57daf68486bb2547c05eb5d7226f69a0ad84c28f,"""removed tab space in algorithms.h"""
cugraph,https://github.com/rapidsai/cugraph/commit/efa0fcec8c82060e2c2db9c8afe18743e26086c0,"""Added a kernel to compute the markov transition matrix"""
cugraph,https://github.com/rapidsai/cugraph/commit/84870b4752e3a47919f5fc0cca6d01da7ad1b84c,"""power iteration checkpoint"""
cugraph,https://github.com/rapidsai/cugraph/commit/dfd2892435ebcf253c03a4e016490c9e0d6557c2,"""Adding cudadeviceSynchronize"""
cugraph,https://github.com/rapidsai/cugraph/commit/197831bc6cf5d34f9ae12c81dcde675debaa8f08,"""added check for edge_data != nullptr for graph algorithms requiring edge weights"""
cugraph,https://github.com/rapidsai/cugraph/commit/e9806b48f142533587f068fab2f957ae3ba9268e,"""Finished implementation of find matches operator"""
cugraph,https://github.com/rapidsai/cugraph/commit/aabf183dec52ddd7c3ffa3ac4fb790777279b6e4,"""Explanation about the process of kcore extraction"""
cugraph,https://github.com/rapidsai/cugraph/commit/5ccc67c96c27ae4028b552031c4ee6db6452a829,"""Iniital work on wrapping k-truss algorithm"""
cugraph,https://github.com/rapidsai/cugraph/commit/eed517ef49bd1cb7fdf54e040da0c068ce48b1bd,"""Building dynamic Hornet for ktruss computation"""
cugraph,https://github.com/rapidsai/cugraph/commit/df7ffca1412fa261e43c7aed9f8e8868599a035f,"""reducing cpp pagerank test suite as per slack chat"""
cugraph,https://github.com/rapidsai/cugraph/commit/8c6df87ec9d1e4534cbe43c432d7a66bf5e498fa,"""Update algorithms.h"""
cugraph,https://github.com/rapidsai/cugraph/commit/14a1ff33c82dd04ddede872ecece5a12841823b2,"""replace a cudaGetDeviceProperties with three separate cudaDeviceGetAttribute calls for three attributes; the latter is > 100x faster"""
cugraph,https://github.com/rapidsai/cugraph/commit/5712b08466d5a242e0fbbc4f509670b8cb8b7666,"""replaced Graph by GraphCSR in sssp.cu/cuh sssp_kernels.cuh, moved sssp to algorithms.hpp"""
cugraph,https://github.com/rapidsai/cugraph/commit/af0dbede74fadb28ed5d3255133253575c447e8f,"""updated bfs .cu/cuh, moved bfs to algorithms.hpp"""
cugraph,https://github.com/rapidsai/cugraph/commit/4ba2a4ef5a00f08270d4d195ab7526c2f4b09837,"""sssp generate fake 1.0 weights again, add tests for this behavior"""
cugraph,https://github.com/rapidsai/cugraph/commit/b975c4598961b25b0c4923a5642df9cdc30d68d1,"""update bfs optimization path"""
cugraph,https://github.com/rapidsai/cugraph/commit/6bbbf3d20a9ccf96300b837553eda377432b4be9,"""Define API for hungarian algorithm"""
cugraph,https://github.com/rapidsai/cugraph/commit/d7f96f5fe833af364e6ce3a2096f211dde4892c4,"""add c++ ref algorithm"""
cugraph,https://github.com/rapidsai/cugraph/commit/a8a171f6fea157dc4c1eff1762fb87aa9f25335d,"""Katz calculates alpha if not provided"""
cugraph,https://github.com/rapidsai/cugraph/commit/6dcd335eb8d4196753575cc9b692a12d54793625,"""Normalize interface and remove vertex column when returning df"""
cugraph,https://github.com/rapidsai/cugraph/commit/dc7bda2e4e1ec3b6ba3d21c2fd54da26bf1b8611,"""Compute best jitter tolerance and speed on CPU"""
cugraph,https://github.com/rapidsai/cugraph/commit/79318e9ebc34b04c542c175340037f30eedda831,"""Sort and compute degree with COO"""
cugraph,https://github.com/rapidsai/cugraph/commit/1fc5e02716455082de604133b179f041dc1c4823,"""Compute distance inside lin log block"""
cugraph,https://github.com/rapidsai/cugraph/commit/3db36226ecf8fc1ada0eed37064e30059cdf249f,"""Louvain optimization"""
cugraph,https://github.com/rapidsai/cugraph/commit/4b38a7a29ebea628902eacc181f2469dcdecbf0e,"""bc: compute no longer resets betweenness"""
cugraph,https://github.com/rapidsai/cugraph/commit/feee7f9cac2f7c44a1f238a3052ed5c24687984f,"""add wrapper for gunrock HITS algorithm"""
cugraph,https://github.com/rapidsai/cugraph/commit/1a3fc3f933842b4350ac569c69da8b0631d89f4a,"""saving progress, started RAFT and RAII integration"""
cugraph,https://github.com/rapidsai/cugraph/commit/9c91246d4cafce8c1aea555a12f4fa2afa033203,"""bc: unstable, moving copies and reduce to c++"""
cugraph,https://github.com/rapidsai/cugraph/commit/907697477fffee6527afa90a7d865e18544363c0,"""BFSCommunicator abstraction for frontier reduction"""
cugraph,https://github.com/rapidsai/cugraph/commit/6c3a648ee6bc9e967290ccf9298e02e84c148adb,"""Compiled raft version of spectral clustering partition. Not tested yet."""
cugraph,https://github.com/rapidsai/cugraph/commit/ba8b51cf6d68874fa5e8b545e4eb2c903761838a,"""Ported modularityMaximization() to raft."""
cugraph,https://github.com/rapidsai/cugraph/commit/9957803f05deafde45351d50f5016f34bab6170d,"""Ported modularity analysis to RAFT."""
cugraph,https://github.com/rapidsai/cugraph/commit/a7918aabc81c33cb578def012370d87c69035f39,"""Ifdefed-out nvgraph dependency in spectral clustering."""
cugraph,https://github.com/rapidsai/cugraph/commit/058d774f3e54a7910ab274cc154d79f8cefe963b,"""opg: graph distribution uses class"""
cugraph,https://github.com/rapidsai/cugraph/commit/3df9df2b33104b1f86f6022f46b469a9ddb63aa1,"""WIP MG BFS perf fix"""
cugraph,https://github.com/rapidsai/cugraph/commit/89c95c8a8fb8710d6fc9385b4ce378c2955f25f1,"""bc: all reduce total number of sources"""
cugraph,https://github.com/rapidsai/cugraph/commit/c14a49e1238f8a9f6fdb0727bf888c3b53a6d234,"""Removed unnecessary device-to-host copy which caused a performance regression. Fixed some search-and-replace errors in comments, added more detail about k to the BC docstring."""
cugraph,https://github.com/rapidsai/cugraph/commit/b68d72f79c45ea6b8318d94bcaa9932b293b696f,"""Proto interface and implementation."""
cugraph,https://github.com/rapidsai/cugraph/commit/322fcb2a04d89c52a3e231edb350783aaaa553b2,"""factor out matrix market garph file read"""
cugraph,https://github.com/rapidsai/cugraph/commit/6bf3eb67ef9274118ffaa22cfdc27f8663b47489,"""saving progress"""
cugraph,https://github.com/rapidsai/cugraph/commit/bb8c66397d6f2e8d8ce0808cfd4944baa10771e0,"""add functions to compute mappings between vertex/edge and GPU rank"""
cugraph,https://github.com/rapidsai/cugraph/commit/0cd66787bb092b6ae82a870c0e4182bfc546c430,"""saving progress"""
cugraph,https://github.com/rapidsai/cugraph/commit/844000e2de2d9d47febf48a4c7aa9aea86fa59ed,"""fix API inconsistencies in graph functions.hpp (compare to graph primitives based algorithms in algorithms.hpp)"""
cugraph,https://github.com/rapidsai/cugraph/commit/7c7c79e24ec897e14ae067007153eff787a01150,"""Implement MNMG Renumber (#1355)

This exposes to cython / python newly added C++ functions `sort_and_shuffle_values()` and `renumber_edgelist()` in order to perform MNMG renumbering.

Authors:
  - Andrei Schaffer (@aschaffer)

Approvers:
  - Chuck Hastings (@ChuckHastings)
  - Seunghwa Kang (@seunghwak)
  - Alex Fender (@afender)

URL: https://github.com/rapidsai/cugraph/pull/1355"""
cugraph,https://github.com/rapidsai/cugraph/commit/369beee0f912e87bd8272ae500bc56711319f6d6,"""Rename sort_and_shuffle to groupby_gpuid_and_shuffle (#1392)

Rename to better reflect what this function should do than how it is currently implemented (which can change in the future for better performance).

Authors:
  - Seunghwa Kang (@seunghwak)

Approvers:
  - Chuck Hastings (@ChuckHastings)
  - Alex Fender (@afender)

URL: https://github.com/rapidsai/cugraph/pull/1392"""
cugraph,https://github.com/rapidsai/cugraph/commit/e5250403fd0f4f2593ab829c57358152bc879306,"""Streams infra + support in egonet (#1435)

- Stream synchronization behavior: switched to per-thread default stream instead of the legacy default stream
- Update raft tag
- EgoNet upgrade to use `uvector` instead of `device_vector`
- EgoNet upgrade to execute on a different stream for each seed
- Perf analysis timers/app for EgoNet

Concurrency is limited by the number of available blocks on the device. Thrust-based codes may request a lot of blocks without a way to control this. In practice, smaller graphs leverage concurrency better than larger ones where tasks may end up waiting for available resources.

We may wait on #1407 before reconciling and merging this
Close #957

Authors:
  - Alex Fender (@afender)

Approvers:
  - Seunghwa Kang (@seunghwak)
  - Andrei Schaffer (@aschaffer)

URL: https://github.com/rapidsai/cugraph/pull/1435"""
cugraph,https://github.com/rapidsai/cugraph/commit/b85bd4788be6cca0f5e57410d222cbecf2786ccf,"""TSP solver bug fix (#1480)

Addressed comments from: https://github.com/rapidsai/cugraph/issues/1450
In addition:

1. Made raft handle const.
2. Split algorithm into multiple kernel calls and updated timers.
3. Removed global symbols to retrieve results in struct.

Authors:
  - Hugo Linsenmaier (@hlinsen)

Approvers:
  - Brad Rees (@BradReesWork)
  - Andrei Schaffer (@aschaffer)
  - Alex Fender (@afender)

URL: https://github.com/rapidsai/cugraph/pull/1480"""
cugraph,https://github.com/rapidsai/cugraph/commit/fe51a316e60043bf341c4b1c86dc474eef5eb41c,"""SG & MG Weakly Connected Components (#1604)

- C++ SG & MG Weakly Connected Components
- This PR is to help python binding development
- Performance/memory footprint optimizations for SG, MG with # GPUs < (E/V)^2, MG with # GPUs > (E/V)^2 will be in separate PRs

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Andrei Schaffer (https://github.com/aschaffer)
  - Chuck Hastings (https://github.com/ChuckHastings)

URL: https://github.com/rapidsai/cugraph/pull/1604"""
cugraph,https://github.com/rapidsai/cugraph/commit/ab19cbd0935031139394d3d1ddeb009646eaa03e,"""WCC performance/memory footprint optimization (#1605)

- Performance tune/reduce memory footprint for WCC for SG & MG (when # GPUs < (E/V)^2, additional memory footprint optimizations are necessary if # GPUs > (E/V)^2 and this will be addressed in separate PRs).
- MG bug fixes

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Andrei Schaffer (https://github.com/aschaffer)
  - Chuck Hastings (https://github.com/ChuckHastings)

URL: https://github.com/rapidsai/cugraph/pull/1605"""
cugraph,https://github.com/rapidsai/cugraph/commit/1030a49b2796fd5939ef6ba151d2d5546db3eed9,"""Fea hungarian expose precision (#1673)

Closes #1645
Closes #1646 

Expose the precision parameter (epsilon in the Date/Nagi implementation) of the Hungarian algorithm to be controllable by the user.  Add support for rectangular matrices.

Will be enabled for CI after https://github.com/rapidsai/raft/pull/275 is merged.

Authors:
  - Chuck Hastings (https://github.com/ChuckHastings)

Approvers:
  - Andrei Schaffer (https://github.com/aschaffer)
  - Brad Rees (https://github.com/BradReesWork)
  - Kumar Aatish (https://github.com/kaatish)

URL: https://github.com/rapidsai/cugraph/pull/1673"""
cugraph,https://github.com/rapidsai/cugraph/commit/a13ed2fc2704805537990843fa5f2a25a512c9bc,"""Improve Random Walks performance (#1685)

This tracks work on adding additional Random Walks traversal strategy: horizontal. This strategy is more efficient, but requires more GPU memory.

The previous strategy (vertical) is only used when not enough GPU memory is available to support the horizontal one. The decision on which to use is based on GPU memory availability: if enough memory is available then the more performant (horizontal) strategy is used.

Authors:
  - Andrei Schaffer (https://github.com/aschaffer)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Kumar Aatish (https://github.com/kaatish)

URL: https://github.com/rapidsai/cugraph/pull/1685"""
cugraph,https://github.com/rapidsai/cugraph/commit/04f73b8bb9cccd4e771c10b58bf577cf4882f56c,"""Update primitives to support DCSR (DCSC) segments (Part 1) (#1690)

Update graph primitives to support DCSR (DCSC) segments (except for the ones used by Louvain, graph primitives used in Louvain will be updated in a separate PR with thread-divergence optimization & more testing).

DCSR (DCSC) segment support is still disabled (as enabling this will break Louvain).

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)
  - Mark Harris (https://github.com/harrism)
  - Chuck Hastings (https://github.com/ChuckHastings)
  - AJ Schmidt (https://github.com/ajschmidt8)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Brad Rees (https://github.com/BradReesWork)

URL: https://github.com/rapidsai/cugraph/pull/1690"""
cugraph,https://github.com/rapidsai/cugraph/commit/c6974d75afd8dc49681f7016b27dc01c117a9428,"""C++ benchmarking for MG PageRank (#1755)

- [x] Update google tests to take additional command line arguments (to report performance measurements and control R-mat graph size in command line)
- [x] Store the parsed command line arguments in globally accessible variables
- [x] Update MG PageRank test code to behave based on the globally accessible variables storing command line inputs.

Exemplar benchmark scripts
```
// 32 bit vertex & edge IDs
mpirun -n 2 --tag-output --output-filename log ./tests/MG_PAGERANK_TEST --gtest_filter=rmat_large_tests/Tests_MGPageRank_Rmat.CheckInt32Int32* --perf --rmat_scale=25 --rmat_edge_factor=16
// 32bit vertex ID & 64 bit edge ID
mpirun -n 2 --tag-output --output-filename log ./tests/MG_PAGERANK_TEST --gtest_filter=rmat_large_tests/Tests_MGPageRank_Rmat.CheckInt32Int64* --perf --rmat_scale=25 --rmat_edge_factor=16
// 64 bit vertex & edge IDs
mpirun -n 2 --tag-output --output-filename log ./tests/MG_PAGERANK_TEST --gtest_filter=rmat_large_tests/Tests_MGPageRank_Rmat.CheckInt64Int64* --perf --rmat_scale=25 --rmat_edge_factor=16
```

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Kumar Aatish (https://github.com/kaatish)
  - Rick Ratzel (https://github.com/rlratzel)

URL: https://github.com/rapidsai/cugraph/pull/1755"""
cugraph,https://github.com/rapidsai/cugraph/commit/c3b26b616a6141fc5e3a19374e1dbf4742d93307,"""Changed value of the expensive check param to `false` in `populate_graph_container` (#1839)

Changed the value of the expensive check param to false in the call to `populate_graph_container`.

Since the expensive check is still valuable for test and debugging, the option will be exposed to the python user in a separate PR as part of a debug mode API, and for now it's assumed there's test coverage using the expensive check in the C++ tests.

see also #1840 

NOTES:
* This PR has the `bug` label since it prevents a bug from surfacing in the C++ expensive check, but it was not the root cause of the recent test failures. Setting expensive check to false needs to happen regardless for performance reasons.
* This was not built and tested locally yet!

Authors:
  - Rick Ratzel (https://github.com/rlratzel)

Approvers:
  - Seunghwa Kang (https://github.com/seunghwak)
  - Chuck Hastings (https://github.com/ChuckHastings)

URL: https://github.com/rapidsai/cugraph/pull/1839"""
cugraph,https://github.com/rapidsai/cugraph/commit/4cd2a5557974c16054865eeef9e5e52eb064fd00,"""Sort local neighbors in the graph adjacency list. (#1886)

This is necessary for implementing Node2Vec and triangle counting (and also improves edge traversal performance as this improves locality of row/column property accesses).

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Andrei Schaffer (https://github.com/aschaffer)
  - Chuck Hastings (https://github.com/ChuckHastings)

URL: https://github.com/rapidsai/cugraph/pull/1886"""
cugraph,https://github.com/rapidsai/cugraph/commit/86246305a96a74a661144ef133e607e30132bd94,"""Reduce MNMG memory requirements (#1916)

- [x] Add overflow check for vertex_t & edge_t in construct_edgelist
- [x] Update CUGRAPH_MG_TEST_PROGRAM_MAIN() to work with multiple nodes.
- [x] Memory requirement optimizations

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Kumar Aatish (https://github.com/kaatish)

URL: https://github.com/rapidsai/cugraph/pull/1916"""
cugraph,https://github.com/rapidsai/cugraph/commit/df7bb9ae73d792b190e5e8fb611e540724d14a0e,"""Additional improvements to support (key, value) pairs when E/V is small and P is large (#1919)

This PR pulls updates from #1916 & https://github.com/rapidsai/cugraph/pull/1917. Better be reviewed after #1916 &https://github.com/rapidsai/cugraph/pull/1917 gets merged.

(key, value) pairs are still disabled (by setting the threshold value to 0) as this has performance overhead and no clear benefit in analyzing larger graphs up to 32 GPUs (unless we artificially tweak 2D partitioning of GPUs). The threshold value needs to be adjusted with larger scale testing later.

- [x] Update copy_v_transform_reduce_in_out_nbr to use minor_properties_t as a temporary buffer.

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)

URL: https://github.com/rapidsai/cugraph/pull/1919"""
cugraph,https://github.com/rapidsai/cugraph/commit/c49f049aa6402c90282dcbf68b43958d678f2cb4,"""make C++ tests run faster (fewer tests) (#1989)

Modified the most expensive C++ tests to run fewer tests.  Closes #1555 

Added an option (like in the rmat tests) to run a specific test file if the developer wants to manually run larger tests.  For example:

```tests/COARSEN_GRAPH_TEST --gtest_filter=file_ben* --test_file_name=test/datasets/ljournal-2008.mtx```

The smaller graphs *should* be small enough to test things.  Once we add C++ code coverage we should be able to verify this.

On my local workstation this reduced the time spent executing the C++ tests by about 25 minutes.

Authors:
  - Chuck Hastings (https://github.com/ChuckHastings)

Approvers:
  - Kumar Aatish (https://github.com/kaatish)
  - Seunghwa Kang (https://github.com/seunghwak)

URL: https://github.com/rapidsai/cugraph/pull/1989"""
cugraph,https://github.com/rapidsai/cugraph/commit/6883cc197eb4fc670026c70ceb255ea665fd1755,"""Update the update_frontier_v_push_if_out_nbr primitive & BFS performance (#1988)

- [x] Updates update_frontier_v_push_if_out_nbr to use fewer atomics & reduce thread-divergence.
- [x] Update BFS code to reduce unnecessary pushes.

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Kumar Aatish (https://github.com/kaatish)

URL: https://github.com/rapidsai/cugraph/pull/1988"""
cugraph,https://github.com/rapidsai/cugraph/commit/c92087b46c783de0a0c714378cc1f75ee48206cc,"""Use CUB 1.15.0's new segmented sort (#1977)

- [x] Update neighbor sort to use the new segmented sort.
- [x] Update copy_v_transform_reduce_key_aggregated_out_nbr to use the new segmented sort (instead of a global sort) for the data already sorted by major vertices (e.g. previously segmented sort was slower than the global sort).

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Kumar Aatish (https://github.com/kaatish)

URL: https://github.com/rapidsai/cugraph/pull/1977"""
cugraph,https://github.com/rapidsai/cugraph/commit/e0038f02e3ebb26f0163417cae9c0e27a73e1a6c,"""Add optimized 2x string column renumbering code (#1996)



Authors:
  - https://github.com/chirayuG-nvidia

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)

URL: https://github.com/rapidsai/cugraph/pull/1996"""
cugraph,https://github.com/rapidsai/cugraph/commit/e95171f088836e9fc75a06feb55992d197412668,"""neighbor sampling in COO/CSR format (#1982)

This pull request adds neighborhood sampling, as needed by GNN frameworks (DGL, PyTorch-Geometric).

Since I did not hear back on most of the other issues that need to be addressed before this, I am continuing with my plan of first opening a PR with just the API. Once we agree on the final API, and once a minimal version of cugraph-ops is integrated, we can add the implementation of this API.

In particular, for now I am suggesting that the sampling type is exposed in the public API (it does not exist yet in cugraph-ops since that has not been integrated yet). This must be decided ahead of sampling for best performance (either by the end user or some automatic heuristic on the original graph), which is why it makes sense to have as a separate parameter for this API.

EDIT: link to issue https://github.com/rapidsai/cugraph/issues/1978

Authors:
  - Matt Joux (https://github.com/MatthiasKohl)

Approvers:
  - AJ Schmidt (https://github.com/ajschmidt8)
  - Robert Maynard (https://github.com/robertmaynard)
  - Andrei Schaffer (https://github.com/aschaffer)
  - Chuck Hastings (https://github.com/ChuckHastings)

URL: https://github.com/rapidsai/cugraph/pull/1982"""
cugraph,https://github.com/rapidsai/cugraph/commit/5fe65f6a77b8cc193603871ab53bd9b1298856e5,"""Improve MG PageRank scalability (#2038)

Improve MG PageRank performance & scalability in multi-node many GPU systems

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Andrei Schaffer (https://github.com/aschaffer)
  - Kumar Aatish (https://github.com/kaatish)

URL: https://github.com/rapidsai/cugraph/pull/2038"""
cugraph,https://github.com/rapidsai/cugraph/commit/f1636a8913f1a7c6e2a502663327073c7865202f,"""Enhancement on uniform random sampling of indices near zero. (#2153)

This is a partial fix for https://github.com/rapidsai/cugraph/issues/1979. 

Specifically, given `N = out-deg(v)` and a random number `r ∈ [0,1]`, one must obtain the equivalent discrete 
`index ∈ {0,1,...,N-1}`. Previous implementation used an upper bound `ubound = N-1` and a linear interpolation. As the issue above mentioned that approach creates problems near the (lower) boundary. 

The fix uses a better bound, namely `ubound = N` and the discrete transformation: `index = floor(r >= 1.0 ? N-1 : r*N)`.

Attached Mathematica plots show the graphs for, say, `N = 13` and `N=17`.

![N=13_cropped](https://user-images.githubusercontent.com/37386037/159776745-13c72963-a426-46e2-975f-feedab6bbbb6.png)

![N=17_uniform_sampling](https://user-images.githubusercontent.com/37386037/159775015-203f4442-e2c7-4422-968e-e76807ec9639.png)

This fix is not high priority for release 22-04, and can be included in the 22-06 release. Also, not all of the concerns formulated in the issue above are addressed by this PR. For example a uniform random generator callable from device is not yet available, but there are plans to perhaps expose something like that in `raft`.

Authors:
  - Andrei Schaffer (https://github.com/aschaffer)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)

URL: https://github.com/rapidsai/cugraph/pull/2153"""
cugraph,https://github.com/rapidsai/cugraph/commit/b3c8c052dd2050af1073bf15e84d2b00b5a8743f,"""Switch back to PC generator (#2356)

With the RAFT changes here: https://github.com/rapidsai/raft/pull/690 we should be able to use the PC generator again.  The PC generator is significantly faster.

Closes #2266

Authors:
  - Chuck Hastings (https://github.com/ChuckHastings)

Approvers:
  - Corey J. Nolet (https://github.com/cjnolet)
  - Seunghwa Kang (https://github.com/seunghwak)

URL: https://github.com/rapidsai/cugraph/pull/2356"""
cugraph,https://github.com/rapidsai/cugraph/commit/656638d17e43db99fb9caeee0997d73b4aa8a09e,"""Enable concurrent broadcasts in update_edge_partition_minor_property() (#2413)

Dependent on https://github.com/rapidsai/raft/pull/742

Place multiple broadcast operations inside ncclGroupStart and ncclGroupEnd wrappers to improve performance.

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)

URL: https://github.com/rapidsai/cugraph/pull/2413"""
cugraph,https://github.com/rapidsai/cugraph/commit/b0837f706517eb915d81f04044fd98041f61bb52,"""Update vertex_frontier_t to take unsorted (tagged-)vertex list with possible duplicates (#2584)

Partially address https://github.com/rapidsai/cugraph/issues/2580

Update vertex_frontier_t to take unsorted input (tagged-)vertex list with possible duplicates.

This will be used to define a selection primitive. The primitive needs to take a (tagged-)vertex list to support Node2Vec style algorithms (tagged with the predecessor vertex ID or some derived property from the current vertex predecessor vertex pairs).

Breaking as primitives API has been changed (`vertex_frontier_t` and `transform_reduce_v_frontier_outgoing_e_by_dst`).

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Joseph Nke (https://github.com/jnke2016)
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Naim (https://github.com/naimnv)

URL: https://github.com/rapidsai/cugraph/pull/2584"""
cugraph,https://github.com/rapidsai/cugraph/commit/bbb54c7404de7d93612515530911c7abd9df3d9d,"""Define a selection primtive API (#2586)

Partially address #2580.

This PR is dependent on #2584.

This PR defines API for two selection primitives, one for the biased sampling/random walk and another for uniform random sampling/random walk.

@ChuckHastings For Node2Vec style random walk,

We can compute intersections for each (previous vertex, current vertex pairs).

We need to first create a non-detail space primitive calling detail::nbr_intersection (https://github.com/rapidsai/cugraph/blob/branch-22.10/cpp/src/prims/detail/nbr_intersection.cuh#L492) for given vertex pairs (this can be used for Jaccard and Overlap coefficients as well).

In MG, each GPU should store neighbor intersection outputs for the relevant source/destination ranges (not sure whether should we create additional utility functions to handle this, or this may not be a recurring pattern, so just leave this task much more as a dark magic for advanced users who understand how the 2D partitioning actually works). May go for the latter till we see this pattern occurring in other places.

Once we have neighbor intersection outputs and previous vertex IDs for the relevant (previous vertex ID, current vertex ID) pairs, we can create `frontier` having tagged-current vertex ID values (tag is an index to access previous vertex ID and neighbor intersection outputs for the perv vertex, current vertex pair).

Then, `e_bias_op` can check whether the outgoing neighbor belongs to the intersection or coincides with the previous vertex to properly set bias values.

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Joseph Nke (https://github.com/jnke2016)

URL: https://github.com/rapidsai/cugraph/pull/2586"""
cugraph,https://github.com/rapidsai/cugraph/commit/4802b2881caf1b407c8bee151636a5c6ef64b197,"""Implement two_hop_neighbors C API (#2915)

Implements the two hop neighbors C API using the k_hop_nbrs algorithm.

This should unblock #2704

Authors:
  - Chuck Hastings (https://github.com/ChuckHastings)

Approvers:
  - Seunghwa Kang (https://github.com/seunghwak)
  - Joseph Nke (https://github.com/jnke2016)

URL: https://github.com/rapidsai/cugraph/pull/2915"""
cugraph,https://github.com/rapidsai/cugraph/commit/c39fc02778f898361c2b4976c4987cba347d5ab4,"""Performance tuning the sampling primitive for multi-node multi-GPU systems. (#3169)

* Update groupby code in multi-GPU communication to use atomics based partitioning instead of sort based partitioning (with atomics performance updates in recent NVIDIA GPUs, now the atomics based approach is significantly faster than the sorting based approach if the number of groups is not excessive).
* In random index generation, add an additional code to handle high-degree vertices with with_replacement = false.

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Rick Ratzel (https://github.com/rlratzel)

URL: https://github.com/rapidsai/cugraph/pull/3169"""
cugraph,https://github.com/rapidsai/cugraph/commit/16cd8764380f67ec97775cb06e1087a701629ab5,"""Uniform sampling code cleanup and minor performance tuning (#3238)

Code clean-up and minor performance tuning.

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)

URL: https://github.com/rapidsai/cugraph/pull/3238"""
cugraph,https://github.com/rapidsai/cugraph/commit/ce00167822e971021665b4b2f85207c1d5ee8d61,"""elementwise_min|max reduction op (#3341)

`per_v_transform_reduce_incoming|outgoing_e` currently supports reduction operators that can be mapped to a raft::comms reduction operator (which is based on NCCL reduction). `per_v_transform_reduce_incoming|outgoing_e` currently takes min|max reduction op on thrust::tuple but performs elementwise min|max. This can be confusing to users. This PR updates `per_v_transform_reduce_incoming|outgoing_e` to take min/max reduction operators only when the value type is scalar (otherwise static_assertion will fail). If the value type is thrust::tuple, users need to pass an elementwise min|max operator instead (this will make it clearer to the users that the primitive will perform elementwise min|max reduction).

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Joseph Nke (https://github.com/jnke2016)
  - Naim (https://github.com/naimnv)

URL: https://github.com/rapidsai/cugraph/pull/3341"""
cugraph,https://github.com/rapidsai/cugraph/commit/682c7eaa9f1cdbcca2d483050b6db68ff453a246,"""Perform expensive edge list check in create_graph_from_edgelist() (#3533)

We previously performed expensive checks on the input edge list inside `graph_t` constructors. This changed when we started to store edge weights (and other edge properties) outside `graph_t`. Now, users are expected to call `create_graph_from_edgelist()` to create a graph and directly calling `graph_t` constructor is discouraged. As `graph_t` is not expected to be called by cugraph users, we're no longer performing expensive checks inside the `graph_t`.

We should perform expensive checks in `create_graph_from_edgelist()` but we are currently not performing these checks (check whether the edge list is symmetric or there are no multi-edges based on the input `graph_properties`).

This PR fixes this.

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)
  - Brad Rees (https://github.com/BradReesWork)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Naim (https://github.com/naimnv)
  - Rick Ratzel (https://github.com/rlratzel)

URL: https://github.com/rapidsai/cugraph/pull/3533"""
cugraph,https://github.com/rapidsai/cugraph/commit/e68d1ddfd0d95f30d556a0a65563d64eb8486400,"""Use rapids-cmake testing to run tests in parallel (#3697)

By switching to rapids-cmake testing infrastructure we can both run all the tests in parallel from the build environment and the test/install env.

Parallel testing performance.
 - serial baseline: 820sec
 - serial + improved memory allocation: 798sec
 - 1 gpu j8: 220sec

Authors:
  - Robert Maynard (https://github.com/robertmaynard)
  - Matt Joux (https://github.com/MatthiasKohl)

Approvers:
  - Vyas Ramasubramani (https://github.com/vyasr)
  - Brad Rees (https://github.com/BradReesWork)
  - Ray Douglass (https://github.com/raydouglass)

URL: https://github.com/rapidsai/cugraph/pull/3697"""
cugraph,https://github.com/rapidsai/cugraph/commit/89e884a40ba287f0bc14d4161695268beb28b792,"""Silence spurious compiler warnings (#3913)

We see compiler warnings basically saying some internal data member in `std::optional` may be used uninitialized. This lengthy warnings are very annoying and can hide important warnings/errors.

Seeing https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80635, it seems like this warning is not valid and due to the fact that the compiler cannot perfectly track when an `std::optional` object is valid or not in every code path.

Anyways, this PR tweaks the code to silence the warnings. There is very little practical difference between the old and new code, but I don't see the annoying warnings anymore with this update.

See the below for the actual warnings.
```
[1/1] Building CUDA object CMakeFiles/cugraph.dir/src/structure/graph_view_mg.cu.o
In member function 'cugraph::detail::edge_minor_property_t<int, int>& cugraph::detail::edge_minor_property_t<int, int>::operator=(cugraph::detail::edge_minor_property_t<int, int>&&)',
    inlined from 'cugraph::edge_src_property_t<GraphViewType, T>::edge_src_property_t(const raft::handle_t&, const GraphViewType&) [with GraphViewType = cugraph::graph_view_t<int, int, true, true>; T = int]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:425:13,
    inlined from 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = false; GraphViewType = cugraph::graph_view_t<int, int, true, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, true, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, true, true>, 1> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:522:20:
/home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:285:7: warning: '((const std::size_t*)((char*)&<unnamed> + offsetof(cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true, void>, int>,cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true, void>, int>::property_.cugraph::detail::edge_minor_property_t<int, int>::keys_.std::optional<raft::span<const int, true, 18446744073709551615> >::<unnamed>.std::_Optional_base<raft::span<const int, true, 18446744073709551615>, true, true>::_M_payload.std::_Optional_payload<raft::span<const int, true, 18446744073709551615>, true, true, true>::<unnamed>.std::_Optional_payload_base<raft::span<const int, true, 18446744073709551615> >::_M_payload)))[1]' may be used uninitialized [-Wmaybe-uninitialized]
  285 | class edge_minor_property_t {
      |       ^~~~~~~~~~~~~~~~~~~~~
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh: In function 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = false; GraphViewType = cugraph::graph_view_t<int, int, true, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, true, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, true, true>, 1> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]':
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:522:20: note: '<anonymous>' declared here
  522 |       minor_tmp_buffer = edge_src_property_t<GraphViewType, T>(handle, graph_view);
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In member function 'cugraph::detail::edge_minor_property_t<int, int>& cugraph::detail::edge_minor_property_t<int, int>::operator=(cugraph::detail::edge_minor_property_t<int, int>&&)',
    inlined from 'cugraph::edge_src_property_t<GraphViewType, T>::edge_src_property_t(const raft::handle_t&, const GraphViewType&) [with GraphViewType = cugraph::graph_view_t<int, int, true, true>; T = int]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:425:13,
    inlined from 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = false; GraphViewType = cugraph::graph_view_t<int, int, true, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, true, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, true, true>, 1> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:522:20:
/home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:285:7: warning: '*(long unsigned int*)((char*)&<unnamed> + offsetof(cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true, void>, int>,cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true, void>, int>::property_.cugraph::detail::edge_minor_property_t<int, int>::key_chunk_size_.std::optional<long unsigned int>::<unnamed>.std::_Optional_base<long unsigned int, true, true>::<unnamed>))' may be used uninitialized [-Wmaybe-uninitialized]
  285 | class edge_minor_property_t {
      |       ^~~~~~~~~~~~~~~~~~~~~
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh: In function 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = false; GraphViewType = cugraph::graph_view_t<int, int, true, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, true, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, true, true>, 1> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]':
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:522:20: note: '<anonymous>' declared here
  522 |       minor_tmp_buffer = edge_src_property_t<GraphViewType, T>(handle, graph_view);
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In member function 'cugraph::detail::edge_minor_property_t<int, int>& cugraph::detail::edge_minor_property_t<int, int>::operator=(cugraph::detail::edge_minor_property_t<int, int>&&)',
    inlined from 'cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true>, int>& cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true>, int>::operator=(cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true>, int>&&)' at /home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:375:7,
    inlined from 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = false; GraphViewType = cugraph::graph_view_t<int, int, true, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, true, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, true, true>, 1> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:522:18:
/home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:285:7: warning: '*(const int**)((char*)&<unnamed> + offsetof(cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true, void>, int>,cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true, void>, int>::property_.cugraph::detail::edge_minor_property_t<int, int>::keys_.std::optional<raft::span<const int, true, 18446744073709551615> >::<unnamed>.std::_Optional_base<raft::span<const int, true, 18446744073709551615>, true, true>::<unnamed>))' may be used uninitialized [-Wmaybe-uninitialized]
  285 | class edge_minor_property_t {
      |       ^~~~~~~~~~~~~~~~~~~~~
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh: In function 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = false; GraphViewType = cugraph::graph_view_t<int, int, true, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, true, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, true, true>, 1> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]':
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:522:20: note: '<anonymous>' declared here
  522 |       minor_tmp_buffer = edge_src_property_t<GraphViewType, T>(handle, graph_view);
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In member function 'cugraph::detail::edge_minor_property_t<int, int>& cugraph::detail::edge_minor_property_t<int, int>::operator=(cugraph::detail::edge_minor_property_t<int, int>&&)',
    inlined from 'cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true>, int>& cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true>, int>::operator=(cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true>, int>&&)' at /home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:375:7,
    inlined from 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = false; GraphViewType = cugraph::graph_view_t<int, int, true, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, true, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, true, true>, 1> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:522:18:
/home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:285:7: warning: '*(const int**)((char*)&<unnamed> + offsetof(cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true, void>, int>,cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true, void>, int>::property_.cugraph::detail::edge_minor_property_t<int, int>::key_chunk_start_offsets_.std::optional<raft::span<const int, true, 18446744073709551615> >::<unnamed>.std::_Optional_base<raft::span<const int, true, 18446744073709551615>, true, true>::<unnamed>))' may be used uninitialized [-Wmaybe-uninitialized]
  285 | class edge_minor_property_t {
      |       ^~~~~~~~~~~~~~~~~~~~~
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh: In function 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = false; GraphViewType = cugraph::graph_view_t<int, int, true, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, true, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, true, true>, 1> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]':
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:522:20: note: '<anonymous>' declared here
  522 |       minor_tmp_buffer = edge_src_property_t<GraphViewType, T>(handle, graph_view);
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In member function 'cugraph::detail::edge_minor_property_t<int, int>& cugraph::detail::edge_minor_property_t<int, int>::operator=(cugraph::detail::edge_minor_property_t<int, int>&&)',
    inlined from 'cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true>, int>& cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true>, int>::operator=(cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true>, int>&&)' at /home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:375:7,
    inlined from 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = false; GraphViewType = cugraph::graph_view_t<int, int, true, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, true, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, true, true>, 1> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:522:18:
/home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:285:7: warning: '((std::size_t*)((char*)&<unnamed> + offsetof(cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true, void>, int>,cugraph::edge_src_property_t<cugraph::graph_view_t<int, int, true, true, void>, int>::property_.cugraph::detail::edge_minor_property_t<int, int>::key_chunk_start_offsets_.std::optional<raft::span<const int, true, 18446744073709551615> >::<unnamed>.std::_Optional_base<raft::span<const int, true, 18446744073709551615>, true, true>::_M_payload.std::_Optional_payload<raft::span<const int, true, 18446744073709551615>, true, true, true>::<unnamed>.std::_Optional_payload_base<raft::span<const int, true, 18446744073709551615> >::_M_payload)))[1]' may be used uninitialized [-Wmaybe-uninitialized]
  285 | class edge_minor_property_t {
      |       ^~~~~~~~~~~~~~~~~~~~~
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh: In function 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = false; GraphViewType = cugraph::graph_view_t<int, int, true, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, true, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, true, true>, 1> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]':
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:522:20: note: '<anonymous>' declared here
  522 |       minor_tmp_buffer = edge_src_property_t<GraphViewType, T>(handle, graph_view);
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In member function 'cugraph::detail::edge_minor_property_t<int, int>& cugraph::detail::edge_minor_property_t<int, int>::operator=(cugraph::detail::edge_minor_property_t<int, int>&&)',
    inlined from 'cugraph::edge_dst_property_t<GraphViewType, T>::edge_dst_property_t(const raft::handle_t&, const GraphViewType&) [with GraphViewType = cugraph::graph_view_t<int, int, false, true>; T = int]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:527:13,
    inlined from 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = true; GraphViewType = cugraph::graph_view_t<int, int, false, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, false, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, false, true>, 2> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:524:20:
/home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:285:7: warning: '((const std::size_t*)((char*)&<unnamed> + offsetof(cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true, void>, int>,cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true, void>, int>::property_.cugraph::detail::edge_minor_property_t<int, int>::keys_.std::optional<raft::span<const int, true, 18446744073709551615> >::<unnamed>.std::_Optional_base<raft::span<const int, true, 18446744073709551615>, true, true>::_M_payload.std::_Optional_payload<raft::span<const int, true, 18446744073709551615>, true, true, true>::<unnamed>.std::_Optional_payload_base<raft::span<const int, true, 18446744073709551615> >::_M_payload)))[1]' may be used uninitialized [-Wmaybe-uninitialized]
  285 | class edge_minor_property_t {
      |       ^~~~~~~~~~~~~~~~~~~~~
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh: In function 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = true; GraphViewType = cugraph::graph_view_t<int, int, false, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, false, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, false, true>, 2> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]':
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:524:20: note: '<anonymous>' declared here
  524 |       minor_tmp_buffer = edge_dst_property_t<GraphViewType, T>(handle, graph_view);
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In member function 'cugraph::detail::edge_minor_property_t<int, int>& cugraph::detail::edge_minor_property_t<int, int>::operator=(cugraph::detail::edge_minor_property_t<int, int>&&)',
    inlined from 'cugraph::edge_dst_property_t<GraphViewType, T>::edge_dst_property_t(const raft::handle_t&, const GraphViewType&) [with GraphViewType = cugraph::graph_view_t<int, int, false, true>; T = int]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:527:13,
    inlined from 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = true; GraphViewType = cugraph::graph_view_t<int, int, false, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, false, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, false, true>, 2> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:524:20:
/home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:285:7: warning: '*(long unsigned int*)((char*)&<unnamed> + offsetof(cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true, void>, int>,cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true, void>, int>::property_.cugraph::detail::edge_minor_property_t<int, int>::key_chunk_size_.std::optional<long unsigned int>::<unnamed>.std::_Optional_base<long unsigned int, true, true>::<unnamed>))' may be used uninitialized [-Wmaybe-uninitialized]
  285 | class edge_minor_property_t {
      |       ^~~~~~~~~~~~~~~~~~~~~
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh: In function 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = true; GraphViewType = cugraph::graph_view_t<int, int, false, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, false, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, false, true>, 2> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]':
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:524:20: note: '<anonymous>' declared here
  524 |       minor_tmp_buffer = edge_dst_property_t<GraphViewType, T>(handle, graph_view);
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In member function 'cugraph::detail::edge_minor_property_t<int, int>& cugraph::detail::edge_minor_property_t<int, int>::operator=(cugraph::detail::edge_minor_property_t<int, int>&&)',
    inlined from 'cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true>, int>& cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true>, int>::operator=(cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true>, int>&&)' at /home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:467:7,
    inlined from 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = true; GraphViewType = cugraph::graph_view_t<int, int, false, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, false, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, false, true>, 2> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:524:18:
/home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:285:7: warning: '*(const int**)((char*)&<unnamed> + offsetof(cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true, void>, int>,cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true, void>, int>::property_.cugraph::detail::edge_minor_property_t<int, int>::keys_.std::optional<raft::span<const int, true, 18446744073709551615> >::<unnamed>.std::_Optional_base<raft::span<const int, true, 18446744073709551615>, true, true>::<unnamed>))' may be used uninitialized [-Wmaybe-uninitialized]
  285 | class edge_minor_property_t {
      |       ^~~~~~~~~~~~~~~~~~~~~
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh: In function 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = true; GraphViewType = cugraph::graph_view_t<int, int, false, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, false, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, false, true>, 2> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]':
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:524:20: note: '<anonymous>' declared here
  524 |       minor_tmp_buffer = edge_dst_property_t<GraphViewType, T>(handle, graph_view);
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In member function 'cugraph::detail::edge_minor_property_t<int, int>& cugraph::detail::edge_minor_property_t<int, int>::operator=(cugraph::detail::edge_minor_property_t<int, int>&&)',
    inlined from 'cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true>, int>& cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true>, int>::operator=(cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true>, int>&&)' at /home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:467:7,
    inlined from 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = true; GraphViewType = cugraph::graph_view_t<int, int, false, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, false, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, false, true>, 2> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:524:18:
/home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:285:7: warning: '*(const int**)((char*)&<unnamed> + offsetof(cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true, void>, int>,cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true, void>, int>::property_.cugraph::detail::edge_minor_property_t<int, int>::key_chunk_start_offsets_.std::optional<raft::span<const int, true, 18446744073709551615> >::<unnamed>.std::_Optional_base<raft::span<const int, true, 18446744073709551615>, true, true>::<unnamed>))' may be used uninitialized [-Wmaybe-uninitialized]
  285 | class edge_minor_property_t {
      |       ^~~~~~~~~~~~~~~~~~~~~
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh: In function 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = true; GraphViewType = cugraph::graph_view_t<int, int, false, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, false, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, false, true>, 2> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]':
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:524:20: note: '<anonymous>' declared here
  524 |       minor_tmp_buffer = edge_dst_property_t<GraphViewType, T>(handle, graph_view);
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In member function 'cugraph::detail::edge_minor_property_t<int, int>& cugraph::detail::edge_minor_property_t<int, int>::operator=(cugraph::detail::edge_minor_property_t<int, int>&&)',
    inlined from 'cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true>, int>& cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true>, int>::operator=(cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true>, int>&&)' at /home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:467:7,
    inlined from 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = true; GraphViewType = cugraph::graph_view_t<int, int, false, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, false, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, false, true>, 2> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]' at /home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:524:18:
/home/seunghwak/RAPIDS/development/cugraph/cpp/include/cugraph/edge_src_dst_property.hpp:285:7: warning: '((std::size_t*)((char*)&<unnamed> + offsetof(cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true, void>, int>,cugraph::edge_dst_property_t<cugraph::graph_view_t<int, int, false, true, void>, int>::property_.cugraph::detail::edge_minor_property_t<int, int>::key_chunk_start_offsets_.std::optional<raft::span<const int, true, 18446744073709551615> >::<unnamed>.std::_Optional_base<raft::span<const int, true, 18446744073709551615>, true, true>::_M_payload.std::_Optional_payload<raft::span<const int, true, 18446744073709551615>, true, true, true>::<unnamed>.std::_Optional_payload_base<raft::span<const int, true, 18446744073709551615> >::_M_payload)))[1]' may be used uninitialized [-Wmaybe-uninitialized]
  285 | class edge_minor_property_t {
      |       ^~~~~~~~~~~~~~~~~~~~~
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh: In function 'void cugraph::detail::per_v_transform_reduce_e(const raft::handle_t&, const GraphViewType&, EdgeSrcValueInputWrapper, EdgeDstValueInputWrapper, EdgeValueInputWrapper, EdgeOp, T, ReduceOp, VertexValueOutputIterator) [with bool incoming = true; GraphViewType = cugraph::graph_view_t<int, int, false, true>; EdgeSrcValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeDstValueInputWrapper = cugraph::detail::edge_endpoint_dummy_property_view_t; EdgeValueInputWrapper = cugraph::edge_dummy_property_view_t; EdgeOp = __nv_dl_wrapper_t<__nv_dl_tag<rmm::device_uvector<int> (*)(const raft::handle_t&, const cugraph::graph_view_t<int, int, false, true>&), cugraph::_GLOBAL__N__fbd7e12b_16_graph_view_mg_cu_854a5764_83484::compute_minor_degrees<int, int, false, true>, 2> >; ReduceOp = cugraph::reduce_op::plus<int>; T = int; VertexValueOutputIterator = int*]':
/home/seunghwak/RAPIDS/development/cugraph/cpp/src/prims/per_v_transform_reduce_incoming_outgoing_e.cuh:524:20: note: '<anonymous>' declared here
  524 |       minor_tmp_buffer = edge_dst_property_t<GraphViewType, T>(handle, graph_view);
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)
  - Chuck Hastings (https://github.com/ChuckHastings)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Naim (https://github.com/naimnv)

URL: https://github.com/rapidsai/cugraph/pull/3913"""
cugraph,https://github.com/rapidsai/cugraph/commit/9b28458dae82e85270bad0f8abf806f318fc84c8,"""Some MTMG code cleanup and small optimizations (#3894)

Added some missing documentation.

A couple of optimizations:
 * Modified the `append` logic to keep the mutex lock only long enough to compute what needs to be copied and where.
 * Modified the handle created by the resource manager for each GPU to have a stream pool to enable different threads to operate on different streams.

Authors:
  - Chuck Hastings (https://github.com/ChuckHastings)

Approvers:
  - Seunghwa Kang (https://github.com/seunghwak)

URL: https://github.com/rapidsai/cugraph/pull/3894"""
cugraph,https://github.com/rapidsai/cugraph/commit/32eaa5e97e5c26ebf5c8ca04faee51316eee75e8,"""Clean up self-loop and multi-edge removal logic (#4032)

There are mask utilities that perform some of the functions that were implemented to do this cleanup.

Use the mask utilities instead of replicating functionality.

Authors:
  - Chuck Hastings (https://github.com/ChuckHastings)

Approvers:
  - Seunghwa Kang (https://github.com/seunghwak)

URL: https://github.com/rapidsai/cugraph/pull/4032"""
cugraph,https://github.com/rapidsai/cugraph/commit/38a8cdbb369a398a9688acb84c41015b92b7fd0e,"""Address primitives performance regression with the added edge masking support (when edge masking is not in use) (#4119)

This addresses performance regression due to the added edge masking support when edge masking is disabled.

We addressed the issue for `per_v_transform_reduce_incoming|outgoing_e` in https://github.com/rapidsai/cugraph/pull/4085

Using a similar approach, we address the issue for `transform_e`, `transform_reduce_e`, and `detail::nbr_intersection` in this PR.

Authors:
  - Seunghwa Kang (https://github.com/seunghwak)

Approvers:
  - Chuck Hastings (https://github.com/ChuckHastings)
  - Naim (https://github.com/naimnv)

URL: https://github.com/rapidsai/cugraph/pull/4119"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/8d444d2b7701027fb358f896d4e0eab992bd0634,"""finishes backward"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/e561eb2948677e38b380c8f3328062a7681267da,"""pooling: fixes GPU implementation

However, it uses atomicAdd, which requires compute capability 20 and it could be slow. May need to revise this later."""
matconvnet,https://github.com/vlfeat/matconvnet/commit/88f933dec4b43f30219d16452319739441d6c0f5,"""gnormalize: quieter."""
matconvnet,https://github.com/vlfeat/matconvnet/commit/85b9e40055df8a7558d73a1e753d4c264f3d2f8b,"""finish GPU"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/20843c851a6ecae9504421e80b33e6b72f0c292a,"""nnconv.m: implements fully connected optimisations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/7afdce3007bfd09a95147793b9222da6eb523c0c,"""im2col.cpp: a lot faster"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/cac30f59efd0c793310fc63e278fe1ed485f4d67,"""vl_nnconv.cu: optimizations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/c60214eda107a173750d89fa1137185baf059cdd,"""faster nnnormalize"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/2b0f222659b94255484e45de1142c0b750a0aef0,"""nnnormalize: cleanup & more accurate approx pow"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/f8ca76aeac3a2b4081bb329bc7a1e70e8c27b0dd,"""simpler pooling implementation, rename"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/7c32c72ef1a2d8a69c9aef5946a56dd8efc0bd52,"""maxpool: more flexible input (GPU support incomplete)"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/bd8272dcc0fd318ffe12ece0b2309f74b4d0ba86,"""convolutio: now with arbitrary stride and padding (CPU)"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/608075f6ccf8a3314decaf6c3aaaf478a486141e,"""vl_imreadjpeg.c: optimizations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/71db6c3a5d684aba3dc83329ba898543e2a6f2f2,"""adds faster image fetching"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/1a9d5943b98ad1f085e70ebb671afe498a557118,"""normalization: dramatic speedup on GPU by coalescing kernel calls"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/d400c708f714f34abc681834cf287ff4b3a46961,"""Makefile and build system: simplifications

The former Makefile was used to create on the fly necessary .cpp files from .cu ones. Now the .cpp files are part of the distribution to avoid confusions.

The Makefile now writes the intermediate build products in matlab/mex/.build. It also does not remove them after the compilation is done, in order to save time when the package is compiled again."""
matconvnet,https://github.com/vlfeat/matconvnet/commit/add571447c5b684939bbe88ed70d3cfed0181f70,"""finish GPU hardening"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/1ab3da16d0706d71ffb3ef9aa52fe8d1be816426,"""imread_helpers.cpp: further optimisations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/148b01ba41936def72a264e91148d34c4ac8bc06,"""bnorm_gpu.cu : gridSize optimization to avoid thread overload"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/1dd15ca4914427637c6c2d21673b84b17be46fa1,"""bnorm_gpu.cu : don't use gridSize optimization, not relevant enough for nowadays GPU"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/df828a5f883adf12620f3f12d76bb8217a2fbb08,"""vl_imreadjpeg.cu: Windows optimizations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/96f3e7afddc618225824b79910f1f3085a444cea,"""implements half of backward pass on CPU"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/4d133190ae368e623ad9a885ecfc4bb034ac7f76,"""bilinearsampler cudnn version now supports multiple transforms per image"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/4ba8c5dd8ae953f3dadf62442172776768b9c28e,"""implements half of backward pass on CPU"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/d814cb95479402e78661291ba3aa4505f7140c66,"""bilinearsampler cudnn version now supports multiple transforms per image"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/f7f943944d7d439ca654d0f6357ff6ad57ca68fd,"""data.hpp: adds a function to compute the size of a data type"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/f78b5e412cbc5c834f1d6aab780754049d11beac,"""vl_imreadjpeg.cu: pin packed memory for faster GPU transfer"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/2ed943cc7317d08c715dbc4afc85b6e218d28198,"""vl_tflow.cu: better detection of interrupted computation"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/8d444d2b7701027fb358f896d4e0eab992bd0634,"""finishes backward"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/e561eb2948677e38b380c8f3328062a7681267da,"""pooling: fixes GPU implementation

However, it uses atomicAdd, which requires compute capability 20 and it could be slow. May need to revise this later."""
matconvnet,https://github.com/vlfeat/matconvnet/commit/88f933dec4b43f30219d16452319739441d6c0f5,"""gnormalize: quieter."""
matconvnet,https://github.com/vlfeat/matconvnet/commit/85b9e40055df8a7558d73a1e753d4c264f3d2f8b,"""finish GPU"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/20843c851a6ecae9504421e80b33e6b72f0c292a,"""nnconv.m: implements fully connected optimisations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/7afdce3007bfd09a95147793b9222da6eb523c0c,"""im2col.cpp: a lot faster"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/cac30f59efd0c793310fc63e278fe1ed485f4d67,"""vl_nnconv.cu: optimizations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/c60214eda107a173750d89fa1137185baf059cdd,"""faster nnnormalize"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/2b0f222659b94255484e45de1142c0b750a0aef0,"""nnnormalize: cleanup & more accurate approx pow"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/f8ca76aeac3a2b4081bb329bc7a1e70e8c27b0dd,"""simpler pooling implementation, rename"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/7c32c72ef1a2d8a69c9aef5946a56dd8efc0bd52,"""maxpool: more flexible input (GPU support incomplete)"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/bd8272dcc0fd318ffe12ece0b2309f74b4d0ba86,"""convolutio: now with arbitrary stride and padding (CPU)"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/608075f6ccf8a3314decaf6c3aaaf478a486141e,"""vl_imreadjpeg.c: optimizations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/71db6c3a5d684aba3dc83329ba898543e2a6f2f2,"""adds faster image fetching"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/1a9d5943b98ad1f085e70ebb671afe498a557118,"""normalization: dramatic speedup on GPU by coalescing kernel calls"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/d400c708f714f34abc681834cf287ff4b3a46961,"""Makefile and build system: simplifications

The former Makefile was used to create on the fly necessary .cpp files from .cu ones. Now the .cpp files are part of the distribution to avoid confusions.

The Makefile now writes the intermediate build products in matlab/mex/.build. It also does not remove them after the compilation is done, in order to save time when the package is compiled again."""
matconvnet,https://github.com/vlfeat/matconvnet/commit/add571447c5b684939bbe88ed70d3cfed0181f70,"""finish GPU hardening"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/1ab3da16d0706d71ffb3ef9aa52fe8d1be816426,"""imread_helpers.cpp: further optimisations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/148b01ba41936def72a264e91148d34c4ac8bc06,"""bnorm_gpu.cu : gridSize optimization to avoid thread overload"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/1dd15ca4914427637c6c2d21673b84b17be46fa1,"""bnorm_gpu.cu : don't use gridSize optimization, not relevant enough for nowadays GPU"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/df828a5f883adf12620f3f12d76bb8217a2fbb08,"""vl_imreadjpeg.cu: Windows optimizations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/96f3e7afddc618225824b79910f1f3085a444cea,"""implements half of backward pass on CPU"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/4d133190ae368e623ad9a885ecfc4bb034ac7f76,"""bilinearsampler cudnn version now supports multiple transforms per image"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/4ba8c5dd8ae953f3dadf62442172776768b9c28e,"""implements half of backward pass on CPU"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/d814cb95479402e78661291ba3aa4505f7140c66,"""bilinearsampler cudnn version now supports multiple transforms per image"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/f7f943944d7d439ca654d0f6357ff6ad57ca68fd,"""data.hpp: adds a function to compute the size of a data type"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/f78b5e412cbc5c834f1d6aab780754049d11beac,"""vl_imreadjpeg.cu: pin packed memory for faster GPU transfer"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/2ed943cc7317d08c715dbc4afc85b6e218d28198,"""vl_tflow.cu: better detection of interrupted computation"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/977f417d9fadd2b537fda6058ffbd0f3f5d66a62,"""bnorm: makes computation of moments numerically more stable"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/40f30fca8a597068f6bea931c68889742cb81ce9,"""vl_imreadjpeg.cu: reduce sync cost"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/a5462d621ff5cbca9883df2c9c24135b3247de3d,"""vl_imreadjpeg.cu: tighter computations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/25ff2d9ca1fa9a08a11d42cb910fe3a6d7ecc2c7,"""vl_imreadjpeg: skips some useless computations"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/83163dc3df9f7496bc4d0a6de0afeac1f330e6d9,"""LRN: more compact implementation"""
matconvnet,https://github.com/vlfeat/matconvnet/commit/7f26d1768ad9529a705860cf6aa6488183446eb8,"""nnsubsample: switch to more compact interface"""
Deformable-Convolution-V2-PyTorch,https://github.com/chengdazhi/Deformable-Convolution-V2-PyTorch/commit/6e41a3e13a753150098501ab97cd0d96d1369af4,"""resize tensors back"""
